{
  "version": 3,
  "sources": ["../../../node_modules/vitepress/dist/client/theme-default/index.js", "../../../node_modules/vitepress/dist/client/theme-default/without-fonts.js", "../../../node_modules/@vueuse/shared/index.mjs", "../../../node_modules/@vueuse/core/index.mjs", "../../../node_modules/vitepress/dist/client/theme-default/composables/sidebar.js", "../../../node_modules/vitepress/dist/client/theme-default/support/utils.js", "../../../node_modules/vitepress/dist/client/theme-default/composables/data.js", "../../../node_modules/vitepress/dist/client/theme-default/support/sidebar.js"],
  "sourcesContent": ["import './styles/fonts.css';\r\nexport * from './without-fonts';\r\nexport { default as default } from './without-fonts';\r\n", "import './styles/vars.css';\r\nimport './styles/base.css';\r\nimport './styles/utils.css';\r\nimport './styles/components/custom-block.css';\r\nimport './styles/components/vp-code.css';\r\nimport './styles/components/vp-code-group.css';\r\nimport './styles/components/vp-doc.css';\r\nimport './styles/components/vp-sponsor.css';\r\nimport VPBadge from './components/VPBadge.vue';\r\nimport Layout from './Layout.vue';\r\n// Note: if we add more optional components here, i.e. components that are not\r\n// used in the theme by default unless the user imports them, make sure to update\r\n// the `lazyDefaultThemeComponentsRE` regex in src/node/build/bundle.ts.\r\nexport { default as VPHomeHero } from './components/VPHomeHero.vue';\r\nexport { default as VPHomeFeatures } from './components/VPHomeFeatures.vue';\r\nexport { default as VPHomeSponsors } from './components/VPHomeSponsors.vue';\r\nexport { default as VPDocAsideSponsors } from './components/VPDocAsideSponsors.vue';\r\nexport { default as VPTeamPage } from './components/VPTeamPage.vue';\r\nexport { default as VPTeamPageTitle } from './components/VPTeamPageTitle.vue';\r\nexport { default as VPTeamPageSection } from './components/VPTeamPageSection.vue';\r\nexport { default as VPTeamMembers } from './components/VPTeamMembers.vue';\r\nexport { useSidebar } from './composables/sidebar';\r\nconst theme = {\r\n    Layout,\r\n    enhanceApp: ({ app }) => {\r\n        app.component('Badge', VPBadge);\r\n    }\r\n};\r\nexport default theme;\r\n", "import { shallowRef, watchEffect, readonly, ref, watch, customRef, getCurrentScope, onScopeDispose, effectScope, provide, inject, isVue3, version, isRef, unref, computed, reactive, toRefs as toRefs$1, toRef as toRef$1, isVue2, set as set$1, getCurrentInstance, onBeforeMount, nextTick, onBeforeUnmount, onMounted, onUnmounted, isReactive } from 'vue-demi';\r\n\r\nvar __defProp$b = Object.defineProperty;\r\nvar __defProps$8 = Object.defineProperties;\r\nvar __getOwnPropDescs$8 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$d = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$d = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$d = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$b = (obj, key, value) => key in obj ? __defProp$b(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$b = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$d.call(b, prop))\r\n      __defNormalProp$b(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$d)\r\n    for (var prop of __getOwnPropSymbols$d(b)) {\r\n      if (__propIsEnum$d.call(b, prop))\r\n        __defNormalProp$b(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$8 = (a, b) => __defProps$8(a, __getOwnPropDescs$8(b));\r\nfunction computedEager(fn, options) {\r\n  var _a;\r\n  const result = shallowRef();\r\n  watchEffect(() => {\r\n    result.value = fn();\r\n  }, __spreadProps$8(__spreadValues$b({}, options), {\r\n    flush: (_a = options == null ? void 0 : options.flush) != null ? _a : \"sync\"\r\n  }));\r\n  return readonly(result);\r\n}\r\n\r\nfunction computedWithControl(source, fn) {\r\n  let v = void 0;\r\n  let track;\r\n  let trigger;\r\n  const dirty = ref(true);\r\n  const update = () => {\r\n    dirty.value = true;\r\n    trigger();\r\n  };\r\n  watch(source, update, { flush: \"sync\" });\r\n  const get = typeof fn === \"function\" ? fn : fn.get;\r\n  const set = typeof fn === \"function\" ? void 0 : fn.set;\r\n  const result = customRef((_track, _trigger) => {\r\n    track = _track;\r\n    trigger = _trigger;\r\n    return {\r\n      get() {\r\n        if (dirty.value) {\r\n          v = get();\r\n          dirty.value = false;\r\n        }\r\n        track();\r\n        return v;\r\n      },\r\n      set(v2) {\r\n        set == null ? void 0 : set(v2);\r\n      }\r\n    };\r\n  });\r\n  if (Object.isExtensible(result))\r\n    result.trigger = update;\r\n  return result;\r\n}\r\n\r\nfunction tryOnScopeDispose(fn) {\r\n  if (getCurrentScope()) {\r\n    onScopeDispose(fn);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction createEventHook() {\r\n  const fns = /* @__PURE__ */ new Set();\r\n  const off = (fn) => {\r\n    fns.delete(fn);\r\n  };\r\n  const on = (fn) => {\r\n    fns.add(fn);\r\n    const offFn = () => off(fn);\r\n    tryOnScopeDispose(offFn);\r\n    return {\r\n      off: offFn\r\n    };\r\n  };\r\n  const trigger = (param) => {\r\n    return Promise.all(Array.from(fns).map((fn) => fn(param)));\r\n  };\r\n  return {\r\n    on,\r\n    off,\r\n    trigger\r\n  };\r\n}\r\n\r\nfunction createGlobalState(stateFactory) {\r\n  let initialized = false;\r\n  let state;\r\n  const scope = effectScope(true);\r\n  return (...args) => {\r\n    if (!initialized) {\r\n      state = scope.run(() => stateFactory(...args));\r\n      initialized = true;\r\n    }\r\n    return state;\r\n  };\r\n}\r\n\r\nfunction createInjectionState(composable) {\r\n  const key = Symbol(\"InjectionState\");\r\n  const useProvidingState = (...args) => {\r\n    const state = composable(...args);\r\n    provide(key, state);\r\n    return state;\r\n  };\r\n  const useInjectedState = () => inject(key);\r\n  return [useProvidingState, useInjectedState];\r\n}\r\n\r\nfunction createSharedComposable(composable) {\r\n  let subscribers = 0;\r\n  let state;\r\n  let scope;\r\n  const dispose = () => {\r\n    subscribers -= 1;\r\n    if (scope && subscribers <= 0) {\r\n      scope.stop();\r\n      state = void 0;\r\n      scope = void 0;\r\n    }\r\n  };\r\n  return (...args) => {\r\n    subscribers += 1;\r\n    if (!state) {\r\n      scope = effectScope(true);\r\n      state = scope.run(() => composable(...args));\r\n    }\r\n    tryOnScopeDispose(dispose);\r\n    return state;\r\n  };\r\n}\r\n\r\nfunction extendRef(ref, extend, { enumerable = false, unwrap = true } = {}) {\r\n  if (!isVue3 && !version.startsWith(\"2.7.\")) {\r\n    if (process.env.NODE_ENV !== \"production\")\r\n      throw new Error(\"[VueUse] extendRef only works in Vue 2.7 or above.\");\r\n    return;\r\n  }\r\n  for (const [key, value] of Object.entries(extend)) {\r\n    if (key === \"value\")\r\n      continue;\r\n    if (isRef(value) && unwrap) {\r\n      Object.defineProperty(ref, key, {\r\n        get() {\r\n          return value.value;\r\n        },\r\n        set(v) {\r\n          value.value = v;\r\n        },\r\n        enumerable\r\n      });\r\n    } else {\r\n      Object.defineProperty(ref, key, { value, enumerable });\r\n    }\r\n  }\r\n  return ref;\r\n}\r\n\r\nfunction get(obj, key) {\r\n  if (key == null)\r\n    return unref(obj);\r\n  return unref(obj)[key];\r\n}\r\n\r\nfunction isDefined(v) {\r\n  return unref(v) != null;\r\n}\r\n\r\nvar __defProp$a = Object.defineProperty;\r\nvar __getOwnPropSymbols$c = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$c = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$c = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$a = (obj, key, value) => key in obj ? __defProp$a(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$a = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$c.call(b, prop))\r\n      __defNormalProp$a(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$c)\r\n    for (var prop of __getOwnPropSymbols$c(b)) {\r\n      if (__propIsEnum$c.call(b, prop))\r\n        __defNormalProp$a(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction makeDestructurable(obj, arr) {\r\n  if (typeof Symbol !== \"undefined\") {\r\n    const clone = __spreadValues$a({}, obj);\r\n    Object.defineProperty(clone, Symbol.iterator, {\r\n      enumerable: false,\r\n      value() {\r\n        let index = 0;\r\n        return {\r\n          next: () => ({\r\n            value: arr[index++],\r\n            done: index > arr.length\r\n          })\r\n        };\r\n      }\r\n    });\r\n    return clone;\r\n  } else {\r\n    return Object.assign([...arr], obj);\r\n  }\r\n}\r\n\r\nfunction toValue(r) {\r\n  return typeof r === \"function\" ? r() : unref(r);\r\n}\r\nconst resolveUnref = toValue;\r\n\r\nfunction reactify(fn, options) {\r\n  const unrefFn = (options == null ? void 0 : options.computedGetter) === false ? unref : toValue;\r\n  return function(...args) {\r\n    return computed(() => fn.apply(this, args.map((i) => unrefFn(i))));\r\n  };\r\n}\r\n\r\nfunction reactifyObject(obj, optionsOrKeys = {}) {\r\n  let keys = [];\r\n  let options;\r\n  if (Array.isArray(optionsOrKeys)) {\r\n    keys = optionsOrKeys;\r\n  } else {\r\n    options = optionsOrKeys;\r\n    const { includeOwnProperties = true } = optionsOrKeys;\r\n    keys.push(...Object.keys(obj));\r\n    if (includeOwnProperties)\r\n      keys.push(...Object.getOwnPropertyNames(obj));\r\n  }\r\n  return Object.fromEntries(\r\n    keys.map((key) => {\r\n      const value = obj[key];\r\n      return [\r\n        key,\r\n        typeof value === \"function\" ? reactify(value.bind(obj), options) : value\r\n      ];\r\n    })\r\n  );\r\n}\r\n\r\nfunction toReactive(objectRef) {\r\n  if (!isRef(objectRef))\r\n    return reactive(objectRef);\r\n  const proxy = new Proxy({}, {\r\n    get(_, p, receiver) {\r\n      return unref(Reflect.get(objectRef.value, p, receiver));\r\n    },\r\n    set(_, p, value) {\r\n      if (isRef(objectRef.value[p]) && !isRef(value))\r\n        objectRef.value[p].value = value;\r\n      else\r\n        objectRef.value[p] = value;\r\n      return true;\r\n    },\r\n    deleteProperty(_, p) {\r\n      return Reflect.deleteProperty(objectRef.value, p);\r\n    },\r\n    has(_, p) {\r\n      return Reflect.has(objectRef.value, p);\r\n    },\r\n    ownKeys() {\r\n      return Object.keys(objectRef.value);\r\n    },\r\n    getOwnPropertyDescriptor() {\r\n      return {\r\n        enumerable: true,\r\n        configurable: true\r\n      };\r\n    }\r\n  });\r\n  return reactive(proxy);\r\n}\r\n\r\nfunction reactiveComputed(fn) {\r\n  return toReactive(computed(fn));\r\n}\r\n\r\nfunction reactiveOmit(obj, ...keys) {\r\n  const flatKeys = keys.flat();\r\n  const predicate = flatKeys[0];\r\n  return reactiveComputed(\r\n    () => typeof predicate === \"function\" ? Object.fromEntries(Object.entries(toRefs$1(obj)).filter(([k, v]) => !predicate(toValue(v), k))) : Object.fromEntries(Object.entries(toRefs$1(obj)).filter((e) => !flatKeys.includes(e[0])))\r\n  );\r\n}\r\n\r\nconst isClient = typeof window !== \"undefined\";\r\nconst isDef = (val) => typeof val !== \"undefined\";\r\nconst notNullish = (val) => val != null;\r\nconst assert = (condition, ...infos) => {\r\n  if (!condition)\r\n    console.warn(...infos);\r\n};\r\nconst toString = Object.prototype.toString;\r\nconst isObject = (val) => toString.call(val) === \"[object Object]\";\r\nconst now = () => Date.now();\r\nconst timestamp = () => +Date.now();\r\nconst clamp = (n, min, max) => Math.min(max, Math.max(min, n));\r\nconst noop = () => {\r\n};\r\nconst rand = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\nconst hasOwn = (val, key) => Object.prototype.hasOwnProperty.call(val, key);\r\nconst isIOS = /* @__PURE__ */ getIsIOS();\r\nfunction getIsIOS() {\r\n  var _a;\r\n  return isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && /* @__PURE__ */ /iP(ad|hone|od)/.test(window.navigator.userAgent);\r\n}\r\n\r\nfunction createFilterWrapper(filter, fn) {\r\n  function wrapper(...args) {\r\n    return new Promise((resolve, reject) => {\r\n      Promise.resolve(filter(() => fn.apply(this, args), { fn, thisArg: this, args })).then(resolve).catch(reject);\r\n    });\r\n  }\r\n  return wrapper;\r\n}\r\nconst bypassFilter = (invoke) => {\r\n  return invoke();\r\n};\r\nfunction debounceFilter(ms, options = {}) {\r\n  let timer;\r\n  let maxTimer;\r\n  let lastRejector = noop;\r\n  const _clearTimeout = (timer2) => {\r\n    clearTimeout(timer2);\r\n    lastRejector();\r\n    lastRejector = noop;\r\n  };\r\n  const filter = (invoke) => {\r\n    const duration = toValue(ms);\r\n    const maxDuration = toValue(options.maxWait);\r\n    if (timer)\r\n      _clearTimeout(timer);\r\n    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {\r\n      if (maxTimer) {\r\n        _clearTimeout(maxTimer);\r\n        maxTimer = null;\r\n      }\r\n      return Promise.resolve(invoke());\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      lastRejector = options.rejectOnCancel ? reject : resolve;\r\n      if (maxDuration && !maxTimer) {\r\n        maxTimer = setTimeout(() => {\r\n          if (timer)\r\n            _clearTimeout(timer);\r\n          maxTimer = null;\r\n          resolve(invoke());\r\n        }, maxDuration);\r\n      }\r\n      timer = setTimeout(() => {\r\n        if (maxTimer)\r\n          _clearTimeout(maxTimer);\r\n        maxTimer = null;\r\n        resolve(invoke());\r\n      }, duration);\r\n    });\r\n  };\r\n  return filter;\r\n}\r\nfunction throttleFilter(ms, trailing = true, leading = true, rejectOnCancel = false) {\r\n  let lastExec = 0;\r\n  let timer;\r\n  let isLeading = true;\r\n  let lastRejector = noop;\r\n  let lastValue;\r\n  const clear = () => {\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      timer = void 0;\r\n      lastRejector();\r\n      lastRejector = noop;\r\n    }\r\n  };\r\n  const filter = (_invoke) => {\r\n    const duration = toValue(ms);\r\n    const elapsed = Date.now() - lastExec;\r\n    const invoke = () => {\r\n      return lastValue = _invoke();\r\n    };\r\n    clear();\r\n    if (duration <= 0) {\r\n      lastExec = Date.now();\r\n      return invoke();\r\n    }\r\n    if (elapsed > duration && (leading || !isLeading)) {\r\n      lastExec = Date.now();\r\n      invoke();\r\n    } else if (trailing) {\r\n      lastValue = new Promise((resolve, reject) => {\r\n        lastRejector = rejectOnCancel ? reject : resolve;\r\n        timer = setTimeout(() => {\r\n          lastExec = Date.now();\r\n          isLeading = true;\r\n          resolve(invoke());\r\n          clear();\r\n        }, Math.max(0, duration - elapsed));\r\n      });\r\n    }\r\n    if (!leading && !timer)\r\n      timer = setTimeout(() => isLeading = true, duration);\r\n    isLeading = false;\r\n    return lastValue;\r\n  };\r\n  return filter;\r\n}\r\nfunction pausableFilter(extendFilter = bypassFilter) {\r\n  const isActive = ref(true);\r\n  function pause() {\r\n    isActive.value = false;\r\n  }\r\n  function resume() {\r\n    isActive.value = true;\r\n  }\r\n  const eventFilter = (...args) => {\r\n    if (isActive.value)\r\n      extendFilter(...args);\r\n  };\r\n  return { isActive: readonly(isActive), pause, resume, eventFilter };\r\n}\r\n\r\nconst directiveHooks = {\r\n  mounted: isVue3 ? \"mounted\" : \"inserted\",\r\n  updated: isVue3 ? \"updated\" : \"componentUpdated\",\r\n  unmounted: isVue3 ? \"unmounted\" : \"unbind\"\r\n};\r\n\r\nfunction promiseTimeout(ms, throwOnTimeout = false, reason = \"Timeout\") {\r\n  return new Promise((resolve, reject) => {\r\n    if (throwOnTimeout)\r\n      setTimeout(() => reject(reason), ms);\r\n    else\r\n      setTimeout(resolve, ms);\r\n  });\r\n}\r\nfunction identity(arg) {\r\n  return arg;\r\n}\r\nfunction createSingletonPromise(fn) {\r\n  let _promise;\r\n  function wrapper() {\r\n    if (!_promise)\r\n      _promise = fn();\r\n    return _promise;\r\n  }\r\n  wrapper.reset = async () => {\r\n    const _prev = _promise;\r\n    _promise = void 0;\r\n    if (_prev)\r\n      await _prev;\r\n  };\r\n  return wrapper;\r\n}\r\nfunction invoke(fn) {\r\n  return fn();\r\n}\r\nfunction containsProp(obj, ...props) {\r\n  return props.some((k) => k in obj);\r\n}\r\nfunction increaseWithUnit(target, delta) {\r\n  var _a;\r\n  if (typeof target === \"number\")\r\n    return target + delta;\r\n  const value = ((_a = target.match(/^-?[0-9]+\\.?[0-9]*/)) == null ? void 0 : _a[0]) || \"\";\r\n  const unit = target.slice(value.length);\r\n  const result = Number.parseFloat(value) + delta;\r\n  if (Number.isNaN(result))\r\n    return target;\r\n  return result + unit;\r\n}\r\nfunction objectPick(obj, keys, omitUndefined = false) {\r\n  return keys.reduce((n, k) => {\r\n    if (k in obj) {\r\n      if (!omitUndefined || obj[k] !== void 0)\r\n        n[k] = obj[k];\r\n    }\r\n    return n;\r\n  }, {});\r\n}\r\nfunction objectOmit(obj, keys, omitUndefined = false) {\r\n  return Object.fromEntries(Object.entries(obj).filter(([key, value]) => {\r\n    return (!omitUndefined || value !== void 0) && !keys.includes(key);\r\n  }));\r\n}\r\nfunction objectEntries(obj) {\r\n  return Object.entries(obj);\r\n}\r\n\r\nfunction toRef(...args) {\r\n  if (args.length !== 1)\r\n    return toRef$1(...args);\r\n  const r = args[0];\r\n  return typeof r === \"function\" ? readonly(customRef(() => ({ get: r, set: noop }))) : ref(r);\r\n}\r\nconst resolveRef = toRef;\r\n\r\nfunction reactivePick(obj, ...keys) {\r\n  const flatKeys = keys.flat();\r\n  const predicate = flatKeys[0];\r\n  return reactiveComputed(() => typeof predicate === \"function\" ? Object.fromEntries(Object.entries(toRefs$1(obj)).filter(([k, v]) => predicate(toValue(v), k))) : Object.fromEntries(flatKeys.map((k) => [k, toRef(obj, k)])));\r\n}\r\n\r\nfunction refAutoReset(defaultValue, afterMs = 1e4) {\r\n  return customRef((track, trigger) => {\r\n    let value = defaultValue;\r\n    let timer;\r\n    const resetAfter = () => setTimeout(() => {\r\n      value = defaultValue;\r\n      trigger();\r\n    }, toValue(afterMs));\r\n    tryOnScopeDispose(() => {\r\n      clearTimeout(timer);\r\n    });\r\n    return {\r\n      get() {\r\n        track();\r\n        return value;\r\n      },\r\n      set(newValue) {\r\n        value = newValue;\r\n        trigger();\r\n        clearTimeout(timer);\r\n        timer = resetAfter();\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction useDebounceFn(fn, ms = 200, options = {}) {\r\n  return createFilterWrapper(\r\n    debounceFilter(ms, options),\r\n    fn\r\n  );\r\n}\r\n\r\nfunction refDebounced(value, ms = 200, options = {}) {\r\n  const debounced = ref(value.value);\r\n  const updater = useDebounceFn(() => {\r\n    debounced.value = value.value;\r\n  }, ms, options);\r\n  watch(value, () => updater());\r\n  return debounced;\r\n}\r\n\r\nfunction refDefault(source, defaultValue) {\r\n  return computed({\r\n    get() {\r\n      var _a;\r\n      return (_a = source.value) != null ? _a : defaultValue;\r\n    },\r\n    set(value) {\r\n      source.value = value;\r\n    }\r\n  });\r\n}\r\n\r\nfunction useThrottleFn(fn, ms = 200, trailing = false, leading = true, rejectOnCancel = false) {\r\n  return createFilterWrapper(\r\n    throttleFilter(ms, trailing, leading, rejectOnCancel),\r\n    fn\r\n  );\r\n}\r\n\r\nfunction refThrottled(value, delay = 200, trailing = true, leading = true) {\r\n  if (delay <= 0)\r\n    return value;\r\n  const throttled = ref(value.value);\r\n  const updater = useThrottleFn(() => {\r\n    throttled.value = value.value;\r\n  }, delay, trailing, leading);\r\n  watch(value, () => updater());\r\n  return throttled;\r\n}\r\n\r\nfunction refWithControl(initial, options = {}) {\r\n  let source = initial;\r\n  let track;\r\n  let trigger;\r\n  const ref = customRef((_track, _trigger) => {\r\n    track = _track;\r\n    trigger = _trigger;\r\n    return {\r\n      get() {\r\n        return get();\r\n      },\r\n      set(v) {\r\n        set(v);\r\n      }\r\n    };\r\n  });\r\n  function get(tracking = true) {\r\n    if (tracking)\r\n      track();\r\n    return source;\r\n  }\r\n  function set(value, triggering = true) {\r\n    var _a, _b;\r\n    if (value === source)\r\n      return;\r\n    const old = source;\r\n    if (((_a = options.onBeforeChange) == null ? void 0 : _a.call(options, value, old)) === false)\r\n      return;\r\n    source = value;\r\n    (_b = options.onChanged) == null ? void 0 : _b.call(options, value, old);\r\n    if (triggering)\r\n      trigger();\r\n  }\r\n  const untrackedGet = () => get(false);\r\n  const silentSet = (v) => set(v, false);\r\n  const peek = () => get(false);\r\n  const lay = (v) => set(v, false);\r\n  return extendRef(\r\n    ref,\r\n    {\r\n      get,\r\n      set,\r\n      untrackedGet,\r\n      silentSet,\r\n      peek,\r\n      lay\r\n    },\r\n    { enumerable: true }\r\n  );\r\n}\r\nconst controlledRef = refWithControl;\r\n\r\nfunction set(...args) {\r\n  if (args.length === 2) {\r\n    const [ref, value] = args;\r\n    ref.value = value;\r\n  }\r\n  if (args.length === 3) {\r\n    if (isVue2) {\r\n      set$1(...args);\r\n    } else {\r\n      const [target, key, value] = args;\r\n      target[key] = value;\r\n    }\r\n  }\r\n}\r\n\r\nfunction syncRef(left, right, options = {}) {\r\n  var _a, _b;\r\n  const {\r\n    flush = \"sync\",\r\n    deep = false,\r\n    immediate = true,\r\n    direction = \"both\",\r\n    transform = {}\r\n  } = options;\r\n  let watchLeft;\r\n  let watchRight;\r\n  const transformLTR = (_a = transform.ltr) != null ? _a : (v) => v;\r\n  const transformRTL = (_b = transform.rtl) != null ? _b : (v) => v;\r\n  if (direction === \"both\" || direction === \"ltr\") {\r\n    watchLeft = watch(\r\n      left,\r\n      (newValue) => right.value = transformLTR(newValue),\r\n      { flush, deep, immediate }\r\n    );\r\n  }\r\n  if (direction === \"both\" || direction === \"rtl\") {\r\n    watchRight = watch(\r\n      right,\r\n      (newValue) => left.value = transformRTL(newValue),\r\n      { flush, deep, immediate }\r\n    );\r\n  }\r\n  return () => {\r\n    watchLeft == null ? void 0 : watchLeft();\r\n    watchRight == null ? void 0 : watchRight();\r\n  };\r\n}\r\n\r\nfunction syncRefs(source, targets, options = {}) {\r\n  const {\r\n    flush = \"sync\",\r\n    deep = false,\r\n    immediate = true\r\n  } = options;\r\n  if (!Array.isArray(targets))\r\n    targets = [targets];\r\n  return watch(\r\n    source,\r\n    (newValue) => targets.forEach((target) => target.value = newValue),\r\n    { flush, deep, immediate }\r\n  );\r\n}\r\n\r\nvar __defProp$9 = Object.defineProperty;\r\nvar __defProps$7 = Object.defineProperties;\r\nvar __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$b = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$b = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$b = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$9 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$b.call(b, prop))\r\n      __defNormalProp$9(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$b)\r\n    for (var prop of __getOwnPropSymbols$b(b)) {\r\n      if (__propIsEnum$b.call(b, prop))\r\n        __defNormalProp$9(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$7 = (a, b) => __defProps$7(a, __getOwnPropDescs$7(b));\r\nfunction toRefs(objectRef) {\r\n  if (!isRef(objectRef))\r\n    return toRefs$1(objectRef);\r\n  const result = Array.isArray(objectRef.value) ? new Array(objectRef.value.length) : {};\r\n  for (const key in objectRef.value) {\r\n    result[key] = customRef(() => ({\r\n      get() {\r\n        return objectRef.value[key];\r\n      },\r\n      set(v) {\r\n        if (Array.isArray(objectRef.value)) {\r\n          const copy = [...objectRef.value];\r\n          copy[key] = v;\r\n          objectRef.value = copy;\r\n        } else {\r\n          const newObject = __spreadProps$7(__spreadValues$9({}, objectRef.value), { [key]: v });\r\n          Object.setPrototypeOf(newObject, Object.getPrototypeOf(objectRef.value));\r\n          objectRef.value = newObject;\r\n        }\r\n      }\r\n    }));\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction tryOnBeforeMount(fn, sync = true) {\r\n  if (getCurrentInstance())\r\n    onBeforeMount(fn);\r\n  else if (sync)\r\n    fn();\r\n  else\r\n    nextTick(fn);\r\n}\r\n\r\nfunction tryOnBeforeUnmount(fn) {\r\n  if (getCurrentInstance())\r\n    onBeforeUnmount(fn);\r\n}\r\n\r\nfunction tryOnMounted(fn, sync = true) {\r\n  if (getCurrentInstance())\r\n    onMounted(fn);\r\n  else if (sync)\r\n    fn();\r\n  else\r\n    nextTick(fn);\r\n}\r\n\r\nfunction tryOnUnmounted(fn) {\r\n  if (getCurrentInstance())\r\n    onUnmounted(fn);\r\n}\r\n\r\nfunction createUntil(r, isNot = false) {\r\n  function toMatch(condition, { flush = \"sync\", deep = false, timeout, throwOnTimeout } = {}) {\r\n    let stop = null;\r\n    const watcher = new Promise((resolve) => {\r\n      stop = watch(\r\n        r,\r\n        (v) => {\r\n          if (condition(v) !== isNot) {\r\n            stop == null ? void 0 : stop();\r\n            resolve(v);\r\n          }\r\n        },\r\n        {\r\n          flush,\r\n          deep,\r\n          immediate: true\r\n        }\r\n      );\r\n    });\r\n    const promises = [watcher];\r\n    if (timeout != null) {\r\n      promises.push(\r\n        promiseTimeout(timeout, throwOnTimeout).then(() => toValue(r)).finally(() => stop == null ? void 0 : stop())\r\n      );\r\n    }\r\n    return Promise.race(promises);\r\n  }\r\n  function toBe(value, options) {\r\n    if (!isRef(value))\r\n      return toMatch((v) => v === value, options);\r\n    const { flush = \"sync\", deep = false, timeout, throwOnTimeout } = options != null ? options : {};\r\n    let stop = null;\r\n    const watcher = new Promise((resolve) => {\r\n      stop = watch(\r\n        [r, value],\r\n        ([v1, v2]) => {\r\n          if (isNot !== (v1 === v2)) {\r\n            stop == null ? void 0 : stop();\r\n            resolve(v1);\r\n          }\r\n        },\r\n        {\r\n          flush,\r\n          deep,\r\n          immediate: true\r\n        }\r\n      );\r\n    });\r\n    const promises = [watcher];\r\n    if (timeout != null) {\r\n      promises.push(\r\n        promiseTimeout(timeout, throwOnTimeout).then(() => toValue(r)).finally(() => {\r\n          stop == null ? void 0 : stop();\r\n          return toValue(r);\r\n        })\r\n      );\r\n    }\r\n    return Promise.race(promises);\r\n  }\r\n  function toBeTruthy(options) {\r\n    return toMatch((v) => Boolean(v), options);\r\n  }\r\n  function toBeNull(options) {\r\n    return toBe(null, options);\r\n  }\r\n  function toBeUndefined(options) {\r\n    return toBe(void 0, options);\r\n  }\r\n  function toBeNaN(options) {\r\n    return toMatch(Number.isNaN, options);\r\n  }\r\n  function toContains(value, options) {\r\n    return toMatch((v) => {\r\n      const array = Array.from(v);\r\n      return array.includes(value) || array.includes(toValue(value));\r\n    }, options);\r\n  }\r\n  function changed(options) {\r\n    return changedTimes(1, options);\r\n  }\r\n  function changedTimes(n = 1, options) {\r\n    let count = -1;\r\n    return toMatch(() => {\r\n      count += 1;\r\n      return count >= n;\r\n    }, options);\r\n  }\r\n  if (Array.isArray(toValue(r))) {\r\n    const instance = {\r\n      toMatch,\r\n      toContains,\r\n      changed,\r\n      changedTimes,\r\n      get not() {\r\n        return createUntil(r, !isNot);\r\n      }\r\n    };\r\n    return instance;\r\n  } else {\r\n    const instance = {\r\n      toMatch,\r\n      toBe,\r\n      toBeTruthy,\r\n      toBeNull,\r\n      toBeNaN,\r\n      toBeUndefined,\r\n      changed,\r\n      changedTimes,\r\n      get not() {\r\n        return createUntil(r, !isNot);\r\n      }\r\n    };\r\n    return instance;\r\n  }\r\n}\r\nfunction until(r) {\r\n  return createUntil(r);\r\n}\r\n\r\nfunction defaultComparator(value, othVal) {\r\n  return value === othVal;\r\n}\r\nfunction useArrayDifference(...args) {\r\n  var _a;\r\n  const list = args[0];\r\n  const values = args[1];\r\n  let compareFn = (_a = args[2]) != null ? _a : defaultComparator;\r\n  if (typeof compareFn === \"string\") {\r\n    const key = compareFn;\r\n    compareFn = (value, othVal) => value[key] === othVal[key];\r\n  }\r\n  return computed(() => toValue(list).filter((x) => toValue(values).findIndex((y) => compareFn(x, y)) === -1));\r\n}\r\n\r\nfunction useArrayEvery(list, fn) {\r\n  return computed(() => toValue(list).every((element, index, array) => fn(toValue(element), index, array)));\r\n}\r\n\r\nfunction useArrayFilter(list, fn) {\r\n  return computed(() => toValue(list).map((i) => toValue(i)).filter(fn));\r\n}\r\n\r\nfunction useArrayFind(list, fn) {\r\n  return computed(\r\n    () => toValue(\r\n      toValue(list).find((element, index, array) => fn(toValue(element), index, array))\r\n    )\r\n  );\r\n}\r\n\r\nfunction useArrayFindIndex(list, fn) {\r\n  return computed(() => toValue(list).findIndex((element, index, array) => fn(toValue(element), index, array)));\r\n}\r\n\r\nfunction findLast(arr, cb) {\r\n  let index = arr.length;\r\n  while (index-- > 0) {\r\n    if (cb(arr[index], index, arr))\r\n      return arr[index];\r\n  }\r\n  return void 0;\r\n}\r\nfunction useArrayFindLast(list, fn) {\r\n  return computed(\r\n    () => toValue(\r\n      !Array.prototype.findLast ? findLast(toValue(list), (element, index, array) => fn(toValue(element), index, array)) : toValue(list).findLast((element, index, array) => fn(toValue(element), index, array))\r\n    )\r\n  );\r\n}\r\n\r\nfunction isArrayIncludesOptions(obj) {\r\n  return isObject(obj) && containsProp(obj, \"formIndex\", \"comparator\");\r\n}\r\nfunction useArrayIncludes(...args) {\r\n  var _a;\r\n  const list = args[0];\r\n  const value = args[1];\r\n  let comparator = args[2];\r\n  let formIndex = 0;\r\n  if (isArrayIncludesOptions(comparator)) {\r\n    formIndex = (_a = comparator.fromIndex) != null ? _a : 0;\r\n    comparator = comparator.comparator;\r\n  }\r\n  if (typeof comparator === \"string\") {\r\n    const key = comparator;\r\n    comparator = (element, value2) => element[key] === toValue(value2);\r\n  }\r\n  comparator = comparator != null ? comparator : (element, value2) => element === toValue(value2);\r\n  return computed(\r\n    () => toValue(list).slice(formIndex).some(\r\n      (element, index, array) => comparator(toValue(element), toValue(value), index, toValue(array))\r\n    )\r\n  );\r\n}\r\n\r\nfunction useArrayJoin(list, separator) {\r\n  return computed(() => toValue(list).map((i) => toValue(i)).join(toValue(separator)));\r\n}\r\n\r\nfunction useArrayMap(list, fn) {\r\n  return computed(() => toValue(list).map((i) => toValue(i)).map(fn));\r\n}\r\n\r\nfunction useArrayReduce(list, reducer, ...args) {\r\n  const reduceCallback = (sum, value, index) => reducer(toValue(sum), toValue(value), index);\r\n  return computed(() => {\r\n    const resolved = toValue(list);\r\n    return args.length ? resolved.reduce(reduceCallback, toValue(args[0])) : resolved.reduce(reduceCallback);\r\n  });\r\n}\r\n\r\nfunction useArraySome(list, fn) {\r\n  return computed(() => toValue(list).some((element, index, array) => fn(toValue(element), index, array)));\r\n}\r\n\r\nfunction uniq(array) {\r\n  return Array.from(new Set(array));\r\n}\r\nfunction uniqueElementsBy(array, fn) {\r\n  return array.reduce((acc, v) => {\r\n    if (!acc.some((x) => fn(v, x, array)))\r\n      acc.push(v);\r\n    return acc;\r\n  }, []);\r\n}\r\nfunction useArrayUnique(list, compareFn) {\r\n  return computed(() => {\r\n    const resolvedList = toValue(list).map((element) => toValue(element));\r\n    return compareFn ? uniqueElementsBy(resolvedList, compareFn) : uniq(resolvedList);\r\n  });\r\n}\r\n\r\nfunction useCounter(initialValue = 0, options = {}) {\r\n  const count = ref(initialValue);\r\n  const {\r\n    max = Infinity,\r\n    min = -Infinity\r\n  } = options;\r\n  const inc = (delta = 1) => count.value = Math.min(max, count.value + delta);\r\n  const dec = (delta = 1) => count.value = Math.max(min, count.value - delta);\r\n  const get = () => count.value;\r\n  const set = (val) => count.value = Math.max(min, Math.min(max, val));\r\n  const reset = (val = initialValue) => {\r\n    initialValue = val;\r\n    return set(val);\r\n  };\r\n  return { count, inc, dec, get, set, reset };\r\n}\r\n\r\nconst REGEX_PARSE = /^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/;\r\nconst REGEX_FORMAT = /\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a{1,2}|A{1,2}|m{1,2}|s{1,2}|Z{1,2}|SSS/g;\r\nfunction defaultMeridiem(hours, minutes, isLowercase, hasPeriod) {\r\n  let m = hours < 12 ? \"AM\" : \"PM\";\r\n  if (hasPeriod)\r\n    m = m.split(\"\").reduce((acc, curr) => acc += `${curr}.`, \"\");\r\n  return isLowercase ? m.toLowerCase() : m;\r\n}\r\nfunction formatDate(date, formatStr, options = {}) {\r\n  var _a;\r\n  const years = date.getFullYear();\r\n  const month = date.getMonth();\r\n  const days = date.getDate();\r\n  const hours = date.getHours();\r\n  const minutes = date.getMinutes();\r\n  const seconds = date.getSeconds();\r\n  const milliseconds = date.getMilliseconds();\r\n  const day = date.getDay();\r\n  const meridiem = (_a = options.customMeridiem) != null ? _a : defaultMeridiem;\r\n  const matches = {\r\n    YY: () => String(years).slice(-2),\r\n    YYYY: () => years,\r\n    M: () => month + 1,\r\n    MM: () => `${month + 1}`.padStart(2, \"0\"),\r\n    MMM: () => date.toLocaleDateString(options.locales, { month: \"short\" }),\r\n    MMMM: () => date.toLocaleDateString(options.locales, { month: \"long\" }),\r\n    D: () => String(days),\r\n    DD: () => `${days}`.padStart(2, \"0\"),\r\n    H: () => String(hours),\r\n    HH: () => `${hours}`.padStart(2, \"0\"),\r\n    h: () => `${hours % 12 || 12}`.padStart(1, \"0\"),\r\n    hh: () => `${hours % 12 || 12}`.padStart(2, \"0\"),\r\n    m: () => String(minutes),\r\n    mm: () => `${minutes}`.padStart(2, \"0\"),\r\n    s: () => String(seconds),\r\n    ss: () => `${seconds}`.padStart(2, \"0\"),\r\n    SSS: () => `${milliseconds}`.padStart(3, \"0\"),\r\n    d: () => day,\r\n    dd: () => date.toLocaleDateString(options.locales, { weekday: \"narrow\" }),\r\n    ddd: () => date.toLocaleDateString(options.locales, { weekday: \"short\" }),\r\n    dddd: () => date.toLocaleDateString(options.locales, { weekday: \"long\" }),\r\n    A: () => meridiem(hours, minutes),\r\n    AA: () => meridiem(hours, minutes, false, true),\r\n    a: () => meridiem(hours, minutes, true),\r\n    aa: () => meridiem(hours, minutes, true, true)\r\n  };\r\n  return formatStr.replace(REGEX_FORMAT, (match, $1) => {\r\n    var _a2;\r\n    return $1 || ((_a2 = matches[match]) == null ? void 0 : _a2.call(matches)) || match;\r\n  });\r\n}\r\nfunction normalizeDate(date) {\r\n  if (date === null)\r\n    return /* @__PURE__ */ new Date(NaN);\r\n  if (date === void 0)\r\n    return /* @__PURE__ */ new Date();\r\n  if (date instanceof Date)\r\n    return new Date(date);\r\n  if (typeof date === \"string\" && !/Z$/i.test(date)) {\r\n    const d = date.match(REGEX_PARSE);\r\n    if (d) {\r\n      const m = d[2] - 1 || 0;\r\n      const ms = (d[7] || \"0\").substring(0, 3);\r\n      return new Date(d[1], m, d[3] || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms);\r\n    }\r\n  }\r\n  return new Date(date);\r\n}\r\nfunction useDateFormat(date, formatStr = \"HH:mm:ss\", options = {}) {\r\n  return computed(() => formatDate(normalizeDate(toValue(date)), toValue(formatStr), options));\r\n}\r\n\r\nfunction useIntervalFn(cb, interval = 1e3, options = {}) {\r\n  const {\r\n    immediate = true,\r\n    immediateCallback = false\r\n  } = options;\r\n  let timer = null;\r\n  const isActive = ref(false);\r\n  function clean() {\r\n    if (timer) {\r\n      clearInterval(timer);\r\n      timer = null;\r\n    }\r\n  }\r\n  function pause() {\r\n    isActive.value = false;\r\n    clean();\r\n  }\r\n  function resume() {\r\n    const intervalValue = toValue(interval);\r\n    if (intervalValue <= 0)\r\n      return;\r\n    isActive.value = true;\r\n    if (immediateCallback)\r\n      cb();\r\n    clean();\r\n    timer = setInterval(cb, intervalValue);\r\n  }\r\n  if (immediate && isClient)\r\n    resume();\r\n  if (isRef(interval) || typeof interval === \"function\") {\r\n    const stopWatch = watch(interval, () => {\r\n      if (isActive.value && isClient)\r\n        resume();\r\n    });\r\n    tryOnScopeDispose(stopWatch);\r\n  }\r\n  tryOnScopeDispose(pause);\r\n  return {\r\n    isActive,\r\n    pause,\r\n    resume\r\n  };\r\n}\r\n\r\nvar __defProp$8 = Object.defineProperty;\r\nvar __getOwnPropSymbols$a = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$a = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$a = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$8 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$a.call(b, prop))\r\n      __defNormalProp$8(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$a)\r\n    for (var prop of __getOwnPropSymbols$a(b)) {\r\n      if (__propIsEnum$a.call(b, prop))\r\n        __defNormalProp$8(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useInterval(interval = 1e3, options = {}) {\r\n  const {\r\n    controls: exposeControls = false,\r\n    immediate = true,\r\n    callback\r\n  } = options;\r\n  const counter = ref(0);\r\n  const update = () => counter.value += 1;\r\n  const reset = () => {\r\n    counter.value = 0;\r\n  };\r\n  const controls = useIntervalFn(\r\n    callback ? () => {\r\n      update();\r\n      callback(counter.value);\r\n    } : update,\r\n    interval,\r\n    { immediate }\r\n  );\r\n  if (exposeControls) {\r\n    return __spreadValues$8({\r\n      counter,\r\n      reset\r\n    }, controls);\r\n  } else {\r\n    return counter;\r\n  }\r\n}\r\n\r\nfunction useLastChanged(source, options = {}) {\r\n  var _a;\r\n  const ms = ref((_a = options.initialValue) != null ? _a : null);\r\n  watch(\r\n    source,\r\n    () => ms.value = timestamp(),\r\n    options\r\n  );\r\n  return ms;\r\n}\r\n\r\nfunction useTimeoutFn(cb, interval, options = {}) {\r\n  const {\r\n    immediate = true\r\n  } = options;\r\n  const isPending = ref(false);\r\n  let timer = null;\r\n  function clear() {\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      timer = null;\r\n    }\r\n  }\r\n  function stop() {\r\n    isPending.value = false;\r\n    clear();\r\n  }\r\n  function start(...args) {\r\n    clear();\r\n    isPending.value = true;\r\n    timer = setTimeout(() => {\r\n      isPending.value = false;\r\n      timer = null;\r\n      cb(...args);\r\n    }, toValue(interval));\r\n  }\r\n  if (immediate) {\r\n    isPending.value = true;\r\n    if (isClient)\r\n      start();\r\n  }\r\n  tryOnScopeDispose(stop);\r\n  return {\r\n    isPending: readonly(isPending),\r\n    start,\r\n    stop\r\n  };\r\n}\r\n\r\nvar __defProp$7 = Object.defineProperty;\r\nvar __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$9 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$9 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$7 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$9.call(b, prop))\r\n      __defNormalProp$7(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$9)\r\n    for (var prop of __getOwnPropSymbols$9(b)) {\r\n      if (__propIsEnum$9.call(b, prop))\r\n        __defNormalProp$7(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useTimeout(interval = 1e3, options = {}) {\r\n  const {\r\n    controls: exposeControls = false,\r\n    callback\r\n  } = options;\r\n  const controls = useTimeoutFn(\r\n    callback != null ? callback : noop,\r\n    interval,\r\n    options\r\n  );\r\n  const ready = computed(() => !controls.isPending.value);\r\n  if (exposeControls) {\r\n    return __spreadValues$7({\r\n      ready\r\n    }, controls);\r\n  } else {\r\n    return ready;\r\n  }\r\n}\r\n\r\nfunction useToNumber(value, options = {}) {\r\n  const {\r\n    method = \"parseFloat\",\r\n    radix,\r\n    nanToZero\r\n  } = options;\r\n  return computed(() => {\r\n    let resolved = toValue(value);\r\n    if (typeof resolved === \"string\")\r\n      resolved = Number[method](resolved, radix);\r\n    if (nanToZero && Number.isNaN(resolved))\r\n      resolved = 0;\r\n    return resolved;\r\n  });\r\n}\r\n\r\nfunction useToString(value) {\r\n  return computed(() => `${toValue(value)}`);\r\n}\r\n\r\nfunction useToggle(initialValue = false, options = {}) {\r\n  const {\r\n    truthyValue = true,\r\n    falsyValue = false\r\n  } = options;\r\n  const valueIsRef = isRef(initialValue);\r\n  const _value = ref(initialValue);\r\n  function toggle(value) {\r\n    if (arguments.length) {\r\n      _value.value = value;\r\n      return _value.value;\r\n    } else {\r\n      const truthy = toValue(truthyValue);\r\n      _value.value = _value.value === truthy ? toValue(falsyValue) : truthy;\r\n      return _value.value;\r\n    }\r\n  }\r\n  if (valueIsRef)\r\n    return toggle;\r\n  else\r\n    return [_value, toggle];\r\n}\r\n\r\nfunction watchArray(source, cb, options) {\r\n  let oldList = (options == null ? void 0 : options.immediate) ? [] : [\r\n    ...source instanceof Function ? source() : Array.isArray(source) ? source : toValue(source)\r\n  ];\r\n  return watch(source, (newList, _, onCleanup) => {\r\n    const oldListRemains = new Array(oldList.length);\r\n    const added = [];\r\n    for (const obj of newList) {\r\n      let found = false;\r\n      for (let i = 0; i < oldList.length; i++) {\r\n        if (!oldListRemains[i] && obj === oldList[i]) {\r\n          oldListRemains[i] = true;\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!found)\r\n        added.push(obj);\r\n    }\r\n    const removed = oldList.filter((_2, i) => !oldListRemains[i]);\r\n    cb(newList, oldList, added, removed, onCleanup);\r\n    oldList = [...newList];\r\n  }, options);\r\n}\r\n\r\nvar __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$8 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$8 = Object.prototype.propertyIsEnumerable;\r\nvar __objRest$5 = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$8.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$8)\r\n    for (var prop of __getOwnPropSymbols$8(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$8.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction watchWithFilter(source, cb, options = {}) {\r\n  const _a = options, {\r\n    eventFilter = bypassFilter\r\n  } = _a, watchOptions = __objRest$5(_a, [\r\n    \"eventFilter\"\r\n  ]);\r\n  return watch(\r\n    source,\r\n    createFilterWrapper(\r\n      eventFilter,\r\n      cb\r\n    ),\r\n    watchOptions\r\n  );\r\n}\r\n\r\nvar __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$7 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$7 = Object.prototype.propertyIsEnumerable;\r\nvar __objRest$4 = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$7.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$7)\r\n    for (var prop of __getOwnPropSymbols$7(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$7.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction watchAtMost(source, cb, options) {\r\n  const _a = options, {\r\n    count\r\n  } = _a, watchOptions = __objRest$4(_a, [\r\n    \"count\"\r\n  ]);\r\n  const current = ref(0);\r\n  const stop = watchWithFilter(\r\n    source,\r\n    (...args) => {\r\n      current.value += 1;\r\n      if (current.value >= toValue(count))\r\n        nextTick(() => stop());\r\n      cb(...args);\r\n    },\r\n    watchOptions\r\n  );\r\n  return { count: current, stop };\r\n}\r\n\r\nvar __defProp$6 = Object.defineProperty;\r\nvar __defProps$6 = Object.defineProperties;\r\nvar __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$6 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$6 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$6 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$6.call(b, prop))\r\n      __defNormalProp$6(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$6)\r\n    for (var prop of __getOwnPropSymbols$6(b)) {\r\n      if (__propIsEnum$6.call(b, prop))\r\n        __defNormalProp$6(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$6 = (a, b) => __defProps$6(a, __getOwnPropDescs$6(b));\r\nvar __objRest$3 = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$6.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$6)\r\n    for (var prop of __getOwnPropSymbols$6(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$6.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction watchDebounced(source, cb, options = {}) {\r\n  const _a = options, {\r\n    debounce = 0,\r\n    maxWait = void 0\r\n  } = _a, watchOptions = __objRest$3(_a, [\r\n    \"debounce\",\r\n    \"maxWait\"\r\n  ]);\r\n  return watchWithFilter(\r\n    source,\r\n    cb,\r\n    __spreadProps$6(__spreadValues$6({}, watchOptions), {\r\n      eventFilter: debounceFilter(debounce, { maxWait })\r\n    })\r\n  );\r\n}\r\n\r\nvar __defProp$5 = Object.defineProperty;\r\nvar __defProps$5 = Object.defineProperties;\r\nvar __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$5 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$5 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$5 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$5.call(b, prop))\r\n      __defNormalProp$5(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$5)\r\n    for (var prop of __getOwnPropSymbols$5(b)) {\r\n      if (__propIsEnum$5.call(b, prop))\r\n        __defNormalProp$5(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$5 = (a, b) => __defProps$5(a, __getOwnPropDescs$5(b));\r\nfunction watchDeep(source, cb, options) {\r\n  return watch(\r\n    source,\r\n    cb,\r\n    __spreadProps$5(__spreadValues$5({}, options), {\r\n      deep: true\r\n    })\r\n  );\r\n}\r\n\r\nvar __defProp$4 = Object.defineProperty;\r\nvar __defProps$4 = Object.defineProperties;\r\nvar __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$4 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$4 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$4 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$4.call(b, prop))\r\n      __defNormalProp$4(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$4)\r\n    for (var prop of __getOwnPropSymbols$4(b)) {\r\n      if (__propIsEnum$4.call(b, prop))\r\n        __defNormalProp$4(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));\r\nvar __objRest$2 = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$4.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$4)\r\n    for (var prop of __getOwnPropSymbols$4(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$4.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction watchIgnorable(source, cb, options = {}) {\r\n  const _a = options, {\r\n    eventFilter = bypassFilter\r\n  } = _a, watchOptions = __objRest$2(_a, [\r\n    \"eventFilter\"\r\n  ]);\r\n  const filteredCb = createFilterWrapper(\r\n    eventFilter,\r\n    cb\r\n  );\r\n  let ignoreUpdates;\r\n  let ignorePrevAsyncUpdates;\r\n  let stop;\r\n  if (watchOptions.flush === \"sync\") {\r\n    const ignore = ref(false);\r\n    ignorePrevAsyncUpdates = () => {\r\n    };\r\n    ignoreUpdates = (updater) => {\r\n      ignore.value = true;\r\n      updater();\r\n      ignore.value = false;\r\n    };\r\n    stop = watch(\r\n      source,\r\n      (...args) => {\r\n        if (!ignore.value)\r\n          filteredCb(...args);\r\n      },\r\n      watchOptions\r\n    );\r\n  } else {\r\n    const disposables = [];\r\n    const ignoreCounter = ref(0);\r\n    const syncCounter = ref(0);\r\n    ignorePrevAsyncUpdates = () => {\r\n      ignoreCounter.value = syncCounter.value;\r\n    };\r\n    disposables.push(\r\n      watch(\r\n        source,\r\n        () => {\r\n          syncCounter.value++;\r\n        },\r\n        __spreadProps$4(__spreadValues$4({}, watchOptions), { flush: \"sync\" })\r\n      )\r\n    );\r\n    ignoreUpdates = (updater) => {\r\n      const syncCounterPrev = syncCounter.value;\r\n      updater();\r\n      ignoreCounter.value += syncCounter.value - syncCounterPrev;\r\n    };\r\n    disposables.push(\r\n      watch(\r\n        source,\r\n        (...args) => {\r\n          const ignore = ignoreCounter.value > 0 && ignoreCounter.value === syncCounter.value;\r\n          ignoreCounter.value = 0;\r\n          syncCounter.value = 0;\r\n          if (ignore)\r\n            return;\r\n          filteredCb(...args);\r\n        },\r\n        watchOptions\r\n      )\r\n    );\r\n    stop = () => {\r\n      disposables.forEach((fn) => fn());\r\n    };\r\n  }\r\n  return { stop, ignoreUpdates, ignorePrevAsyncUpdates };\r\n}\r\n\r\nvar __defProp$3 = Object.defineProperty;\r\nvar __defProps$3 = Object.defineProperties;\r\nvar __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$3 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$3 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$3 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$3.call(b, prop))\r\n      __defNormalProp$3(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$3)\r\n    for (var prop of __getOwnPropSymbols$3(b)) {\r\n      if (__propIsEnum$3.call(b, prop))\r\n        __defNormalProp$3(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));\r\nfunction watchImmediate(source, cb, options) {\r\n  return watch(\r\n    source,\r\n    cb,\r\n    __spreadProps$3(__spreadValues$3({}, options), {\r\n      immediate: true\r\n    })\r\n  );\r\n}\r\n\r\nfunction watchOnce(source, cb, options) {\r\n  const stop = watch(source, (...args) => {\r\n    nextTick(() => stop());\r\n    return cb(...args);\r\n  }, options);\r\n}\r\n\r\nvar __defProp$2 = Object.defineProperty;\r\nvar __defProps$2 = Object.defineProperties;\r\nvar __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$2 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$2.call(b, prop))\r\n      __defNormalProp$2(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$2)\r\n    for (var prop of __getOwnPropSymbols$2(b)) {\r\n      if (__propIsEnum$2.call(b, prop))\r\n        __defNormalProp$2(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));\r\nvar __objRest$1 = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$2.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$2)\r\n    for (var prop of __getOwnPropSymbols$2(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$2.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction watchPausable(source, cb, options = {}) {\r\n  const _a = options, {\r\n    eventFilter: filter\r\n  } = _a, watchOptions = __objRest$1(_a, [\r\n    \"eventFilter\"\r\n  ]);\r\n  const { eventFilter, pause, resume, isActive } = pausableFilter(filter);\r\n  const stop = watchWithFilter(\r\n    source,\r\n    cb,\r\n    __spreadProps$2(__spreadValues$2({}, watchOptions), {\r\n      eventFilter\r\n    })\r\n  );\r\n  return { stop, pause, resume, isActive };\r\n}\r\n\r\nvar __defProp$1 = Object.defineProperty;\r\nvar __defProps$1 = Object.defineProperties;\r\nvar __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$1 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$1.call(b, prop))\r\n      __defNormalProp$1(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$1)\r\n    for (var prop of __getOwnPropSymbols$1(b)) {\r\n      if (__propIsEnum$1.call(b, prop))\r\n        __defNormalProp$1(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));\r\nvar __objRest = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$1.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$1)\r\n    for (var prop of __getOwnPropSymbols$1(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$1.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction watchThrottled(source, cb, options = {}) {\r\n  const _a = options, {\r\n    throttle = 0,\r\n    trailing = true,\r\n    leading = true\r\n  } = _a, watchOptions = __objRest(_a, [\r\n    \"throttle\",\r\n    \"trailing\",\r\n    \"leading\"\r\n  ]);\r\n  return watchWithFilter(\r\n    source,\r\n    cb,\r\n    __spreadProps$1(__spreadValues$1({}, watchOptions), {\r\n      eventFilter: throttleFilter(throttle, trailing, leading)\r\n    })\r\n  );\r\n}\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp.call(b, prop))\r\n      __defNormalProp(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols)\r\n    for (var prop of __getOwnPropSymbols(b)) {\r\n      if (__propIsEnum.call(b, prop))\r\n        __defNormalProp(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\r\nfunction watchTriggerable(source, cb, options = {}) {\r\n  let cleanupFn;\r\n  function onEffect() {\r\n    if (!cleanupFn)\r\n      return;\r\n    const fn = cleanupFn;\r\n    cleanupFn = void 0;\r\n    fn();\r\n  }\r\n  function onCleanup(callback) {\r\n    cleanupFn = callback;\r\n  }\r\n  const _cb = (value, oldValue) => {\r\n    onEffect();\r\n    return cb(value, oldValue, onCleanup);\r\n  };\r\n  const res = watchIgnorable(source, _cb, options);\r\n  const { ignoreUpdates } = res;\r\n  const trigger = () => {\r\n    let res2;\r\n    ignoreUpdates(() => {\r\n      res2 = _cb(getWatchSources(source), getOldValue(source));\r\n    });\r\n    return res2;\r\n  };\r\n  return __spreadProps(__spreadValues({}, res), {\r\n    trigger\r\n  });\r\n}\r\nfunction getWatchSources(sources) {\r\n  if (isReactive(sources))\r\n    return sources;\r\n  if (Array.isArray(sources))\r\n    return sources.map((item) => toValue(item));\r\n  return toValue(sources);\r\n}\r\nfunction getOldValue(source) {\r\n  return Array.isArray(source) ? source.map(() => void 0) : void 0;\r\n}\r\n\r\nfunction whenever(source, cb, options) {\r\n  return watch(\r\n    source,\r\n    (v, ov, onInvalidate) => {\r\n      if (v)\r\n        cb(v, ov, onInvalidate);\r\n    },\r\n    options\r\n  );\r\n}\r\n\r\nexport { assert, refAutoReset as autoResetRef, bypassFilter, clamp, computedEager, computedWithControl, containsProp, computedWithControl as controlledComputed, controlledRef, createEventHook, createFilterWrapper, createGlobalState, createInjectionState, reactify as createReactiveFn, createSharedComposable, createSingletonPromise, debounceFilter, refDebounced as debouncedRef, watchDebounced as debouncedWatch, directiveHooks, computedEager as eagerComputed, extendRef, formatDate, get, hasOwn, identity, watchIgnorable as ignorableWatch, increaseWithUnit, invoke, isClient, isDef, isDefined, isIOS, isObject, makeDestructurable, noop, normalizeDate, notNullish, now, objectEntries, objectOmit, objectPick, pausableFilter, watchPausable as pausableWatch, promiseTimeout, rand, reactify, reactifyObject, reactiveComputed, reactiveOmit, reactivePick, refAutoReset, refDebounced, refDefault, refThrottled, refWithControl, resolveRef, resolveUnref, set, syncRef, syncRefs, throttleFilter, refThrottled as throttledRef, watchThrottled as throttledWatch, timestamp, toReactive, toRef, toRefs, toValue, tryOnBeforeMount, tryOnBeforeUnmount, tryOnMounted, tryOnScopeDispose, tryOnUnmounted, until, useArrayDifference, useArrayEvery, useArrayFilter, useArrayFind, useArrayFindIndex, useArrayFindLast, useArrayIncludes, useArrayJoin, useArrayMap, useArrayReduce, useArraySome, useArrayUnique, useCounter, useDateFormat, refDebounced as useDebounce, useDebounceFn, useInterval, useIntervalFn, useLastChanged, refThrottled as useThrottle, useThrottleFn, useTimeout, useTimeoutFn, useToNumber, useToString, useToggle, watchArray, watchAtMost, watchDebounced, watchDeep, watchIgnorable, watchImmediate, watchOnce, watchPausable, watchThrottled, watchTriggerable, watchWithFilter, whenever };\r\n", "import { noop, makeDestructurable, toValue, isClient, tryOnScopeDispose, isIOS, tryOnMounted, computedWithControl, isObject, objectOmit, promiseTimeout, until, toRef, increaseWithUnit, objectEntries, useTimeoutFn, pausableWatch, createEventHook, timestamp, pausableFilter, watchIgnorable, debounceFilter, createFilterWrapper, bypassFilter, createSingletonPromise, toRefs, useIntervalFn, notNullish, containsProp, hasOwn, throttleFilter, useDebounceFn, useThrottleFn, clamp, syncRef, objectPick, tryOnUnmounted, watchWithFilter, identity, isDef } from '@vueuse/shared';\r\nexport * from '@vueuse/shared';\r\nimport { isRef, ref, shallowRef, watchEffect, computed, inject, isVue3, version, defineComponent, h, TransitionGroup, shallowReactive, Fragment, watch, getCurrentInstance, customRef, onUpdated, onMounted, readonly, nextTick, reactive, markRaw, getCurrentScope, isVue2, set, del, isReadonly, onBeforeUpdate } from 'vue-demi';\r\n\r\nfunction computedAsync(evaluationCallback, initialState, optionsOrRef) {\r\n  let options;\r\n  if (isRef(optionsOrRef)) {\r\n    options = {\r\n      evaluating: optionsOrRef\r\n    };\r\n  } else {\r\n    options = optionsOrRef || {};\r\n  }\r\n  const {\r\n    lazy = false,\r\n    evaluating = void 0,\r\n    shallow = true,\r\n    onError = noop\r\n  } = options;\r\n  const started = ref(!lazy);\r\n  const current = shallow ? shallowRef(initialState) : ref(initialState);\r\n  let counter = 0;\r\n  watchEffect(async (onInvalidate) => {\r\n    if (!started.value)\r\n      return;\r\n    counter++;\r\n    const counterAtBeginning = counter;\r\n    let hasFinished = false;\r\n    if (evaluating) {\r\n      Promise.resolve().then(() => {\r\n        evaluating.value = true;\r\n      });\r\n    }\r\n    try {\r\n      const result = await evaluationCallback((cancelCallback) => {\r\n        onInvalidate(() => {\r\n          if (evaluating)\r\n            evaluating.value = false;\r\n          if (!hasFinished)\r\n            cancelCallback();\r\n        });\r\n      });\r\n      if (counterAtBeginning === counter)\r\n        current.value = result;\r\n    } catch (e) {\r\n      onError(e);\r\n    } finally {\r\n      if (evaluating && counterAtBeginning === counter)\r\n        evaluating.value = false;\r\n      hasFinished = true;\r\n    }\r\n  });\r\n  if (lazy) {\r\n    return computed(() => {\r\n      started.value = true;\r\n      return current.value;\r\n    });\r\n  } else {\r\n    return current;\r\n  }\r\n}\r\n\r\nfunction computedInject(key, options, defaultSource, treatDefaultAsFactory) {\r\n  let source = inject(key);\r\n  if (defaultSource)\r\n    source = inject(key, defaultSource);\r\n  if (treatDefaultAsFactory)\r\n    source = inject(key, defaultSource, treatDefaultAsFactory);\r\n  if (typeof options === \"function\") {\r\n    return computed((ctx) => options(source, ctx));\r\n  } else {\r\n    return computed({\r\n      get: (ctx) => options.get(source, ctx),\r\n      set: options.set\r\n    });\r\n  }\r\n}\r\n\r\nvar __defProp$q = Object.defineProperty;\r\nvar __defProps$d = Object.defineProperties;\r\nvar __getOwnPropDescs$d = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$t = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$t = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$t = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$q = (obj, key, value) => key in obj ? __defProp$q(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$q = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$t.call(b, prop))\r\n      __defNormalProp$q(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$t)\r\n    for (var prop of __getOwnPropSymbols$t(b)) {\r\n      if (__propIsEnum$t.call(b, prop))\r\n        __defNormalProp$q(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$d = (a, b) => __defProps$d(a, __getOwnPropDescs$d(b));\r\nfunction createReusableTemplate() {\r\n  if (!isVue3 && !version.startsWith(\"2.7.\")) {\r\n    if (process.env.NODE_ENV !== \"production\")\r\n      throw new Error(\"[VueUse] createReusableTemplate only works in Vue 2.7 or above.\");\r\n    return;\r\n  }\r\n  const render = shallowRef();\r\n  const define = /* #__PURE__ */ defineComponent({\r\n    setup(_, { slots }) {\r\n      return () => {\r\n        render.value = slots.default;\r\n      };\r\n    }\r\n  });\r\n  const reuse = /* #__PURE__ */ defineComponent({\r\n    inheritAttrs: false,\r\n    setup(_, { attrs, slots }) {\r\n      return () => {\r\n        var _a;\r\n        if (!render.value && process.env.NODE_ENV !== \"production\")\r\n          throw new Error(\"[VueUse] Failed to find the definition of reusable template\");\r\n        return (_a = render.value) == null ? void 0 : _a.call(render, __spreadProps$d(__spreadValues$q({}, attrs), { $slots: slots }));\r\n      };\r\n    }\r\n  });\r\n  return makeDestructurable(\r\n    { define, reuse },\r\n    [define, reuse]\r\n  );\r\n}\r\n\r\nfunction createTemplatePromise(options = {}) {\r\n  if (!isVue3) {\r\n    if (process.env.NODE_ENV !== \"production\")\r\n      throw new Error(\"[VueUse] createTemplatePromise only works in Vue 3 or above.\");\r\n    return;\r\n  }\r\n  let index = 0;\r\n  const instances = ref([]);\r\n  function create(...args) {\r\n    const props = shallowReactive({\r\n      key: index++,\r\n      args,\r\n      promise: void 0,\r\n      resolve: () => {\r\n      },\r\n      reject: () => {\r\n      },\r\n      isResolving: false,\r\n      options\r\n    });\r\n    instances.value.push(props);\r\n    props.promise = new Promise((_resolve, _reject) => {\r\n      props.resolve = (v) => {\r\n        props.isResolving = true;\r\n        return _resolve(v);\r\n      };\r\n      props.reject = _reject;\r\n    }).finally(() => {\r\n      props.promise = void 0;\r\n      const index2 = instances.value.indexOf(props);\r\n      if (index2 !== -1)\r\n        instances.value.splice(index2, 1);\r\n    });\r\n    return props.promise;\r\n  }\r\n  function start(...args) {\r\n    if (options.singleton && instances.value.length > 0)\r\n      return instances.value[0].promise;\r\n    return create(...args);\r\n  }\r\n  const component = /* #__PURE__ */ defineComponent((_, { slots }) => {\r\n    const renderList = () => instances.value.map((props) => {\r\n      var _a;\r\n      return h(Fragment, { key: props.key }, (_a = slots.default) == null ? void 0 : _a.call(slots, props));\r\n    });\r\n    if (options.transition)\r\n      return () => h(TransitionGroup, options.transition, renderList);\r\n    return renderList;\r\n  });\r\n  component.start = start;\r\n  return component;\r\n}\r\n\r\nfunction createUnrefFn(fn) {\r\n  return function(...args) {\r\n    return fn.apply(this, args.map((i) => toValue(i)));\r\n  };\r\n}\r\n\r\nfunction unrefElement(elRef) {\r\n  var _a;\r\n  const plain = toValue(elRef);\r\n  return (_a = plain == null ? void 0 : plain.$el) != null ? _a : plain;\r\n}\r\n\r\nconst defaultWindow = isClient ? window : void 0;\r\nconst defaultDocument = isClient ? window.document : void 0;\r\nconst defaultNavigator = isClient ? window.navigator : void 0;\r\nconst defaultLocation = isClient ? window.location : void 0;\r\n\r\nfunction useEventListener(...args) {\r\n  let target;\r\n  let events;\r\n  let listeners;\r\n  let options;\r\n  if (typeof args[0] === \"string\" || Array.isArray(args[0])) {\r\n    [events, listeners, options] = args;\r\n    target = defaultWindow;\r\n  } else {\r\n    [target, events, listeners, options] = args;\r\n  }\r\n  if (!target)\r\n    return noop;\r\n  if (!Array.isArray(events))\r\n    events = [events];\r\n  if (!Array.isArray(listeners))\r\n    listeners = [listeners];\r\n  const cleanups = [];\r\n  const cleanup = () => {\r\n    cleanups.forEach((fn) => fn());\r\n    cleanups.length = 0;\r\n  };\r\n  const register = (el, event, listener, options2) => {\r\n    el.addEventListener(event, listener, options2);\r\n    return () => el.removeEventListener(event, listener, options2);\r\n  };\r\n  const stopWatch = watch(\r\n    () => [unrefElement(target), toValue(options)],\r\n    ([el, options2]) => {\r\n      cleanup();\r\n      if (!el)\r\n        return;\r\n      cleanups.push(\r\n        ...events.flatMap((event) => {\r\n          return listeners.map((listener) => register(el, event, listener, options2));\r\n        })\r\n      );\r\n    },\r\n    { immediate: true, flush: \"post\" }\r\n  );\r\n  const stop = () => {\r\n    stopWatch();\r\n    cleanup();\r\n  };\r\n  tryOnScopeDispose(stop);\r\n  return stop;\r\n}\r\n\r\nlet _iOSWorkaround = false;\r\nfunction onClickOutside(target, handler, options = {}) {\r\n  const { window = defaultWindow, ignore = [], capture = true, detectIframe = false } = options;\r\n  if (!window)\r\n    return;\r\n  if (isIOS && !_iOSWorkaround) {\r\n    _iOSWorkaround = true;\r\n    Array.from(window.document.body.children).forEach((el) => el.addEventListener(\"click\", noop));\r\n  }\r\n  let shouldListen = true;\r\n  const shouldIgnore = (event) => {\r\n    return ignore.some((target2) => {\r\n      if (typeof target2 === \"string\") {\r\n        return Array.from(window.document.querySelectorAll(target2)).some((el) => el === event.target || event.composedPath().includes(el));\r\n      } else {\r\n        const el = unrefElement(target2);\r\n        return el && (event.target === el || event.composedPath().includes(el));\r\n      }\r\n    });\r\n  };\r\n  const listener = (event) => {\r\n    const el = unrefElement(target);\r\n    if (!el || el === event.target || event.composedPath().includes(el))\r\n      return;\r\n    if (event.detail === 0)\r\n      shouldListen = !shouldIgnore(event);\r\n    if (!shouldListen) {\r\n      shouldListen = true;\r\n      return;\r\n    }\r\n    handler(event);\r\n  };\r\n  const cleanup = [\r\n    useEventListener(window, \"click\", listener, { passive: true, capture }),\r\n    useEventListener(window, \"pointerdown\", (e) => {\r\n      const el = unrefElement(target);\r\n      if (el)\r\n        shouldListen = !e.composedPath().includes(el) && !shouldIgnore(e);\r\n    }, { passive: true }),\r\n    detectIframe && useEventListener(window, \"blur\", (event) => {\r\n      setTimeout(() => {\r\n        var _a;\r\n        const el = unrefElement(target);\r\n        if (((_a = window.document.activeElement) == null ? void 0 : _a.tagName) === \"IFRAME\" && !(el == null ? void 0 : el.contains(window.document.activeElement)))\r\n          handler(event);\r\n      }, 0);\r\n    })\r\n  ].filter(Boolean);\r\n  const stop = () => cleanup.forEach((fn) => fn());\r\n  return stop;\r\n}\r\n\r\nvar __defProp$p = Object.defineProperty;\r\nvar __defProps$c = Object.defineProperties;\r\nvar __getOwnPropDescs$c = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$s = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$s = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$s = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$p = (obj, key, value) => key in obj ? __defProp$p(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$p = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$s.call(b, prop))\r\n      __defNormalProp$p(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$s)\r\n    for (var prop of __getOwnPropSymbols$s(b)) {\r\n      if (__propIsEnum$s.call(b, prop))\r\n        __defNormalProp$p(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$c = (a, b) => __defProps$c(a, __getOwnPropDescs$c(b));\r\nfunction createKeyPredicate(keyFilter) {\r\n  if (typeof keyFilter === \"function\")\r\n    return keyFilter;\r\n  else if (typeof keyFilter === \"string\")\r\n    return (event) => event.key === keyFilter;\r\n  else if (Array.isArray(keyFilter))\r\n    return (event) => keyFilter.includes(event.key);\r\n  return () => true;\r\n}\r\nfunction onKeyStroke(...args) {\r\n  let key;\r\n  let handler;\r\n  let options = {};\r\n  if (args.length === 3) {\r\n    key = args[0];\r\n    handler = args[1];\r\n    options = args[2];\r\n  } else if (args.length === 2) {\r\n    if (typeof args[1] === \"object\") {\r\n      key = true;\r\n      handler = args[0];\r\n      options = args[1];\r\n    } else {\r\n      key = args[0];\r\n      handler = args[1];\r\n    }\r\n  } else {\r\n    key = true;\r\n    handler = args[0];\r\n  }\r\n  const {\r\n    target = defaultWindow,\r\n    eventName = \"keydown\",\r\n    passive = false,\r\n    dedupe = false\r\n  } = options;\r\n  const predicate = createKeyPredicate(key);\r\n  const listener = (e) => {\r\n    if (e.repeat && toValue(dedupe))\r\n      return;\r\n    if (predicate(e))\r\n      handler(e);\r\n  };\r\n  return useEventListener(target, eventName, listener, passive);\r\n}\r\nfunction onKeyDown(key, handler, options = {}) {\r\n  return onKeyStroke(key, handler, __spreadProps$c(__spreadValues$p({}, options), { eventName: \"keydown\" }));\r\n}\r\nfunction onKeyPressed(key, handler, options = {}) {\r\n  return onKeyStroke(key, handler, __spreadProps$c(__spreadValues$p({}, options), { eventName: \"keypress\" }));\r\n}\r\nfunction onKeyUp(key, handler, options = {}) {\r\n  return onKeyStroke(key, handler, __spreadProps$c(__spreadValues$p({}, options), { eventName: \"keyup\" }));\r\n}\r\n\r\nconst DEFAULT_DELAY = 500;\r\nfunction onLongPress(target, handler, options) {\r\n  var _a, _b;\r\n  const elementRef = computed(() => unrefElement(target));\r\n  let timeout;\r\n  function clear() {\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n      timeout = void 0;\r\n    }\r\n  }\r\n  function onDown(ev) {\r\n    var _a2, _b2, _c, _d;\r\n    if (((_a2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _a2.self) && ev.target !== elementRef.value)\r\n      return;\r\n    clear();\r\n    if ((_b2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _b2.prevent)\r\n      ev.preventDefault();\r\n    if ((_c = options == null ? void 0 : options.modifiers) == null ? void 0 : _c.stop)\r\n      ev.stopPropagation();\r\n    timeout = setTimeout(\r\n      () => handler(ev),\r\n      (_d = options == null ? void 0 : options.delay) != null ? _d : DEFAULT_DELAY\r\n    );\r\n  }\r\n  const listenerOptions = {\r\n    capture: (_a = options == null ? void 0 : options.modifiers) == null ? void 0 : _a.capture,\r\n    once: (_b = options == null ? void 0 : options.modifiers) == null ? void 0 : _b.once\r\n  };\r\n  useEventListener(elementRef, \"pointerdown\", onDown, listenerOptions);\r\n  useEventListener(elementRef, \"pointerup\", clear, listenerOptions);\r\n  useEventListener(elementRef, \"pointerleave\", clear, listenerOptions);\r\n}\r\n\r\nfunction isFocusedElementEditable() {\r\n  const { activeElement, body } = document;\r\n  if (!activeElement)\r\n    return false;\r\n  if (activeElement === body)\r\n    return false;\r\n  switch (activeElement.tagName) {\r\n    case \"INPUT\":\r\n    case \"TEXTAREA\":\r\n      return true;\r\n  }\r\n  return activeElement.hasAttribute(\"contenteditable\");\r\n}\r\nfunction isTypedCharValid({\r\n  keyCode,\r\n  metaKey,\r\n  ctrlKey,\r\n  altKey\r\n}) {\r\n  if (metaKey || ctrlKey || altKey)\r\n    return false;\r\n  if (keyCode >= 48 && keyCode <= 57)\r\n    return true;\r\n  if (keyCode >= 65 && keyCode <= 90)\r\n    return true;\r\n  if (keyCode >= 97 && keyCode <= 122)\r\n    return true;\r\n  return false;\r\n}\r\nfunction onStartTyping(callback, options = {}) {\r\n  const { document: document2 = defaultDocument } = options;\r\n  const keydown = (event) => {\r\n    !isFocusedElementEditable() && isTypedCharValid(event) && callback(event);\r\n  };\r\n  if (document2)\r\n    useEventListener(document2, \"keydown\", keydown, { passive: true });\r\n}\r\n\r\nfunction templateRef(key, initialValue = null) {\r\n  const instance = getCurrentInstance();\r\n  let _trigger = () => {\r\n  };\r\n  const element = customRef((track, trigger) => {\r\n    _trigger = trigger;\r\n    return {\r\n      get() {\r\n        var _a, _b;\r\n        track();\r\n        return (_b = (_a = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.$refs[key]) != null ? _b : initialValue;\r\n      },\r\n      set() {\r\n      }\r\n    };\r\n  });\r\n  tryOnMounted(_trigger);\r\n  onUpdated(_trigger);\r\n  return element;\r\n}\r\n\r\nfunction useActiveElement(options = {}) {\r\n  var _a;\r\n  const { window = defaultWindow } = options;\r\n  const document = (_a = options.document) != null ? _a : window == null ? void 0 : window.document;\r\n  const activeElement = computedWithControl(\r\n    () => null,\r\n    () => document == null ? void 0 : document.activeElement\r\n  );\r\n  if (window) {\r\n    useEventListener(window, \"blur\", (event) => {\r\n      if (event.relatedTarget !== null)\r\n        return;\r\n      activeElement.trigger();\r\n    }, true);\r\n    useEventListener(window, \"focus\", activeElement.trigger, true);\r\n  }\r\n  return activeElement;\r\n}\r\n\r\nfunction useMounted() {\r\n  const isMounted = ref(false);\r\n  if (getCurrentInstance()) {\r\n    onMounted(() => {\r\n      isMounted.value = true;\r\n    });\r\n  }\r\n  return isMounted;\r\n}\r\n\r\nfunction useSupported(callback) {\r\n  const isMounted = useMounted();\r\n  return computed(() => {\r\n    isMounted.value;\r\n    return Boolean(callback());\r\n  });\r\n}\r\n\r\nfunction useRafFn(fn, options = {}) {\r\n  const {\r\n    immediate = true,\r\n    window = defaultWindow\r\n  } = options;\r\n  const isActive = ref(false);\r\n  let previousFrameTimestamp = 0;\r\n  let rafId = null;\r\n  function loop(timestamp) {\r\n    if (!isActive.value || !window)\r\n      return;\r\n    const delta = timestamp - (previousFrameTimestamp || timestamp);\r\n    fn({ delta, timestamp });\r\n    previousFrameTimestamp = timestamp;\r\n    rafId = window.requestAnimationFrame(loop);\r\n  }\r\n  function resume() {\r\n    if (!isActive.value && window) {\r\n      isActive.value = true;\r\n      rafId = window.requestAnimationFrame(loop);\r\n    }\r\n  }\r\n  function pause() {\r\n    isActive.value = false;\r\n    if (rafId != null && window) {\r\n      window.cancelAnimationFrame(rafId);\r\n      rafId = null;\r\n    }\r\n  }\r\n  if (immediate)\r\n    resume();\r\n  tryOnScopeDispose(pause);\r\n  return {\r\n    isActive: readonly(isActive),\r\n    pause,\r\n    resume\r\n  };\r\n}\r\n\r\nfunction useAnimate(target, keyframes, options) {\r\n  let config;\r\n  let animateOptions;\r\n  if (isObject(options)) {\r\n    config = options;\r\n    animateOptions = objectOmit(options, [\"window\", \"immediate\", \"commitStyles\", \"persist\", \"onReady\", \"onError\"]);\r\n  } else {\r\n    config = { duration: options };\r\n    animateOptions = options;\r\n  }\r\n  const {\r\n    window = defaultWindow,\r\n    immediate = true,\r\n    commitStyles,\r\n    persist,\r\n    playbackRate: _playbackRate = 1,\r\n    onReady,\r\n    onError = (e) => {\r\n      console.error(e);\r\n    }\r\n  } = config;\r\n  const isSupported = useSupported(() => window && HTMLElement && \"animate\" in HTMLElement.prototype);\r\n  const animate = shallowRef(void 0);\r\n  const store = shallowReactive({\r\n    startTime: null,\r\n    currentTime: null,\r\n    timeline: null,\r\n    playbackRate: _playbackRate,\r\n    pending: false,\r\n    playState: immediate ? \"idle\" : \"paused\",\r\n    replaceState: \"active\"\r\n  });\r\n  const pending = computed(() => store.pending);\r\n  const playState = computed(() => store.playState);\r\n  const replaceState = computed(() => store.replaceState);\r\n  const startTime = computed({\r\n    get() {\r\n      return store.startTime;\r\n    },\r\n    set(value) {\r\n      store.startTime = value;\r\n      if (animate.value)\r\n        animate.value.startTime = value;\r\n    }\r\n  });\r\n  const currentTime = computed({\r\n    get() {\r\n      return store.currentTime;\r\n    },\r\n    set(value) {\r\n      store.currentTime = value;\r\n      if (animate.value) {\r\n        animate.value.currentTime = value;\r\n        syncResume();\r\n      }\r\n    }\r\n  });\r\n  const timeline = computed({\r\n    get() {\r\n      return store.timeline;\r\n    },\r\n    set(value) {\r\n      store.timeline = value;\r\n      if (animate.value)\r\n        animate.value.timeline = value;\r\n    }\r\n  });\r\n  const playbackRate = computed({\r\n    get() {\r\n      return store.playbackRate;\r\n    },\r\n    set(value) {\r\n      store.playbackRate = value;\r\n      if (animate.value)\r\n        animate.value.playbackRate = value;\r\n    }\r\n  });\r\n  const play = () => {\r\n    if (animate.value) {\r\n      try {\r\n        animate.value.play();\r\n        syncResume();\r\n      } catch (e) {\r\n        syncPause();\r\n        onError(e);\r\n      }\r\n    } else {\r\n      update();\r\n    }\r\n  };\r\n  const pause = () => {\r\n    var _a;\r\n    try {\r\n      (_a = animate.value) == null ? void 0 : _a.pause();\r\n      syncPause();\r\n    } catch (e) {\r\n      onError(e);\r\n    }\r\n  };\r\n  const reverse = () => {\r\n    var _a;\r\n    !animate.value && update();\r\n    try {\r\n      (_a = animate.value) == null ? void 0 : _a.reverse();\r\n      syncResume();\r\n    } catch (e) {\r\n      syncPause();\r\n      onError(e);\r\n    }\r\n  };\r\n  const finish = () => {\r\n    var _a;\r\n    try {\r\n      (_a = animate.value) == null ? void 0 : _a.finish();\r\n      syncPause();\r\n    } catch (e) {\r\n      onError(e);\r\n    }\r\n  };\r\n  const cancel = () => {\r\n    var _a;\r\n    try {\r\n      (_a = animate.value) == null ? void 0 : _a.cancel();\r\n      syncPause();\r\n    } catch (e) {\r\n      onError(e);\r\n    }\r\n  };\r\n  watch(() => unrefElement(target), (el) => {\r\n    el && update();\r\n  });\r\n  watch(() => keyframes, (value) => {\r\n    !animate.value && update();\r\n    if (!unrefElement(target) && animate.value) {\r\n      animate.value.effect = new KeyframeEffect(\r\n        unrefElement(target),\r\n        toValue(value),\r\n        animateOptions\r\n      );\r\n    }\r\n  }, { deep: true });\r\n  tryOnMounted(() => {\r\n    nextTick(() => update(true));\r\n  });\r\n  tryOnScopeDispose(cancel);\r\n  function update(init) {\r\n    const el = unrefElement(target);\r\n    if (!isSupported.value || !el)\r\n      return;\r\n    animate.value = el.animate(toValue(keyframes), animateOptions);\r\n    if (commitStyles)\r\n      animate.value.commitStyles();\r\n    if (persist)\r\n      animate.value.persist();\r\n    if (_playbackRate !== 1)\r\n      animate.value.playbackRate = _playbackRate;\r\n    if (init && !immediate)\r\n      animate.value.pause();\r\n    else\r\n      syncResume();\r\n    onReady == null ? void 0 : onReady(animate.value);\r\n  }\r\n  useEventListener(animate, \"cancel\", syncPause);\r\n  useEventListener(animate, \"finish\", syncPause);\r\n  useEventListener(animate, \"remove\", syncPause);\r\n  const { resume: resumeRef, pause: pauseRef } = useRafFn(() => {\r\n    if (!animate.value)\r\n      return;\r\n    store.pending = animate.value.pending;\r\n    store.playState = animate.value.playState;\r\n    store.replaceState = animate.value.replaceState;\r\n    store.startTime = animate.value.startTime;\r\n    store.currentTime = animate.value.currentTime;\r\n    store.timeline = animate.value.timeline;\r\n    store.playbackRate = animate.value.playbackRate;\r\n  }, { immediate: false });\r\n  function syncResume() {\r\n    if (isSupported.value)\r\n      resumeRef();\r\n  }\r\n  function syncPause() {\r\n    if (isSupported.value && window)\r\n      window.requestAnimationFrame(pauseRef);\r\n  }\r\n  return {\r\n    isSupported,\r\n    animate,\r\n    // actions\r\n    play,\r\n    pause,\r\n    reverse,\r\n    finish,\r\n    cancel,\r\n    // state\r\n    pending,\r\n    playState,\r\n    replaceState,\r\n    startTime,\r\n    currentTime,\r\n    timeline,\r\n    playbackRate\r\n  };\r\n}\r\n\r\nfunction useAsyncQueue(tasks, options = {}) {\r\n  const {\r\n    interrupt = true,\r\n    onError = noop,\r\n    onFinished = noop,\r\n    signal\r\n  } = options;\r\n  const promiseState = {\r\n    aborted: \"aborted\",\r\n    fulfilled: \"fulfilled\",\r\n    pending: \"pending\",\r\n    rejected: \"rejected\"\r\n  };\r\n  const initialResult = Array.from(new Array(tasks.length), () => ({ state: promiseState.pending, data: null }));\r\n  const result = reactive(initialResult);\r\n  const activeIndex = ref(-1);\r\n  if (!tasks || tasks.length === 0) {\r\n    onFinished();\r\n    return {\r\n      activeIndex,\r\n      result\r\n    };\r\n  }\r\n  function updateResult(state, res) {\r\n    activeIndex.value++;\r\n    result[activeIndex.value].data = res;\r\n    result[activeIndex.value].state = state;\r\n  }\r\n  tasks.reduce((prev, curr) => {\r\n    return prev.then((prevRes) => {\r\n      var _a;\r\n      if (signal == null ? void 0 : signal.aborted) {\r\n        updateResult(promiseState.aborted, new Error(\"aborted\"));\r\n        return;\r\n      }\r\n      if (((_a = result[activeIndex.value]) == null ? void 0 : _a.state) === promiseState.rejected && interrupt) {\r\n        onFinished();\r\n        return;\r\n      }\r\n      const done = curr(prevRes).then((currentRes) => {\r\n        updateResult(promiseState.fulfilled, currentRes);\r\n        activeIndex.value === tasks.length - 1 && onFinished();\r\n        return currentRes;\r\n      });\r\n      if (!signal)\r\n        return done;\r\n      return Promise.race([done, whenAborted(signal)]);\r\n    }).catch((e) => {\r\n      if (signal == null ? void 0 : signal.aborted) {\r\n        updateResult(promiseState.aborted, e);\r\n        return e;\r\n      }\r\n      updateResult(promiseState.rejected, e);\r\n      onError();\r\n      return e;\r\n    });\r\n  }, Promise.resolve());\r\n  return {\r\n    activeIndex,\r\n    result\r\n  };\r\n}\r\nfunction whenAborted(signal) {\r\n  return new Promise((resolve, reject) => {\r\n    const error = new Error(\"aborted\");\r\n    if (signal.aborted)\r\n      reject(error);\r\n    else\r\n      signal.addEventListener(\"abort\", () => reject(error), { once: true });\r\n  });\r\n}\r\n\r\nvar __defProp$o = Object.defineProperty;\r\nvar __defProps$b = Object.defineProperties;\r\nvar __getOwnPropDescs$b = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$r = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$r = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$r = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$o = (obj, key, value) => key in obj ? __defProp$o(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$o = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$r.call(b, prop))\r\n      __defNormalProp$o(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$r)\r\n    for (var prop of __getOwnPropSymbols$r(b)) {\r\n      if (__propIsEnum$r.call(b, prop))\r\n        __defNormalProp$o(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$b = (a, b) => __defProps$b(a, __getOwnPropDescs$b(b));\r\nfunction useAsyncState(promise, initialState, options) {\r\n  const {\r\n    immediate = true,\r\n    delay = 0,\r\n    onError = noop,\r\n    onSuccess = noop,\r\n    resetOnExecute = true,\r\n    shallow = true,\r\n    throwError\r\n  } = options != null ? options : {};\r\n  const state = shallow ? shallowRef(initialState) : ref(initialState);\r\n  const isReady = ref(false);\r\n  const isLoading = ref(false);\r\n  const error = shallowRef(void 0);\r\n  async function execute(delay2 = 0, ...args) {\r\n    if (resetOnExecute)\r\n      state.value = initialState;\r\n    error.value = void 0;\r\n    isReady.value = false;\r\n    isLoading.value = true;\r\n    if (delay2 > 0)\r\n      await promiseTimeout(delay2);\r\n    const _promise = typeof promise === \"function\" ? promise(...args) : promise;\r\n    try {\r\n      const data = await _promise;\r\n      state.value = data;\r\n      isReady.value = true;\r\n      onSuccess(data);\r\n    } catch (e) {\r\n      error.value = e;\r\n      onError(e);\r\n      if (throwError)\r\n        throw e;\r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n    return state.value;\r\n  }\r\n  if (immediate)\r\n    execute(delay);\r\n  const shell = {\r\n    state,\r\n    isReady,\r\n    isLoading,\r\n    error,\r\n    execute\r\n  };\r\n  function waitUntilIsLoaded() {\r\n    return new Promise((resolve, reject) => {\r\n      until(isLoading).toBe(false).then(() => resolve(shell)).catch(reject);\r\n    });\r\n  }\r\n  return __spreadProps$b(__spreadValues$o({}, shell), {\r\n    then(onFulfilled, onRejected) {\r\n      return waitUntilIsLoaded().then(onFulfilled, onRejected);\r\n    }\r\n  });\r\n}\r\n\r\nconst defaults = {\r\n  array: (v) => JSON.stringify(v),\r\n  object: (v) => JSON.stringify(v),\r\n  set: (v) => JSON.stringify(Array.from(v)),\r\n  map: (v) => JSON.stringify(Object.fromEntries(v)),\r\n  null: () => \"\"\r\n};\r\nfunction getDefaultSerialization(target) {\r\n  if (!target)\r\n    return defaults.null;\r\n  if (target instanceof Map)\r\n    return defaults.map;\r\n  else if (target instanceof Set)\r\n    return defaults.set;\r\n  else if (Array.isArray(target))\r\n    return defaults.array;\r\n  else\r\n    return defaults.object;\r\n}\r\n\r\nfunction useBase64(target, options) {\r\n  const base64 = ref(\"\");\r\n  const promise = ref();\r\n  function execute() {\r\n    if (!isClient)\r\n      return;\r\n    promise.value = new Promise((resolve, reject) => {\r\n      try {\r\n        const _target = toValue(target);\r\n        if (_target == null) {\r\n          resolve(\"\");\r\n        } else if (typeof _target === \"string\") {\r\n          resolve(blobToBase64(new Blob([_target], { type: \"text/plain\" })));\r\n        } else if (_target instanceof Blob) {\r\n          resolve(blobToBase64(_target));\r\n        } else if (_target instanceof ArrayBuffer) {\r\n          resolve(window.btoa(String.fromCharCode(...new Uint8Array(_target))));\r\n        } else if (_target instanceof HTMLCanvasElement) {\r\n          resolve(_target.toDataURL(options == null ? void 0 : options.type, options == null ? void 0 : options.quality));\r\n        } else if (_target instanceof HTMLImageElement) {\r\n          const img = _target.cloneNode(false);\r\n          img.crossOrigin = \"Anonymous\";\r\n          imgLoaded(img).then(() => {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n            resolve(canvas.toDataURL(options == null ? void 0 : options.type, options == null ? void 0 : options.quality));\r\n          }).catch(reject);\r\n        } else if (typeof _target === \"object\") {\r\n          const _serializeFn = (options == null ? void 0 : options.serializer) || getDefaultSerialization(_target);\r\n          const serialized = _serializeFn(_target);\r\n          return resolve(blobToBase64(new Blob([serialized], { type: \"application/json\" })));\r\n        } else {\r\n          reject(new Error(\"target is unsupported types\"));\r\n        }\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n    promise.value.then((res) => base64.value = res);\r\n    return promise.value;\r\n  }\r\n  if (isRef(target) || typeof target === \"function\")\r\n    watch(target, execute, { immediate: true });\r\n  else\r\n    execute();\r\n  return {\r\n    base64,\r\n    promise,\r\n    execute\r\n  };\r\n}\r\nfunction imgLoaded(img) {\r\n  return new Promise((resolve, reject) => {\r\n    if (!img.complete) {\r\n      img.onload = () => {\r\n        resolve();\r\n      };\r\n      img.onerror = reject;\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\nfunction blobToBase64(blob) {\r\n  return new Promise((resolve, reject) => {\r\n    const fr = new FileReader();\r\n    fr.onload = (e) => {\r\n      resolve(e.target.result);\r\n    };\r\n    fr.onerror = reject;\r\n    fr.readAsDataURL(blob);\r\n  });\r\n}\r\n\r\nfunction useBattery({ navigator = defaultNavigator } = {}) {\r\n  const events = [\"chargingchange\", \"chargingtimechange\", \"dischargingtimechange\", \"levelchange\"];\r\n  const isSupported = useSupported(() => navigator && \"getBattery\" in navigator);\r\n  const charging = ref(false);\r\n  const chargingTime = ref(0);\r\n  const dischargingTime = ref(0);\r\n  const level = ref(1);\r\n  let battery;\r\n  function updateBatteryInfo() {\r\n    charging.value = this.charging;\r\n    chargingTime.value = this.chargingTime || 0;\r\n    dischargingTime.value = this.dischargingTime || 0;\r\n    level.value = this.level;\r\n  }\r\n  if (isSupported.value) {\r\n    navigator.getBattery().then((_battery) => {\r\n      battery = _battery;\r\n      updateBatteryInfo.call(battery);\r\n      for (const event of events)\r\n        useEventListener(battery, event, updateBatteryInfo, { passive: true });\r\n    });\r\n  }\r\n  return {\r\n    isSupported,\r\n    charging,\r\n    chargingTime,\r\n    dischargingTime,\r\n    level\r\n  };\r\n}\r\n\r\nfunction useBluetooth(options) {\r\n  let {\r\n    acceptAllDevices = false\r\n  } = options || {};\r\n  const {\r\n    filters = void 0,\r\n    optionalServices = void 0,\r\n    navigator = defaultNavigator\r\n  } = options || {};\r\n  const isSupported = useSupported(() => navigator && \"bluetooth\" in navigator);\r\n  const device = shallowRef(void 0);\r\n  const error = shallowRef(null);\r\n  watch(device, () => {\r\n    connectToBluetoothGATTServer();\r\n  });\r\n  async function requestDevice() {\r\n    if (!isSupported.value)\r\n      return;\r\n    error.value = null;\r\n    if (filters && filters.length > 0)\r\n      acceptAllDevices = false;\r\n    try {\r\n      device.value = await (navigator == null ? void 0 : navigator.bluetooth.requestDevice({\r\n        acceptAllDevices,\r\n        filters,\r\n        optionalServices\r\n      }));\r\n    } catch (err) {\r\n      error.value = err;\r\n    }\r\n  }\r\n  const server = ref();\r\n  const isConnected = computed(() => {\r\n    var _a;\r\n    return ((_a = server.value) == null ? void 0 : _a.connected) || false;\r\n  });\r\n  async function connectToBluetoothGATTServer() {\r\n    error.value = null;\r\n    if (device.value && device.value.gatt) {\r\n      device.value.addEventListener(\"gattserverdisconnected\", () => {\r\n      });\r\n      try {\r\n        server.value = await device.value.gatt.connect();\r\n      } catch (err) {\r\n        error.value = err;\r\n      }\r\n    }\r\n  }\r\n  tryOnMounted(() => {\r\n    var _a;\r\n    if (device.value)\r\n      (_a = device.value.gatt) == null ? void 0 : _a.connect();\r\n  });\r\n  tryOnScopeDispose(() => {\r\n    var _a;\r\n    if (device.value)\r\n      (_a = device.value.gatt) == null ? void 0 : _a.disconnect();\r\n  });\r\n  return {\r\n    isSupported,\r\n    isConnected,\r\n    // Device:\r\n    device,\r\n    requestDevice,\r\n    // Server:\r\n    server,\r\n    // Errors:\r\n    error\r\n  };\r\n}\r\n\r\nfunction useMediaQuery(query, options = {}) {\r\n  const { window = defaultWindow } = options;\r\n  const isSupported = useSupported(() => window && \"matchMedia\" in window && typeof window.matchMedia === \"function\");\r\n  let mediaQuery;\r\n  const matches = ref(false);\r\n  const cleanup = () => {\r\n    if (!mediaQuery)\r\n      return;\r\n    if (\"removeEventListener\" in mediaQuery)\r\n      mediaQuery.removeEventListener(\"change\", update);\r\n    else\r\n      mediaQuery.removeListener(update);\r\n  };\r\n  const update = () => {\r\n    if (!isSupported.value)\r\n      return;\r\n    cleanup();\r\n    mediaQuery = window.matchMedia(toRef(query).value);\r\n    matches.value = !!(mediaQuery == null ? void 0 : mediaQuery.matches);\r\n    if (!mediaQuery)\r\n      return;\r\n    if (\"addEventListener\" in mediaQuery)\r\n      mediaQuery.addEventListener(\"change\", update);\r\n    else\r\n      mediaQuery.addListener(update);\r\n  };\r\n  watchEffect(update);\r\n  tryOnScopeDispose(() => cleanup());\r\n  return matches;\r\n}\r\n\r\nconst breakpointsTailwind = {\r\n  \"sm\": 640,\r\n  \"md\": 768,\r\n  \"lg\": 1024,\r\n  \"xl\": 1280,\r\n  \"2xl\": 1536\r\n};\r\nconst breakpointsBootstrapV5 = {\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1400\r\n};\r\nconst breakpointsVuetify = {\r\n  xs: 600,\r\n  sm: 960,\r\n  md: 1264,\r\n  lg: 1904\r\n};\r\nconst breakpointsAntDesign = {\r\n  xs: 480,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1600\r\n};\r\nconst breakpointsQuasar = {\r\n  xs: 600,\r\n  sm: 1024,\r\n  md: 1440,\r\n  lg: 1920\r\n};\r\nconst breakpointsSematic = {\r\n  mobileS: 320,\r\n  mobileM: 375,\r\n  mobileL: 425,\r\n  tablet: 768,\r\n  laptop: 1024,\r\n  laptopL: 1440,\r\n  desktop4K: 2560\r\n};\r\nconst breakpointsMasterCss = {\r\n  \"3xs\": 360,\r\n  \"2xs\": 480,\r\n  \"xs\": 600,\r\n  \"sm\": 768,\r\n  \"md\": 1024,\r\n  \"lg\": 1280,\r\n  \"xl\": 1440,\r\n  \"2xl\": 1600,\r\n  \"3xl\": 1920,\r\n  \"4xl\": 2560\r\n};\r\n\r\nfunction useBreakpoints(breakpoints, options = {}) {\r\n  function getValue(k, delta) {\r\n    let v = breakpoints[k];\r\n    if (delta != null)\r\n      v = increaseWithUnit(v, delta);\r\n    if (typeof v === \"number\")\r\n      v = `${v}px`;\r\n    return v;\r\n  }\r\n  const { window = defaultWindow } = options;\r\n  function match(query) {\r\n    if (!window)\r\n      return false;\r\n    return window.matchMedia(query).matches;\r\n  }\r\n  const greaterOrEqual = (k) => {\r\n    return useMediaQuery(`(min-width: ${getValue(k)})`, options);\r\n  };\r\n  const shortcutMethods = Object.keys(breakpoints).reduce((shortcuts, k) => {\r\n    Object.defineProperty(shortcuts, k, {\r\n      get: () => greaterOrEqual(k),\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n    return shortcuts;\r\n  }, {});\r\n  return Object.assign(shortcutMethods, {\r\n    greater(k) {\r\n      return useMediaQuery(`(min-width: ${getValue(k, 0.1)})`, options);\r\n    },\r\n    greaterOrEqual,\r\n    smaller(k) {\r\n      return useMediaQuery(`(max-width: ${getValue(k, -0.1)})`, options);\r\n    },\r\n    smallerOrEqual(k) {\r\n      return useMediaQuery(`(max-width: ${getValue(k)})`, options);\r\n    },\r\n    between(a, b) {\r\n      return useMediaQuery(`(min-width: ${getValue(a)}) and (max-width: ${getValue(b, -0.1)})`, options);\r\n    },\r\n    isGreater(k) {\r\n      return match(`(min-width: ${getValue(k, 0.1)})`);\r\n    },\r\n    isGreaterOrEqual(k) {\r\n      return match(`(min-width: ${getValue(k)})`);\r\n    },\r\n    isSmaller(k) {\r\n      return match(`(max-width: ${getValue(k, -0.1)})`);\r\n    },\r\n    isSmallerOrEqual(k) {\r\n      return match(`(max-width: ${getValue(k)})`);\r\n    },\r\n    isInBetween(a, b) {\r\n      return match(`(min-width: ${getValue(a)}) and (max-width: ${getValue(b, -0.1)})`);\r\n    },\r\n    current() {\r\n      const points = Object.keys(breakpoints).map((i) => [i, greaterOrEqual(i)]);\r\n      return computed(() => points.filter(([, v]) => v.value).map(([k]) => k));\r\n    }\r\n  });\r\n}\r\n\r\nfunction useBroadcastChannel(options) {\r\n  const {\r\n    name,\r\n    window = defaultWindow\r\n  } = options;\r\n  const isSupported = useSupported(() => window && \"BroadcastChannel\" in window);\r\n  const isClosed = ref(false);\r\n  const channel = ref();\r\n  const data = ref();\r\n  const error = shallowRef(null);\r\n  const post = (data2) => {\r\n    if (channel.value)\r\n      channel.value.postMessage(data2);\r\n  };\r\n  const close = () => {\r\n    if (channel.value)\r\n      channel.value.close();\r\n    isClosed.value = true;\r\n  };\r\n  if (isSupported.value) {\r\n    tryOnMounted(() => {\r\n      error.value = null;\r\n      channel.value = new BroadcastChannel(name);\r\n      channel.value.addEventListener(\"message\", (e) => {\r\n        data.value = e.data;\r\n      }, { passive: true });\r\n      channel.value.addEventListener(\"messageerror\", (e) => {\r\n        error.value = e;\r\n      }, { passive: true });\r\n      channel.value.addEventListener(\"close\", () => {\r\n        isClosed.value = true;\r\n      });\r\n    });\r\n  }\r\n  tryOnScopeDispose(() => {\r\n    close();\r\n  });\r\n  return {\r\n    isSupported,\r\n    channel,\r\n    data,\r\n    post,\r\n    close,\r\n    error,\r\n    isClosed\r\n  };\r\n}\r\n\r\nvar __defProp$n = Object.defineProperty;\r\nvar __getOwnPropSymbols$q = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$q = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$q = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$n = (obj, key, value) => key in obj ? __defProp$n(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$n = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$q.call(b, prop))\r\n      __defNormalProp$n(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$q)\r\n    for (var prop of __getOwnPropSymbols$q(b)) {\r\n      if (__propIsEnum$q.call(b, prop))\r\n        __defNormalProp$n(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nconst WRITABLE_PROPERTIES = [\r\n  \"hash\",\r\n  \"host\",\r\n  \"hostname\",\r\n  \"href\",\r\n  \"pathname\",\r\n  \"port\",\r\n  \"protocol\",\r\n  \"search\"\r\n];\r\nfunction useBrowserLocation({ window = defaultWindow } = {}) {\r\n  const refs = Object.fromEntries(\r\n    WRITABLE_PROPERTIES.map((key) => [key, ref()])\r\n  );\r\n  for (const [key, ref2] of objectEntries(refs)) {\r\n    watch(ref2, (value) => {\r\n      if (!(window == null ? void 0 : window.location) || window.location[key] === value)\r\n        return;\r\n      window.location[key] = value;\r\n    });\r\n  }\r\n  const buildState = (trigger) => {\r\n    var _a;\r\n    const { state: state2, length } = (window == null ? void 0 : window.history) || {};\r\n    const { origin } = (window == null ? void 0 : window.location) || {};\r\n    for (const key of WRITABLE_PROPERTIES)\r\n      refs[key].value = (_a = window == null ? void 0 : window.location) == null ? void 0 : _a[key];\r\n    return reactive(__spreadValues$n({\r\n      trigger,\r\n      state: state2,\r\n      length,\r\n      origin\r\n    }, refs));\r\n  };\r\n  const state = ref(buildState(\"load\"));\r\n  if (window) {\r\n    useEventListener(window, \"popstate\", () => state.value = buildState(\"popstate\"), { passive: true });\r\n    useEventListener(window, \"hashchange\", () => state.value = buildState(\"hashchange\"), { passive: true });\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction useCached(refValue, comparator = (a, b) => a === b, watchOptions) {\r\n  const cachedValue = ref(refValue.value);\r\n  watch(() => refValue.value, (value) => {\r\n    if (!comparator(value, cachedValue.value))\r\n      cachedValue.value = value;\r\n  }, watchOptions);\r\n  return cachedValue;\r\n}\r\n\r\nfunction useClipboard(options = {}) {\r\n  const {\r\n    navigator = defaultNavigator,\r\n    read = false,\r\n    source,\r\n    copiedDuring = 1500,\r\n    legacy = false\r\n  } = options;\r\n  const events = [\"copy\", \"cut\"];\r\n  const isClipboardApiSupported = useSupported(() => navigator && \"clipboard\" in navigator);\r\n  const isSupported = computed(() => isClipboardApiSupported.value || legacy);\r\n  const text = ref(\"\");\r\n  const copied = ref(false);\r\n  const timeout = useTimeoutFn(() => copied.value = false, copiedDuring);\r\n  function updateText() {\r\n    if (isClipboardApiSupported.value) {\r\n      navigator.clipboard.readText().then((value) => {\r\n        text.value = value;\r\n      });\r\n    } else {\r\n      text.value = legacyRead();\r\n    }\r\n  }\r\n  if (isSupported.value && read) {\r\n    for (const event of events)\r\n      useEventListener(event, updateText);\r\n  }\r\n  async function copy(value = toValue(source)) {\r\n    if (isSupported.value && value != null) {\r\n      if (isClipboardApiSupported.value)\r\n        await navigator.clipboard.writeText(value);\r\n      else\r\n        legacyCopy(value);\r\n      text.value = value;\r\n      copied.value = true;\r\n      timeout.start();\r\n    }\r\n  }\r\n  function legacyCopy(value) {\r\n    const ta = document.createElement(\"textarea\");\r\n    ta.value = value != null ? value : \"\";\r\n    ta.style.position = \"absolute\";\r\n    ta.style.opacity = \"0\";\r\n    document.body.appendChild(ta);\r\n    ta.select();\r\n    document.execCommand(\"copy\");\r\n    ta.remove();\r\n  }\r\n  function legacyRead() {\r\n    var _a, _b, _c;\r\n    return (_c = (_b = (_a = document == null ? void 0 : document.getSelection) == null ? void 0 : _a.call(document)) == null ? void 0 : _b.toString()) != null ? _c : \"\";\r\n  }\r\n  return {\r\n    isSupported,\r\n    text,\r\n    copied,\r\n    copy\r\n  };\r\n}\r\n\r\nvar __defProp$m = Object.defineProperty;\r\nvar __defProps$a = Object.defineProperties;\r\nvar __getOwnPropDescs$a = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$p = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$p = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$p = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$m = (obj, key, value) => key in obj ? __defProp$m(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$m = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$p.call(b, prop))\r\n      __defNormalProp$m(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$p)\r\n    for (var prop of __getOwnPropSymbols$p(b)) {\r\n      if (__propIsEnum$p.call(b, prop))\r\n        __defNormalProp$m(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$a = (a, b) => __defProps$a(a, __getOwnPropDescs$a(b));\r\nfunction cloneFnJSON(source) {\r\n  return JSON.parse(JSON.stringify(source));\r\n}\r\nfunction useCloned(source, options = {}) {\r\n  const cloned = ref({});\r\n  const {\r\n    manual,\r\n    clone = cloneFnJSON,\r\n    // watch options\r\n    deep = true,\r\n    immediate = true\r\n  } = options;\r\n  function sync() {\r\n    cloned.value = clone(toValue(source));\r\n  }\r\n  if (!manual && (isRef(source) || typeof source === \"function\")) {\r\n    watch(source, sync, __spreadProps$a(__spreadValues$m({}, options), {\r\n      deep,\r\n      immediate\r\n    }));\r\n  } else {\r\n    sync();\r\n  }\r\n  return { cloned, sync };\r\n}\r\n\r\nconst _global = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\r\nconst globalKey = \"__vueuse_ssr_handlers__\";\r\nconst handlers = /* @__PURE__ */ getHandlers();\r\nfunction getHandlers() {\r\n  if (!(globalKey in _global))\r\n    _global[globalKey] = _global[globalKey] || {};\r\n  return _global[globalKey];\r\n}\r\nfunction getSSRHandler(key, fallback) {\r\n  return handlers[key] || fallback;\r\n}\r\nfunction setSSRHandler(key, fn) {\r\n  handlers[key] = fn;\r\n}\r\n\r\nfunction guessSerializerType(rawInit) {\r\n  return rawInit == null ? \"any\" : rawInit instanceof Set ? \"set\" : rawInit instanceof Map ? \"map\" : rawInit instanceof Date ? \"date\" : typeof rawInit === \"boolean\" ? \"boolean\" : typeof rawInit === \"string\" ? \"string\" : typeof rawInit === \"object\" ? \"object\" : !Number.isNaN(rawInit) ? \"number\" : \"any\";\r\n}\r\n\r\nvar __defProp$l = Object.defineProperty;\r\nvar __getOwnPropSymbols$o = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$o = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$o = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$l = (obj, key, value) => key in obj ? __defProp$l(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$l = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$o.call(b, prop))\r\n      __defNormalProp$l(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$o)\r\n    for (var prop of __getOwnPropSymbols$o(b)) {\r\n      if (__propIsEnum$o.call(b, prop))\r\n        __defNormalProp$l(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nconst StorageSerializers = {\r\n  boolean: {\r\n    read: (v) => v === \"true\",\r\n    write: (v) => String(v)\r\n  },\r\n  object: {\r\n    read: (v) => JSON.parse(v),\r\n    write: (v) => JSON.stringify(v)\r\n  },\r\n  number: {\r\n    read: (v) => Number.parseFloat(v),\r\n    write: (v) => String(v)\r\n  },\r\n  any: {\r\n    read: (v) => v,\r\n    write: (v) => String(v)\r\n  },\r\n  string: {\r\n    read: (v) => v,\r\n    write: (v) => String(v)\r\n  },\r\n  map: {\r\n    read: (v) => new Map(JSON.parse(v)),\r\n    write: (v) => JSON.stringify(Array.from(v.entries()))\r\n  },\r\n  set: {\r\n    read: (v) => new Set(JSON.parse(v)),\r\n    write: (v) => JSON.stringify(Array.from(v))\r\n  },\r\n  date: {\r\n    read: (v) => new Date(v),\r\n    write: (v) => v.toISOString()\r\n  }\r\n};\r\nconst customStorageEventName = \"vueuse-storage\";\r\nfunction useStorage(key, defaults, storage, options = {}) {\r\n  var _a;\r\n  const {\r\n    flush = \"pre\",\r\n    deep = true,\r\n    listenToStorageChanges = true,\r\n    writeDefaults = true,\r\n    mergeDefaults = false,\r\n    shallow,\r\n    window = defaultWindow,\r\n    eventFilter,\r\n    onError = (e) => {\r\n      console.error(e);\r\n    }\r\n  } = options;\r\n  const data = (shallow ? shallowRef : ref)(defaults);\r\n  if (!storage) {\r\n    try {\r\n      storage = getSSRHandler(\"getDefaultStorage\", () => {\r\n        var _a2;\r\n        return (_a2 = defaultWindow) == null ? void 0 : _a2.localStorage;\r\n      })();\r\n    } catch (e) {\r\n      onError(e);\r\n    }\r\n  }\r\n  if (!storage)\r\n    return data;\r\n  const rawInit = toValue(defaults);\r\n  const type = guessSerializerType(rawInit);\r\n  const serializer = (_a = options.serializer) != null ? _a : StorageSerializers[type];\r\n  const { pause: pauseWatch, resume: resumeWatch } = pausableWatch(\r\n    data,\r\n    () => write(data.value),\r\n    { flush, deep, eventFilter }\r\n  );\r\n  if (window && listenToStorageChanges) {\r\n    useEventListener(window, \"storage\", update);\r\n    useEventListener(window, customStorageEventName, updateFromCustomEvent);\r\n  }\r\n  update();\r\n  return data;\r\n  function write(v) {\r\n    try {\r\n      if (v == null) {\r\n        storage.removeItem(key);\r\n      } else {\r\n        const serialized = serializer.write(v);\r\n        const oldValue = storage.getItem(key);\r\n        if (oldValue !== serialized) {\r\n          storage.setItem(key, serialized);\r\n          if (window) {\r\n            window.dispatchEvent(new CustomEvent(customStorageEventName, {\r\n              detail: {\r\n                key,\r\n                oldValue,\r\n                newValue: serialized,\r\n                storageArea: storage\r\n              }\r\n            }));\r\n          }\r\n        }\r\n      }\r\n    } catch (e) {\r\n      onError(e);\r\n    }\r\n  }\r\n  function read(event) {\r\n    const rawValue = event ? event.newValue : storage.getItem(key);\r\n    if (rawValue == null) {\r\n      if (writeDefaults && rawInit !== null)\r\n        storage.setItem(key, serializer.write(rawInit));\r\n      return rawInit;\r\n    } else if (!event && mergeDefaults) {\r\n      const value = serializer.read(rawValue);\r\n      if (typeof mergeDefaults === \"function\")\r\n        return mergeDefaults(value, rawInit);\r\n      else if (type === \"object\" && !Array.isArray(value))\r\n        return __spreadValues$l(__spreadValues$l({}, rawInit), value);\r\n      return value;\r\n    } else if (typeof rawValue !== \"string\") {\r\n      return rawValue;\r\n    } else {\r\n      return serializer.read(rawValue);\r\n    }\r\n  }\r\n  function updateFromCustomEvent(event) {\r\n    update(event.detail);\r\n  }\r\n  function update(event) {\r\n    if (event && event.storageArea !== storage)\r\n      return;\r\n    if (event && event.key == null) {\r\n      data.value = rawInit;\r\n      return;\r\n    }\r\n    if (event && event.key !== key)\r\n      return;\r\n    pauseWatch();\r\n    try {\r\n      data.value = read(event);\r\n    } catch (e) {\r\n      onError(e);\r\n    } finally {\r\n      if (event)\r\n        nextTick(resumeWatch);\r\n      else\r\n        resumeWatch();\r\n    }\r\n  }\r\n}\r\n\r\nfunction usePreferredDark(options) {\r\n  return useMediaQuery(\"(prefers-color-scheme: dark)\", options);\r\n}\r\n\r\nvar __defProp$k = Object.defineProperty;\r\nvar __getOwnPropSymbols$n = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$n = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$n = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$k = (obj, key, value) => key in obj ? __defProp$k(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$k = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$n.call(b, prop))\r\n      __defNormalProp$k(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$n)\r\n    for (var prop of __getOwnPropSymbols$n(b)) {\r\n      if (__propIsEnum$n.call(b, prop))\r\n        __defNormalProp$k(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useColorMode(options = {}) {\r\n  const {\r\n    selector = \"html\",\r\n    attribute = \"class\",\r\n    initialValue = \"auto\",\r\n    window = defaultWindow,\r\n    storage,\r\n    storageKey = \"vueuse-color-scheme\",\r\n    listenToStorageChanges = true,\r\n    storageRef,\r\n    emitAuto,\r\n    disableTransition = true\r\n  } = options;\r\n  const modes = __spreadValues$k({\r\n    auto: \"\",\r\n    light: \"light\",\r\n    dark: \"dark\"\r\n  }, options.modes || {});\r\n  const preferredDark = usePreferredDark({ window });\r\n  const system = computed(() => preferredDark.value ? \"dark\" : \"light\");\r\n  const store = storageRef || (storageKey == null ? toRef(initialValue) : useStorage(storageKey, initialValue, storage, { window, listenToStorageChanges }));\r\n  const state = computed(\r\n    () => store.value === \"auto\" ? system.value : store.value\r\n  );\r\n  const updateHTMLAttrs = getSSRHandler(\r\n    \"updateHTMLAttrs\",\r\n    (selector2, attribute2, value) => {\r\n      const el = typeof selector2 === \"string\" ? window == null ? void 0 : window.document.querySelector(selector2) : unrefElement(selector2);\r\n      if (!el)\r\n        return;\r\n      let style;\r\n      if (disableTransition) {\r\n        style = window.document.createElement(\"style\");\r\n        const styleString = \"*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}\";\r\n        style.appendChild(document.createTextNode(styleString));\r\n        window.document.head.appendChild(style);\r\n      }\r\n      if (attribute2 === \"class\") {\r\n        const current = value.split(/\\s/g);\r\n        Object.values(modes).flatMap((i) => (i || \"\").split(/\\s/g)).filter(Boolean).forEach((v) => {\r\n          if (current.includes(v))\r\n            el.classList.add(v);\r\n          else\r\n            el.classList.remove(v);\r\n        });\r\n      } else {\r\n        el.setAttribute(attribute2, value);\r\n      }\r\n      if (disableTransition) {\r\n        window.getComputedStyle(style).opacity;\r\n        document.head.removeChild(style);\r\n      }\r\n    }\r\n  );\r\n  function defaultOnChanged(mode) {\r\n    var _a;\r\n    updateHTMLAttrs(selector, attribute, (_a = modes[mode]) != null ? _a : mode);\r\n  }\r\n  function onChanged(mode) {\r\n    if (options.onChanged)\r\n      options.onChanged(mode, defaultOnChanged);\r\n    else\r\n      defaultOnChanged(mode);\r\n  }\r\n  watch(state, onChanged, { flush: \"post\", immediate: true });\r\n  tryOnMounted(() => onChanged(state.value));\r\n  const auto = computed({\r\n    get() {\r\n      return emitAuto ? store.value : state.value;\r\n    },\r\n    set(v) {\r\n      store.value = v;\r\n    }\r\n  });\r\n  try {\r\n    return Object.assign(auto, { store, system, state });\r\n  } catch (e) {\r\n    return auto;\r\n  }\r\n}\r\n\r\nfunction useConfirmDialog(revealed = ref(false)) {\r\n  const confirmHook = createEventHook();\r\n  const cancelHook = createEventHook();\r\n  const revealHook = createEventHook();\r\n  let _resolve = noop;\r\n  const reveal = (data) => {\r\n    revealHook.trigger(data);\r\n    revealed.value = true;\r\n    return new Promise((resolve) => {\r\n      _resolve = resolve;\r\n    });\r\n  };\r\n  const confirm = (data) => {\r\n    revealed.value = false;\r\n    confirmHook.trigger(data);\r\n    _resolve({ data, isCanceled: false });\r\n  };\r\n  const cancel = (data) => {\r\n    revealed.value = false;\r\n    cancelHook.trigger(data);\r\n    _resolve({ data, isCanceled: true });\r\n  };\r\n  return {\r\n    isRevealed: computed(() => revealed.value),\r\n    reveal,\r\n    confirm,\r\n    cancel,\r\n    onReveal: revealHook.on,\r\n    onConfirm: confirmHook.on,\r\n    onCancel: cancelHook.on\r\n  };\r\n}\r\n\r\nvar __getOwnPropSymbols$m = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$m = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$m = Object.prototype.propertyIsEnumerable;\r\nvar __objRest$3 = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$m.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$m)\r\n    for (var prop of __getOwnPropSymbols$m(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$m.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction useMutationObserver(target, callback, options = {}) {\r\n  const _a = options, { window = defaultWindow } = _a, mutationOptions = __objRest$3(_a, [\"window\"]);\r\n  let observer;\r\n  const isSupported = useSupported(() => window && \"MutationObserver\" in window);\r\n  const cleanup = () => {\r\n    if (observer) {\r\n      observer.disconnect();\r\n      observer = void 0;\r\n    }\r\n  };\r\n  const stopWatch = watch(\r\n    () => unrefElement(target),\r\n    (el) => {\r\n      cleanup();\r\n      if (isSupported.value && window && el) {\r\n        observer = new MutationObserver(callback);\r\n        observer.observe(el, mutationOptions);\r\n      }\r\n    },\r\n    { immediate: true }\r\n  );\r\n  const stop = () => {\r\n    cleanup();\r\n    stopWatch();\r\n  };\r\n  tryOnScopeDispose(stop);\r\n  return {\r\n    isSupported,\r\n    stop\r\n  };\r\n}\r\n\r\nfunction useCssVar(prop, target, options = {}) {\r\n  const { window = defaultWindow, initialValue = \"\", observe = false } = options;\r\n  const variable = ref(initialValue);\r\n  const elRef = computed(() => {\r\n    var _a;\r\n    return unrefElement(target) || ((_a = window == null ? void 0 : window.document) == null ? void 0 : _a.documentElement);\r\n  });\r\n  function updateCssVar() {\r\n    var _a;\r\n    const key = toValue(prop);\r\n    const el = toValue(elRef);\r\n    if (el && window) {\r\n      const value = (_a = window.getComputedStyle(el).getPropertyValue(key)) == null ? void 0 : _a.trim();\r\n      variable.value = value || initialValue;\r\n    }\r\n  }\r\n  if (observe) {\r\n    useMutationObserver(elRef, updateCssVar, {\r\n      attributeFilter: [\"style\", \"class\"],\r\n      window\r\n    });\r\n  }\r\n  watch(\r\n    [elRef, () => toValue(prop)],\r\n    updateCssVar,\r\n    { immediate: true }\r\n  );\r\n  watch(\r\n    variable,\r\n    (val) => {\r\n      var _a;\r\n      if ((_a = elRef.value) == null ? void 0 : _a.style)\r\n        elRef.value.style.setProperty(toValue(prop), val);\r\n    }\r\n  );\r\n  return variable;\r\n}\r\n\r\nfunction useCurrentElement() {\r\n  const vm = getCurrentInstance();\r\n  const currentElement = computedWithControl(\r\n    () => null,\r\n    () => vm.proxy.$el\r\n  );\r\n  onUpdated(currentElement.trigger);\r\n  onMounted(currentElement.trigger);\r\n  return currentElement;\r\n}\r\n\r\nfunction useCycleList(list, options) {\r\n  const state = shallowRef(getInitialValue());\r\n  const listRef = toRef(list);\r\n  const index = computed({\r\n    get() {\r\n      var _a;\r\n      const targetList = listRef.value;\r\n      let index2 = (options == null ? void 0 : options.getIndexOf) ? options.getIndexOf(state.value, targetList) : targetList.indexOf(state.value);\r\n      if (index2 < 0)\r\n        index2 = (_a = options == null ? void 0 : options.fallbackIndex) != null ? _a : 0;\r\n      return index2;\r\n    },\r\n    set(v) {\r\n      set(v);\r\n    }\r\n  });\r\n  function set(i) {\r\n    const targetList = listRef.value;\r\n    const length = targetList.length;\r\n    const index2 = (i % length + length) % length;\r\n    const value = targetList[index2];\r\n    state.value = value;\r\n    return value;\r\n  }\r\n  function shift(delta = 1) {\r\n    return set(index.value + delta);\r\n  }\r\n  function next(n = 1) {\r\n    return shift(n);\r\n  }\r\n  function prev(n = 1) {\r\n    return shift(-n);\r\n  }\r\n  function getInitialValue() {\r\n    var _a, _b;\r\n    return (_b = toValue((_a = options == null ? void 0 : options.initialValue) != null ? _a : toValue(list)[0])) != null ? _b : void 0;\r\n  }\r\n  watch(listRef, () => set(index.value));\r\n  return {\r\n    state,\r\n    index,\r\n    next,\r\n    prev\r\n  };\r\n}\r\n\r\nvar __defProp$j = Object.defineProperty;\r\nvar __defProps$9 = Object.defineProperties;\r\nvar __getOwnPropDescs$9 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$l = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$l = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$l = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$j = (obj, key, value) => key in obj ? __defProp$j(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$j = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$l.call(b, prop))\r\n      __defNormalProp$j(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$l)\r\n    for (var prop of __getOwnPropSymbols$l(b)) {\r\n      if (__propIsEnum$l.call(b, prop))\r\n        __defNormalProp$j(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$9 = (a, b) => __defProps$9(a, __getOwnPropDescs$9(b));\r\nfunction useDark(options = {}) {\r\n  const {\r\n    valueDark = \"dark\",\r\n    valueLight = \"\"\r\n  } = options;\r\n  const mode = useColorMode(__spreadProps$9(__spreadValues$j({}, options), {\r\n    onChanged: (mode2, defaultHandler) => {\r\n      var _a;\r\n      if (options.onChanged)\r\n        (_a = options.onChanged) == null ? void 0 : _a.call(options, mode2 === \"dark\", defaultHandler, mode2);\r\n      else\r\n        defaultHandler(mode2);\r\n    },\r\n    modes: {\r\n      dark: valueDark,\r\n      light: valueLight\r\n    }\r\n  }));\r\n  const isDark = computed({\r\n    get() {\r\n      return mode.value === \"dark\";\r\n    },\r\n    set(v) {\r\n      const modeVal = v ? \"dark\" : \"light\";\r\n      if (mode.system.value === modeVal)\r\n        mode.value = \"auto\";\r\n      else\r\n        mode.value = modeVal;\r\n    }\r\n  });\r\n  return isDark;\r\n}\r\n\r\nfunction fnBypass(v) {\r\n  return v;\r\n}\r\nfunction fnSetSource(source, value) {\r\n  return source.value = value;\r\n}\r\nfunction defaultDump(clone) {\r\n  return clone ? typeof clone === \"function\" ? clone : cloneFnJSON : fnBypass;\r\n}\r\nfunction defaultParse(clone) {\r\n  return clone ? typeof clone === \"function\" ? clone : cloneFnJSON : fnBypass;\r\n}\r\nfunction useManualRefHistory(source, options = {}) {\r\n  const {\r\n    clone = false,\r\n    dump = defaultDump(clone),\r\n    parse = defaultParse(clone),\r\n    setSource = fnSetSource\r\n  } = options;\r\n  function _createHistoryRecord() {\r\n    return markRaw({\r\n      snapshot: dump(source.value),\r\n      timestamp: timestamp()\r\n    });\r\n  }\r\n  const last = ref(_createHistoryRecord());\r\n  const undoStack = ref([]);\r\n  const redoStack = ref([]);\r\n  const _setSource = (record) => {\r\n    setSource(source, parse(record.snapshot));\r\n    last.value = record;\r\n  };\r\n  const commit = () => {\r\n    undoStack.value.unshift(last.value);\r\n    last.value = _createHistoryRecord();\r\n    if (options.capacity && undoStack.value.length > options.capacity)\r\n      undoStack.value.splice(options.capacity, Infinity);\r\n    if (redoStack.value.length)\r\n      redoStack.value.splice(0, redoStack.value.length);\r\n  };\r\n  const clear = () => {\r\n    undoStack.value.splice(0, undoStack.value.length);\r\n    redoStack.value.splice(0, redoStack.value.length);\r\n  };\r\n  const undo = () => {\r\n    const state = undoStack.value.shift();\r\n    if (state) {\r\n      redoStack.value.unshift(last.value);\r\n      _setSource(state);\r\n    }\r\n  };\r\n  const redo = () => {\r\n    const state = redoStack.value.shift();\r\n    if (state) {\r\n      undoStack.value.unshift(last.value);\r\n      _setSource(state);\r\n    }\r\n  };\r\n  const reset = () => {\r\n    _setSource(last.value);\r\n  };\r\n  const history = computed(() => [last.value, ...undoStack.value]);\r\n  const canUndo = computed(() => undoStack.value.length > 0);\r\n  const canRedo = computed(() => redoStack.value.length > 0);\r\n  return {\r\n    source,\r\n    undoStack,\r\n    redoStack,\r\n    last,\r\n    history,\r\n    canUndo,\r\n    canRedo,\r\n    clear,\r\n    commit,\r\n    reset,\r\n    undo,\r\n    redo\r\n  };\r\n}\r\n\r\nvar __defProp$i = Object.defineProperty;\r\nvar __defProps$8 = Object.defineProperties;\r\nvar __getOwnPropDescs$8 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$k = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$k = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$k = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$i = (obj, key, value) => key in obj ? __defProp$i(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$i = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$k.call(b, prop))\r\n      __defNormalProp$i(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$k)\r\n    for (var prop of __getOwnPropSymbols$k(b)) {\r\n      if (__propIsEnum$k.call(b, prop))\r\n        __defNormalProp$i(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$8 = (a, b) => __defProps$8(a, __getOwnPropDescs$8(b));\r\nfunction useRefHistory(source, options = {}) {\r\n  const {\r\n    deep = false,\r\n    flush = \"pre\",\r\n    eventFilter\r\n  } = options;\r\n  const {\r\n    eventFilter: composedFilter,\r\n    pause,\r\n    resume: resumeTracking,\r\n    isActive: isTracking\r\n  } = pausableFilter(eventFilter);\r\n  const {\r\n    ignoreUpdates,\r\n    ignorePrevAsyncUpdates,\r\n    stop\r\n  } = watchIgnorable(\r\n    source,\r\n    commit,\r\n    { deep, flush, eventFilter: composedFilter }\r\n  );\r\n  function setSource(source2, value) {\r\n    ignorePrevAsyncUpdates();\r\n    ignoreUpdates(() => {\r\n      source2.value = value;\r\n    });\r\n  }\r\n  const manualHistory = useManualRefHistory(source, __spreadProps$8(__spreadValues$i({}, options), { clone: options.clone || deep, setSource }));\r\n  const { clear, commit: manualCommit } = manualHistory;\r\n  function commit() {\r\n    ignorePrevAsyncUpdates();\r\n    manualCommit();\r\n  }\r\n  function resume(commitNow) {\r\n    resumeTracking();\r\n    if (commitNow)\r\n      commit();\r\n  }\r\n  function batch(fn) {\r\n    let canceled = false;\r\n    const cancel = () => canceled = true;\r\n    ignoreUpdates(() => {\r\n      fn(cancel);\r\n    });\r\n    if (!canceled)\r\n      commit();\r\n  }\r\n  function dispose() {\r\n    stop();\r\n    clear();\r\n  }\r\n  return __spreadProps$8(__spreadValues$i({}, manualHistory), {\r\n    isTracking,\r\n    pause,\r\n    resume,\r\n    commit,\r\n    batch,\r\n    dispose\r\n  });\r\n}\r\n\r\nvar __defProp$h = Object.defineProperty;\r\nvar __defProps$7 = Object.defineProperties;\r\nvar __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$j = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$j = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$j = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$h = (obj, key, value) => key in obj ? __defProp$h(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$h = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$j.call(b, prop))\r\n      __defNormalProp$h(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$j)\r\n    for (var prop of __getOwnPropSymbols$j(b)) {\r\n      if (__propIsEnum$j.call(b, prop))\r\n        __defNormalProp$h(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$7 = (a, b) => __defProps$7(a, __getOwnPropDescs$7(b));\r\nfunction useDebouncedRefHistory(source, options = {}) {\r\n  const filter = options.debounce ? debounceFilter(options.debounce) : void 0;\r\n  const history = useRefHistory(source, __spreadProps$7(__spreadValues$h({}, options), { eventFilter: filter }));\r\n  return __spreadValues$h({}, history);\r\n}\r\n\r\nfunction useDeviceMotion(options = {}) {\r\n  const {\r\n    window = defaultWindow,\r\n    eventFilter = bypassFilter\r\n  } = options;\r\n  const acceleration = ref({ x: null, y: null, z: null });\r\n  const rotationRate = ref({ alpha: null, beta: null, gamma: null });\r\n  const interval = ref(0);\r\n  const accelerationIncludingGravity = ref({\r\n    x: null,\r\n    y: null,\r\n    z: null\r\n  });\r\n  if (window) {\r\n    const onDeviceMotion = createFilterWrapper(\r\n      eventFilter,\r\n      (event) => {\r\n        acceleration.value = event.acceleration;\r\n        accelerationIncludingGravity.value = event.accelerationIncludingGravity;\r\n        rotationRate.value = event.rotationRate;\r\n        interval.value = event.interval;\r\n      }\r\n    );\r\n    useEventListener(window, \"devicemotion\", onDeviceMotion);\r\n  }\r\n  return {\r\n    acceleration,\r\n    accelerationIncludingGravity,\r\n    rotationRate,\r\n    interval\r\n  };\r\n}\r\n\r\nfunction useDeviceOrientation(options = {}) {\r\n  const { window = defaultWindow } = options;\r\n  const isSupported = useSupported(() => window && \"DeviceOrientationEvent\" in window);\r\n  const isAbsolute = ref(false);\r\n  const alpha = ref(null);\r\n  const beta = ref(null);\r\n  const gamma = ref(null);\r\n  if (window && isSupported.value) {\r\n    useEventListener(window, \"deviceorientation\", (event) => {\r\n      isAbsolute.value = event.absolute;\r\n      alpha.value = event.alpha;\r\n      beta.value = event.beta;\r\n      gamma.value = event.gamma;\r\n    });\r\n  }\r\n  return {\r\n    isSupported,\r\n    isAbsolute,\r\n    alpha,\r\n    beta,\r\n    gamma\r\n  };\r\n}\r\n\r\nfunction useDevicePixelRatio({\r\n  window = defaultWindow\r\n} = {}) {\r\n  const pixelRatio = ref(1);\r\n  if (window) {\r\n    let observe = function() {\r\n      pixelRatio.value = window.devicePixelRatio;\r\n      cleanup();\r\n      media = window.matchMedia(`(resolution: ${pixelRatio.value}dppx)`);\r\n      media.addEventListener(\"change\", observe, { once: true });\r\n    }, cleanup = function() {\r\n      media == null ? void 0 : media.removeEventListener(\"change\", observe);\r\n    };\r\n    let media;\r\n    observe();\r\n    tryOnScopeDispose(cleanup);\r\n  }\r\n  return { pixelRatio };\r\n}\r\n\r\nfunction usePermission(permissionDesc, options = {}) {\r\n  const {\r\n    controls = false,\r\n    navigator = defaultNavigator\r\n  } = options;\r\n  const isSupported = useSupported(() => navigator && \"permissions\" in navigator);\r\n  let permissionStatus;\r\n  const desc = typeof permissionDesc === \"string\" ? { name: permissionDesc } : permissionDesc;\r\n  const state = ref();\r\n  const onChange = () => {\r\n    if (permissionStatus)\r\n      state.value = permissionStatus.state;\r\n  };\r\n  const query = createSingletonPromise(async () => {\r\n    if (!isSupported.value)\r\n      return;\r\n    if (!permissionStatus) {\r\n      try {\r\n        permissionStatus = await navigator.permissions.query(desc);\r\n        useEventListener(permissionStatus, \"change\", onChange);\r\n        onChange();\r\n      } catch (e) {\r\n        state.value = \"prompt\";\r\n      }\r\n    }\r\n    return permissionStatus;\r\n  });\r\n  query();\r\n  if (controls) {\r\n    return {\r\n      state,\r\n      isSupported,\r\n      query\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n}\r\n\r\nfunction useDevicesList(options = {}) {\r\n  const {\r\n    navigator = defaultNavigator,\r\n    requestPermissions = false,\r\n    constraints = { audio: true, video: true },\r\n    onUpdated\r\n  } = options;\r\n  const devices = ref([]);\r\n  const videoInputs = computed(() => devices.value.filter((i) => i.kind === \"videoinput\"));\r\n  const audioInputs = computed(() => devices.value.filter((i) => i.kind === \"audioinput\"));\r\n  const audioOutputs = computed(() => devices.value.filter((i) => i.kind === \"audiooutput\"));\r\n  const isSupported = useSupported(() => navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);\r\n  const permissionGranted = ref(false);\r\n  let stream;\r\n  async function update() {\r\n    if (!isSupported.value)\r\n      return;\r\n    devices.value = await navigator.mediaDevices.enumerateDevices();\r\n    onUpdated == null ? void 0 : onUpdated(devices.value);\r\n    if (stream) {\r\n      stream.getTracks().forEach((t) => t.stop());\r\n      stream = null;\r\n    }\r\n  }\r\n  async function ensurePermissions() {\r\n    if (!isSupported.value)\r\n      return false;\r\n    if (permissionGranted.value)\r\n      return true;\r\n    const { state, query } = usePermission(\"camera\", { controls: true });\r\n    await query();\r\n    if (state.value !== \"granted\") {\r\n      stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      update();\r\n      permissionGranted.value = true;\r\n    } else {\r\n      permissionGranted.value = true;\r\n    }\r\n    return permissionGranted.value;\r\n  }\r\n  if (isSupported.value) {\r\n    if (requestPermissions)\r\n      ensurePermissions();\r\n    useEventListener(navigator.mediaDevices, \"devicechange\", update);\r\n    update();\r\n  }\r\n  return {\r\n    devices,\r\n    ensurePermissions,\r\n    permissionGranted,\r\n    videoInputs,\r\n    audioInputs,\r\n    audioOutputs,\r\n    isSupported\r\n  };\r\n}\r\n\r\nfunction useDisplayMedia(options = {}) {\r\n  var _a;\r\n  const enabled = ref((_a = options.enabled) != null ? _a : false);\r\n  const video = options.video;\r\n  const audio = options.audio;\r\n  const { navigator = defaultNavigator } = options;\r\n  const isSupported = useSupported(() => {\r\n    var _a2;\r\n    return (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.getDisplayMedia;\r\n  });\r\n  const constraint = { audio, video };\r\n  const stream = shallowRef();\r\n  async function _start() {\r\n    if (!isSupported.value || stream.value)\r\n      return;\r\n    stream.value = await navigator.mediaDevices.getDisplayMedia(constraint);\r\n    return stream.value;\r\n  }\r\n  async function _stop() {\r\n    var _a2;\r\n    (_a2 = stream.value) == null ? void 0 : _a2.getTracks().forEach((t) => t.stop());\r\n    stream.value = void 0;\r\n  }\r\n  function stop() {\r\n    _stop();\r\n    enabled.value = false;\r\n  }\r\n  async function start() {\r\n    await _start();\r\n    if (stream.value)\r\n      enabled.value = true;\r\n    return stream.value;\r\n  }\r\n  watch(\r\n    enabled,\r\n    (v) => {\r\n      if (v)\r\n        _start();\r\n      else\r\n        _stop();\r\n    },\r\n    { immediate: true }\r\n  );\r\n  return {\r\n    isSupported,\r\n    stream,\r\n    start,\r\n    stop,\r\n    enabled\r\n  };\r\n}\r\n\r\nfunction useDocumentVisibility({ document = defaultDocument } = {}) {\r\n  if (!document)\r\n    return ref(\"visible\");\r\n  const visibility = ref(document.visibilityState);\r\n  useEventListener(document, \"visibilitychange\", () => {\r\n    visibility.value = document.visibilityState;\r\n  });\r\n  return visibility;\r\n}\r\n\r\nvar __defProp$g = Object.defineProperty;\r\nvar __defProps$6 = Object.defineProperties;\r\nvar __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$i = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$i = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$i = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$g = (obj, key, value) => key in obj ? __defProp$g(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$g = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$i.call(b, prop))\r\n      __defNormalProp$g(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$i)\r\n    for (var prop of __getOwnPropSymbols$i(b)) {\r\n      if (__propIsEnum$i.call(b, prop))\r\n        __defNormalProp$g(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$6 = (a, b) => __defProps$6(a, __getOwnPropDescs$6(b));\r\nfunction useDraggable(target, options = {}) {\r\n  var _a, _b;\r\n  const {\r\n    pointerTypes,\r\n    preventDefault,\r\n    stopPropagation,\r\n    exact,\r\n    onMove,\r\n    onEnd,\r\n    onStart,\r\n    initialValue,\r\n    axis = \"both\",\r\n    draggingElement = defaultWindow,\r\n    handle: draggingHandle = target\r\n  } = options;\r\n  const position = ref(\r\n    (_a = toValue(initialValue)) != null ? _a : { x: 0, y: 0 }\r\n  );\r\n  const pressedDelta = ref();\r\n  const filterEvent = (e) => {\r\n    if (pointerTypes)\r\n      return pointerTypes.includes(e.pointerType);\r\n    return true;\r\n  };\r\n  const handleEvent = (e) => {\r\n    if (toValue(preventDefault))\r\n      e.preventDefault();\r\n    if (toValue(stopPropagation))\r\n      e.stopPropagation();\r\n  };\r\n  const start = (e) => {\r\n    if (!filterEvent(e))\r\n      return;\r\n    if (toValue(exact) && e.target !== toValue(target))\r\n      return;\r\n    const rect = toValue(target).getBoundingClientRect();\r\n    const pos = {\r\n      x: e.clientX - rect.left,\r\n      y: e.clientY - rect.top\r\n    };\r\n    if ((onStart == null ? void 0 : onStart(pos, e)) === false)\r\n      return;\r\n    pressedDelta.value = pos;\r\n    handleEvent(e);\r\n  };\r\n  const move = (e) => {\r\n    if (!filterEvent(e))\r\n      return;\r\n    if (!pressedDelta.value)\r\n      return;\r\n    let { x, y } = position.value;\r\n    if (axis === \"x\" || axis === \"both\")\r\n      x = e.clientX - pressedDelta.value.x;\r\n    if (axis === \"y\" || axis === \"both\")\r\n      y = e.clientY - pressedDelta.value.y;\r\n    position.value = {\r\n      x,\r\n      y\r\n    };\r\n    onMove == null ? void 0 : onMove(position.value, e);\r\n    handleEvent(e);\r\n  };\r\n  const end = (e) => {\r\n    if (!filterEvent(e))\r\n      return;\r\n    if (!pressedDelta.value)\r\n      return;\r\n    pressedDelta.value = void 0;\r\n    onEnd == null ? void 0 : onEnd(position.value, e);\r\n    handleEvent(e);\r\n  };\r\n  if (isClient) {\r\n    const config = { capture: (_b = options.capture) != null ? _b : true };\r\n    useEventListener(draggingHandle, \"pointerdown\", start, config);\r\n    useEventListener(draggingElement, \"pointermove\", move, config);\r\n    useEventListener(draggingElement, \"pointerup\", end, config);\r\n  }\r\n  return __spreadProps$6(__spreadValues$g({}, toRefs(position)), {\r\n    position,\r\n    isDragging: computed(() => !!pressedDelta.value),\r\n    style: computed(\r\n      () => `left:${position.value.x}px;top:${position.value.y}px;`\r\n    )\r\n  });\r\n}\r\n\r\nfunction useDropZone(target, options = {}) {\r\n  const isOverDropZone = ref(false);\r\n  const files = shallowRef(null);\r\n  let counter = 0;\r\n  if (isClient) {\r\n    const _options = typeof options === \"function\" ? { onDrop: options } : options;\r\n    const getFiles = (event) => {\r\n      var _a, _b;\r\n      const list = Array.from((_b = (_a = event.dataTransfer) == null ? void 0 : _a.files) != null ? _b : []);\r\n      return files.value = list.length === 0 ? null : list;\r\n    };\r\n    useEventListener(target, \"dragenter\", (event) => {\r\n      var _a;\r\n      event.preventDefault();\r\n      counter += 1;\r\n      isOverDropZone.value = true;\r\n      (_a = _options.onEnter) == null ? void 0 : _a.call(_options, getFiles(event), event);\r\n    });\r\n    useEventListener(target, \"dragover\", (event) => {\r\n      var _a;\r\n      event.preventDefault();\r\n      (_a = _options.onOver) == null ? void 0 : _a.call(_options, getFiles(event), event);\r\n    });\r\n    useEventListener(target, \"dragleave\", (event) => {\r\n      var _a;\r\n      event.preventDefault();\r\n      counter -= 1;\r\n      if (counter === 0)\r\n        isOverDropZone.value = false;\r\n      (_a = _options.onLeave) == null ? void 0 : _a.call(_options, getFiles(event), event);\r\n    });\r\n    useEventListener(target, \"drop\", (event) => {\r\n      var _a;\r\n      event.preventDefault();\r\n      counter = 0;\r\n      isOverDropZone.value = false;\r\n      (_a = _options.onDrop) == null ? void 0 : _a.call(_options, getFiles(event), event);\r\n    });\r\n  }\r\n  return {\r\n    files,\r\n    isOverDropZone\r\n  };\r\n}\r\n\r\nvar __getOwnPropSymbols$h = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$h = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$h = Object.prototype.propertyIsEnumerable;\r\nvar __objRest$2 = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$h.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$h)\r\n    for (var prop of __getOwnPropSymbols$h(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$h.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction useResizeObserver(target, callback, options = {}) {\r\n  const _a = options, { window = defaultWindow } = _a, observerOptions = __objRest$2(_a, [\"window\"]);\r\n  let observer;\r\n  const isSupported = useSupported(() => window && \"ResizeObserver\" in window);\r\n  const cleanup = () => {\r\n    if (observer) {\r\n      observer.disconnect();\r\n      observer = void 0;\r\n    }\r\n  };\r\n  const targets = computed(\r\n    () => Array.isArray(target) ? target.map((el) => unrefElement(el)) : [unrefElement(target)]\r\n  );\r\n  const stopWatch = watch(\r\n    targets,\r\n    (els) => {\r\n      cleanup();\r\n      if (isSupported.value && window) {\r\n        observer = new ResizeObserver(callback);\r\n        for (const _el of els)\r\n          _el && observer.observe(_el, observerOptions);\r\n      }\r\n    },\r\n    { immediate: true, flush: \"post\", deep: true }\r\n  );\r\n  const stop = () => {\r\n    cleanup();\r\n    stopWatch();\r\n  };\r\n  tryOnScopeDispose(stop);\r\n  return {\r\n    isSupported,\r\n    stop\r\n  };\r\n}\r\n\r\nfunction useElementBounding(target, options = {}) {\r\n  const {\r\n    reset = true,\r\n    windowResize = true,\r\n    windowScroll = true,\r\n    immediate = true\r\n  } = options;\r\n  const height = ref(0);\r\n  const bottom = ref(0);\r\n  const left = ref(0);\r\n  const right = ref(0);\r\n  const top = ref(0);\r\n  const width = ref(0);\r\n  const x = ref(0);\r\n  const y = ref(0);\r\n  function update() {\r\n    const el = unrefElement(target);\r\n    if (!el) {\r\n      if (reset) {\r\n        height.value = 0;\r\n        bottom.value = 0;\r\n        left.value = 0;\r\n        right.value = 0;\r\n        top.value = 0;\r\n        width.value = 0;\r\n        x.value = 0;\r\n        y.value = 0;\r\n      }\r\n      return;\r\n    }\r\n    const rect = el.getBoundingClientRect();\r\n    height.value = rect.height;\r\n    bottom.value = rect.bottom;\r\n    left.value = rect.left;\r\n    right.value = rect.right;\r\n    top.value = rect.top;\r\n    width.value = rect.width;\r\n    x.value = rect.x;\r\n    y.value = rect.y;\r\n  }\r\n  useResizeObserver(target, update);\r\n  watch(() => unrefElement(target), (ele) => !ele && update());\r\n  if (windowScroll)\r\n    useEventListener(\"scroll\", update, { capture: true, passive: true });\r\n  if (windowResize)\r\n    useEventListener(\"resize\", update, { passive: true });\r\n  tryOnMounted(() => {\r\n    if (immediate)\r\n      update();\r\n  });\r\n  return {\r\n    height,\r\n    bottom,\r\n    left,\r\n    right,\r\n    top,\r\n    width,\r\n    x,\r\n    y,\r\n    update\r\n  };\r\n}\r\n\r\nvar __defProp$f = Object.defineProperty;\r\nvar __getOwnPropSymbols$g = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$g = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$g = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$f = (obj, key, value) => key in obj ? __defProp$f(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$f = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$g.call(b, prop))\r\n      __defNormalProp$f(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$g)\r\n    for (var prop of __getOwnPropSymbols$g(b)) {\r\n      if (__propIsEnum$g.call(b, prop))\r\n        __defNormalProp$f(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useElementByPoint(options) {\r\n  const {\r\n    x,\r\n    y,\r\n    document = defaultDocument,\r\n    multiple,\r\n    interval = \"requestAnimationFrame\",\r\n    immediate = true\r\n  } = options;\r\n  const isSupported = useSupported(() => {\r\n    if (toValue(multiple))\r\n      return document && \"elementsFromPoint\" in document;\r\n    return document && \"elementFromPoint\" in document;\r\n  });\r\n  const element = ref(null);\r\n  const cb = () => {\r\n    var _a, _b;\r\n    element.value = toValue(multiple) ? (_a = document == null ? void 0 : document.elementsFromPoint(toValue(x), toValue(y))) != null ? _a : [] : (_b = document == null ? void 0 : document.elementFromPoint(toValue(x), toValue(y))) != null ? _b : null;\r\n  };\r\n  const controls = interval === \"requestAnimationFrame\" ? useRafFn(cb, { immediate }) : useIntervalFn(cb, interval, { immediate });\r\n  return __spreadValues$f({\r\n    isSupported,\r\n    element\r\n  }, controls);\r\n}\r\n\r\nfunction useElementHover(el, options = {}) {\r\n  const {\r\n    delayEnter = 0,\r\n    delayLeave = 0,\r\n    window = defaultWindow\r\n  } = options;\r\n  const isHovered = ref(false);\r\n  let timer;\r\n  const toggle = (entering) => {\r\n    const delay = entering ? delayEnter : delayLeave;\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      timer = void 0;\r\n    }\r\n    if (delay)\r\n      timer = setTimeout(() => isHovered.value = entering, delay);\r\n    else\r\n      isHovered.value = entering;\r\n  };\r\n  if (!window)\r\n    return isHovered;\r\n  useEventListener(el, \"mouseenter\", () => toggle(true), { passive: true });\r\n  useEventListener(el, \"mouseleave\", () => toggle(false), { passive: true });\r\n  return isHovered;\r\n}\r\n\r\nfunction useElementSize(target, initialSize = { width: 0, height: 0 }, options = {}) {\r\n  const { window = defaultWindow, box = \"content-box\" } = options;\r\n  const isSVG = computed(() => {\r\n    var _a, _b;\r\n    return (_b = (_a = unrefElement(target)) == null ? void 0 : _a.namespaceURI) == null ? void 0 : _b.includes(\"svg\");\r\n  });\r\n  const width = ref(initialSize.width);\r\n  const height = ref(initialSize.height);\r\n  useResizeObserver(\r\n    target,\r\n    ([entry]) => {\r\n      const boxSize = box === \"border-box\" ? entry.borderBoxSize : box === \"content-box\" ? entry.contentBoxSize : entry.devicePixelContentBoxSize;\r\n      if (window && isSVG.value) {\r\n        const $elem = unrefElement(target);\r\n        if ($elem) {\r\n          const styles = window.getComputedStyle($elem);\r\n          width.value = Number.parseFloat(styles.width);\r\n          height.value = Number.parseFloat(styles.height);\r\n        }\r\n      } else {\r\n        if (boxSize) {\r\n          const formatBoxSize = Array.isArray(boxSize) ? boxSize : [boxSize];\r\n          width.value = formatBoxSize.reduce((acc, { inlineSize }) => acc + inlineSize, 0);\r\n          height.value = formatBoxSize.reduce((acc, { blockSize }) => acc + blockSize, 0);\r\n        } else {\r\n          width.value = entry.contentRect.width;\r\n          height.value = entry.contentRect.height;\r\n        }\r\n      }\r\n    },\r\n    options\r\n  );\r\n  watch(\r\n    () => unrefElement(target),\r\n    (ele) => {\r\n      width.value = ele ? initialSize.width : 0;\r\n      height.value = ele ? initialSize.height : 0;\r\n    }\r\n  );\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nfunction useIntersectionObserver(target, callback, options = {}) {\r\n  const {\r\n    root,\r\n    rootMargin = \"0px\",\r\n    threshold = 0.1,\r\n    window = defaultWindow,\r\n    immediate = true\r\n  } = options;\r\n  const isSupported = useSupported(() => window && \"IntersectionObserver\" in window);\r\n  const targets = computed(() => {\r\n    const _target = toValue(target);\r\n    return (Array.isArray(_target) ? _target : [_target]).map(unrefElement).filter(notNullish);\r\n  });\r\n  let cleanup = noop;\r\n  const isActive = ref(immediate);\r\n  const stopWatch = isSupported.value ? watch(\r\n    () => [targets.value, unrefElement(root), isActive.value],\r\n    ([targets2, root2]) => {\r\n      cleanup();\r\n      if (!isActive.value)\r\n        return;\r\n      if (!targets2.length)\r\n        return;\r\n      const observer = new IntersectionObserver(\r\n        callback,\r\n        {\r\n          root: unrefElement(root2),\r\n          rootMargin,\r\n          threshold\r\n        }\r\n      );\r\n      targets2.forEach((el) => el && observer.observe(el));\r\n      cleanup = () => {\r\n        observer.disconnect();\r\n        cleanup = noop;\r\n      };\r\n    },\r\n    { immediate, flush: \"post\" }\r\n  ) : noop;\r\n  const stop = () => {\r\n    cleanup();\r\n    stopWatch();\r\n    isActive.value = false;\r\n  };\r\n  tryOnScopeDispose(stop);\r\n  return {\r\n    isSupported,\r\n    isActive,\r\n    pause() {\r\n      cleanup();\r\n      isActive.value = false;\r\n    },\r\n    resume() {\r\n      isActive.value = true;\r\n    },\r\n    stop\r\n  };\r\n}\r\n\r\nfunction useElementVisibility(element, { window = defaultWindow, scrollTarget } = {}) {\r\n  const elementIsVisible = ref(false);\r\n  useIntersectionObserver(\r\n    element,\r\n    ([{ isIntersecting }]) => {\r\n      elementIsVisible.value = isIntersecting;\r\n    },\r\n    {\r\n      root: scrollTarget,\r\n      window\r\n    }\r\n  );\r\n  return elementIsVisible;\r\n}\r\n\r\nconst events = /* @__PURE__ */ new Map();\r\n\r\nfunction useEventBus(key) {\r\n  const scope = getCurrentScope();\r\n  function on(listener) {\r\n    var _a;\r\n    const listeners = events.get(key) || /* @__PURE__ */ new Set();\r\n    listeners.add(listener);\r\n    events.set(key, listeners);\r\n    const _off = () => off(listener);\r\n    (_a = scope == null ? void 0 : scope.cleanups) == null ? void 0 : _a.push(_off);\r\n    return _off;\r\n  }\r\n  function once(listener) {\r\n    function _listener(...args) {\r\n      off(_listener);\r\n      listener(...args);\r\n    }\r\n    return on(_listener);\r\n  }\r\n  function off(listener) {\r\n    const listeners = events.get(key);\r\n    if (!listeners)\r\n      return;\r\n    listeners.delete(listener);\r\n    if (!listeners.size)\r\n      reset();\r\n  }\r\n  function reset() {\r\n    events.delete(key);\r\n  }\r\n  function emit(event, payload) {\r\n    var _a;\r\n    (_a = events.get(key)) == null ? void 0 : _a.forEach((v) => v(event, payload));\r\n  }\r\n  return { on, once, off, emit, reset };\r\n}\r\n\r\nfunction useEventSource(url, events = [], options = {}) {\r\n  const event = ref(null);\r\n  const data = ref(null);\r\n  const status = ref(\"CONNECTING\");\r\n  const eventSource = ref(null);\r\n  const error = shallowRef(null);\r\n  const {\r\n    withCredentials = false\r\n  } = options;\r\n  const close = () => {\r\n    if (eventSource.value) {\r\n      eventSource.value.close();\r\n      eventSource.value = null;\r\n      status.value = \"CLOSED\";\r\n    }\r\n  };\r\n  const es = new EventSource(url, { withCredentials });\r\n  eventSource.value = es;\r\n  es.onopen = () => {\r\n    status.value = \"OPEN\";\r\n    error.value = null;\r\n  };\r\n  es.onerror = (e) => {\r\n    status.value = \"CLOSED\";\r\n    error.value = e;\r\n  };\r\n  es.onmessage = (e) => {\r\n    event.value = null;\r\n    data.value = e.data;\r\n  };\r\n  for (const event_name of events) {\r\n    useEventListener(es, event_name, (e) => {\r\n      event.value = event_name;\r\n      data.value = e.data || null;\r\n    });\r\n  }\r\n  tryOnScopeDispose(() => {\r\n    close();\r\n  });\r\n  return {\r\n    eventSource,\r\n    event,\r\n    data,\r\n    status,\r\n    error,\r\n    close\r\n  };\r\n}\r\n\r\nfunction useEyeDropper(options = {}) {\r\n  const { initialValue = \"\" } = options;\r\n  const isSupported = useSupported(() => typeof window !== \"undefined\" && \"EyeDropper\" in window);\r\n  const sRGBHex = ref(initialValue);\r\n  async function open(openOptions) {\r\n    if (!isSupported.value)\r\n      return;\r\n    const eyeDropper = new window.EyeDropper();\r\n    const result = await eyeDropper.open(openOptions);\r\n    sRGBHex.value = result.sRGBHex;\r\n    return result;\r\n  }\r\n  return { isSupported, sRGBHex, open };\r\n}\r\n\r\nfunction useFavicon(newIcon = null, options = {}) {\r\n  const {\r\n    baseUrl = \"\",\r\n    rel = \"icon\",\r\n    document = defaultDocument\r\n  } = options;\r\n  const favicon = toRef(newIcon);\r\n  const applyIcon = (icon) => {\r\n    document == null ? void 0 : document.head.querySelectorAll(`link[rel*=\"${rel}\"]`).forEach((el) => el.href = `${baseUrl}${icon}`);\r\n  };\r\n  watch(\r\n    favicon,\r\n    (i, o) => {\r\n      if (typeof i === \"string\" && i !== o)\r\n        applyIcon(i);\r\n    },\r\n    { immediate: true }\r\n  );\r\n  return favicon;\r\n}\r\n\r\nvar __defProp$e = Object.defineProperty;\r\nvar __defProps$5 = Object.defineProperties;\r\nvar __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$f = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$f = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$f = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$e = (obj, key, value) => key in obj ? __defProp$e(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$e = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$f.call(b, prop))\r\n      __defNormalProp$e(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$f)\r\n    for (var prop of __getOwnPropSymbols$f(b)) {\r\n      if (__propIsEnum$f.call(b, prop))\r\n        __defNormalProp$e(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$5 = (a, b) => __defProps$5(a, __getOwnPropDescs$5(b));\r\nconst payloadMapping = {\r\n  json: \"application/json\",\r\n  text: \"text/plain\"\r\n};\r\nfunction isFetchOptions(obj) {\r\n  return obj && containsProp(obj, \"immediate\", \"refetch\", \"initialData\", \"timeout\", \"beforeFetch\", \"afterFetch\", \"onFetchError\", \"fetch\");\r\n}\r\nfunction isAbsoluteURL(url) {\r\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\r\n}\r\nfunction headersToObject(headers) {\r\n  if (typeof Headers !== \"undefined\" && headers instanceof Headers)\r\n    return Object.fromEntries([...headers.entries()]);\r\n  return headers;\r\n}\r\nfunction combineCallbacks(combination, ...callbacks) {\r\n  if (combination === \"overwrite\") {\r\n    return async (ctx) => {\r\n      const callback = callbacks[callbacks.length - 1];\r\n      if (callback)\r\n        return __spreadValues$e(__spreadValues$e({}, ctx), await callback(ctx));\r\n      return ctx;\r\n    };\r\n  } else {\r\n    return async (ctx) => {\r\n      for (const callback of callbacks) {\r\n        if (callback)\r\n          ctx = __spreadValues$e(__spreadValues$e({}, ctx), await callback(ctx));\r\n      }\r\n      return ctx;\r\n    };\r\n  }\r\n}\r\nfunction createFetch(config = {}) {\r\n  const _combination = config.combination || \"chain\";\r\n  const _options = config.options || {};\r\n  const _fetchOptions = config.fetchOptions || {};\r\n  function useFactoryFetch(url, ...args) {\r\n    const computedUrl = computed(() => {\r\n      const baseUrl = toValue(config.baseUrl);\r\n      const targetUrl = toValue(url);\r\n      return baseUrl && !isAbsoluteURL(targetUrl) ? joinPaths(baseUrl, targetUrl) : targetUrl;\r\n    });\r\n    let options = _options;\r\n    let fetchOptions = _fetchOptions;\r\n    if (args.length > 0) {\r\n      if (isFetchOptions(args[0])) {\r\n        options = __spreadProps$5(__spreadValues$e(__spreadValues$e({}, options), args[0]), {\r\n          beforeFetch: combineCallbacks(_combination, _options.beforeFetch, args[0].beforeFetch),\r\n          afterFetch: combineCallbacks(_combination, _options.afterFetch, args[0].afterFetch),\r\n          onFetchError: combineCallbacks(_combination, _options.onFetchError, args[0].onFetchError)\r\n        });\r\n      } else {\r\n        fetchOptions = __spreadProps$5(__spreadValues$e(__spreadValues$e({}, fetchOptions), args[0]), {\r\n          headers: __spreadValues$e(__spreadValues$e({}, headersToObject(fetchOptions.headers) || {}), headersToObject(args[0].headers) || {})\r\n        });\r\n      }\r\n    }\r\n    if (args.length > 1 && isFetchOptions(args[1])) {\r\n      options = __spreadProps$5(__spreadValues$e(__spreadValues$e({}, options), args[1]), {\r\n        beforeFetch: combineCallbacks(_combination, _options.beforeFetch, args[1].beforeFetch),\r\n        afterFetch: combineCallbacks(_combination, _options.afterFetch, args[1].afterFetch),\r\n        onFetchError: combineCallbacks(_combination, _options.onFetchError, args[1].onFetchError)\r\n      });\r\n    }\r\n    return useFetch(computedUrl, fetchOptions, options);\r\n  }\r\n  return useFactoryFetch;\r\n}\r\nfunction useFetch(url, ...args) {\r\n  var _a;\r\n  const supportsAbort = typeof AbortController === \"function\";\r\n  let fetchOptions = {};\r\n  let options = { immediate: true, refetch: false, timeout: 0 };\r\n  const config = {\r\n    method: \"GET\",\r\n    type: \"text\",\r\n    payload: void 0\r\n  };\r\n  if (args.length > 0) {\r\n    if (isFetchOptions(args[0]))\r\n      options = __spreadValues$e(__spreadValues$e({}, options), args[0]);\r\n    else\r\n      fetchOptions = args[0];\r\n  }\r\n  if (args.length > 1) {\r\n    if (isFetchOptions(args[1]))\r\n      options = __spreadValues$e(__spreadValues$e({}, options), args[1]);\r\n  }\r\n  const {\r\n    fetch = (_a = defaultWindow) == null ? void 0 : _a.fetch,\r\n    initialData,\r\n    timeout\r\n  } = options;\r\n  const responseEvent = createEventHook();\r\n  const errorEvent = createEventHook();\r\n  const finallyEvent = createEventHook();\r\n  const isFinished = ref(false);\r\n  const isFetching = ref(false);\r\n  const aborted = ref(false);\r\n  const statusCode = ref(null);\r\n  const response = shallowRef(null);\r\n  const error = shallowRef(null);\r\n  const data = shallowRef(initialData || null);\r\n  const canAbort = computed(() => supportsAbort && isFetching.value);\r\n  let controller;\r\n  let timer;\r\n  const abort = () => {\r\n    if (supportsAbort) {\r\n      controller == null ? void 0 : controller.abort();\r\n      controller = new AbortController();\r\n      controller.signal.onabort = () => aborted.value = true;\r\n      fetchOptions = __spreadProps$5(__spreadValues$e({}, fetchOptions), {\r\n        signal: controller.signal\r\n      });\r\n    }\r\n  };\r\n  const loading = (isLoading) => {\r\n    isFetching.value = isLoading;\r\n    isFinished.value = !isLoading;\r\n  };\r\n  if (timeout)\r\n    timer = useTimeoutFn(abort, timeout, { immediate: false });\r\n  const execute = async (throwOnFailed = false) => {\r\n    var _a2;\r\n    abort();\r\n    loading(true);\r\n    error.value = null;\r\n    statusCode.value = null;\r\n    aborted.value = false;\r\n    const defaultFetchOptions = {\r\n      method: config.method,\r\n      headers: {}\r\n    };\r\n    if (config.payload) {\r\n      const headers = headersToObject(defaultFetchOptions.headers);\r\n      if (config.payloadType)\r\n        headers[\"Content-Type\"] = (_a2 = payloadMapping[config.payloadType]) != null ? _a2 : config.payloadType;\r\n      const payload = toValue(config.payload);\r\n      defaultFetchOptions.body = config.payloadType === \"json\" ? JSON.stringify(payload) : payload;\r\n    }\r\n    let isCanceled = false;\r\n    const context = {\r\n      url: toValue(url),\r\n      options: __spreadValues$e(__spreadValues$e({}, defaultFetchOptions), fetchOptions),\r\n      cancel: () => {\r\n        isCanceled = true;\r\n      }\r\n    };\r\n    if (options.beforeFetch)\r\n      Object.assign(context, await options.beforeFetch(context));\r\n    if (isCanceled || !fetch) {\r\n      loading(false);\r\n      return Promise.resolve(null);\r\n    }\r\n    let responseData = null;\r\n    if (timer)\r\n      timer.start();\r\n    return new Promise((resolve, reject) => {\r\n      var _a3;\r\n      fetch(\r\n        context.url,\r\n        __spreadProps$5(__spreadValues$e(__spreadValues$e({}, defaultFetchOptions), context.options), {\r\n          headers: __spreadValues$e(__spreadValues$e({}, headersToObject(defaultFetchOptions.headers)), headersToObject((_a3 = context.options) == null ? void 0 : _a3.headers))\r\n        })\r\n      ).then(async (fetchResponse) => {\r\n        response.value = fetchResponse;\r\n        statusCode.value = fetchResponse.status;\r\n        responseData = await fetchResponse[config.type]();\r\n        if (!fetchResponse.ok) {\r\n          data.value = initialData || null;\r\n          throw new Error(fetchResponse.statusText);\r\n        }\r\n        if (options.afterFetch)\r\n          ({ data: responseData } = await options.afterFetch({ data: responseData, response: fetchResponse }));\r\n        data.value = responseData;\r\n        responseEvent.trigger(fetchResponse);\r\n        return resolve(fetchResponse);\r\n      }).catch(async (fetchError) => {\r\n        let errorData = fetchError.message || fetchError.name;\r\n        if (options.onFetchError)\r\n          ({ error: errorData } = await options.onFetchError({ data: responseData, error: fetchError, response: response.value }));\r\n        error.value = errorData;\r\n        errorEvent.trigger(fetchError);\r\n        if (throwOnFailed)\r\n          return reject(fetchError);\r\n        return resolve(null);\r\n      }).finally(() => {\r\n        loading(false);\r\n        if (timer)\r\n          timer.stop();\r\n        finallyEvent.trigger(null);\r\n      });\r\n    });\r\n  };\r\n  const refetch = toRef(options.refetch);\r\n  watch(\r\n    [\r\n      refetch,\r\n      toRef(url)\r\n    ],\r\n    ([refetch2]) => refetch2 && execute(),\r\n    { deep: true }\r\n  );\r\n  const shell = {\r\n    isFinished,\r\n    statusCode,\r\n    response,\r\n    error,\r\n    data,\r\n    isFetching,\r\n    canAbort,\r\n    aborted,\r\n    abort,\r\n    execute,\r\n    onFetchResponse: responseEvent.on,\r\n    onFetchError: errorEvent.on,\r\n    onFetchFinally: finallyEvent.on,\r\n    // method\r\n    get: setMethod(\"GET\"),\r\n    put: setMethod(\"PUT\"),\r\n    post: setMethod(\"POST\"),\r\n    delete: setMethod(\"DELETE\"),\r\n    patch: setMethod(\"PATCH\"),\r\n    head: setMethod(\"HEAD\"),\r\n    options: setMethod(\"OPTIONS\"),\r\n    // type\r\n    json: setType(\"json\"),\r\n    text: setType(\"text\"),\r\n    blob: setType(\"blob\"),\r\n    arrayBuffer: setType(\"arrayBuffer\"),\r\n    formData: setType(\"formData\")\r\n  };\r\n  function setMethod(method) {\r\n    return (payload, payloadType) => {\r\n      if (!isFetching.value) {\r\n        config.method = method;\r\n        config.payload = payload;\r\n        config.payloadType = payloadType;\r\n        if (isRef(config.payload)) {\r\n          watch(\r\n            [\r\n              refetch,\r\n              toRef(config.payload)\r\n            ],\r\n            ([refetch2]) => refetch2 && execute(),\r\n            { deep: true }\r\n          );\r\n        }\r\n        const rawPayload = toValue(config.payload);\r\n        if (!payloadType && rawPayload && Object.getPrototypeOf(rawPayload) === Object.prototype && !(rawPayload instanceof FormData))\r\n          config.payloadType = \"json\";\r\n        return __spreadProps$5(__spreadValues$e({}, shell), {\r\n          then(onFulfilled, onRejected) {\r\n            return waitUntilFinished().then(onFulfilled, onRejected);\r\n          }\r\n        });\r\n      }\r\n      return void 0;\r\n    };\r\n  }\r\n  function waitUntilFinished() {\r\n    return new Promise((resolve, reject) => {\r\n      until(isFinished).toBe(true).then(() => resolve(shell)).catch((error2) => reject(error2));\r\n    });\r\n  }\r\n  function setType(type) {\r\n    return () => {\r\n      if (!isFetching.value) {\r\n        config.type = type;\r\n        return __spreadProps$5(__spreadValues$e({}, shell), {\r\n          then(onFulfilled, onRejected) {\r\n            return waitUntilFinished().then(onFulfilled, onRejected);\r\n          }\r\n        });\r\n      }\r\n      return void 0;\r\n    };\r\n  }\r\n  if (options.immediate)\r\n    Promise.resolve().then(() => execute());\r\n  return __spreadProps$5(__spreadValues$e({}, shell), {\r\n    then(onFulfilled, onRejected) {\r\n      return waitUntilFinished().then(onFulfilled, onRejected);\r\n    }\r\n  });\r\n}\r\nfunction joinPaths(start, end) {\r\n  if (!start.endsWith(\"/\") && !end.startsWith(\"/\"))\r\n    return `${start}/${end}`;\r\n  return `${start}${end}`;\r\n}\r\n\r\nvar __defProp$d = Object.defineProperty;\r\nvar __getOwnPropSymbols$e = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$e = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$e = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$d = (obj, key, value) => key in obj ? __defProp$d(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$d = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$e.call(b, prop))\r\n      __defNormalProp$d(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$e)\r\n    for (var prop of __getOwnPropSymbols$e(b)) {\r\n      if (__propIsEnum$e.call(b, prop))\r\n        __defNormalProp$d(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nconst DEFAULT_OPTIONS = {\r\n  multiple: true,\r\n  accept: \"*\",\r\n  reset: false\r\n};\r\nfunction useFileDialog(options = {}) {\r\n  const {\r\n    document = defaultDocument\r\n  } = options;\r\n  const files = ref(null);\r\n  const { on: onChange, trigger } = createEventHook();\r\n  let input;\r\n  if (document) {\r\n    input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.onchange = (event) => {\r\n      const result = event.target;\r\n      files.value = result.files;\r\n      trigger(files.value);\r\n    };\r\n  }\r\n  const reset = () => {\r\n    files.value = null;\r\n    if (input)\r\n      input.value = \"\";\r\n  };\r\n  const open = (localOptions) => {\r\n    if (!input)\r\n      return;\r\n    const _options = __spreadValues$d(__spreadValues$d(__spreadValues$d({}, DEFAULT_OPTIONS), options), localOptions);\r\n    input.multiple = _options.multiple;\r\n    input.accept = _options.accept;\r\n    if (hasOwn(_options, \"capture\"))\r\n      input.capture = _options.capture;\r\n    if (_options.reset)\r\n      reset();\r\n    input.click();\r\n  };\r\n  return {\r\n    files: readonly(files),\r\n    open,\r\n    reset,\r\n    onChange\r\n  };\r\n}\r\n\r\nvar __defProp$c = Object.defineProperty;\r\nvar __getOwnPropSymbols$d = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$d = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$d = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$c = (obj, key, value) => key in obj ? __defProp$c(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$c = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$d.call(b, prop))\r\n      __defNormalProp$c(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$d)\r\n    for (var prop of __getOwnPropSymbols$d(b)) {\r\n      if (__propIsEnum$d.call(b, prop))\r\n        __defNormalProp$c(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useFileSystemAccess(options = {}) {\r\n  const {\r\n    window: _window = defaultWindow,\r\n    dataType = \"Text\"\r\n  } = options;\r\n  const window = _window;\r\n  const isSupported = useSupported(() => window && \"showSaveFilePicker\" in window && \"showOpenFilePicker\" in window);\r\n  const fileHandle = ref();\r\n  const data = ref();\r\n  const file = ref();\r\n  const fileName = computed(() => {\r\n    var _a, _b;\r\n    return (_b = (_a = file.value) == null ? void 0 : _a.name) != null ? _b : \"\";\r\n  });\r\n  const fileMIME = computed(() => {\r\n    var _a, _b;\r\n    return (_b = (_a = file.value) == null ? void 0 : _a.type) != null ? _b : \"\";\r\n  });\r\n  const fileSize = computed(() => {\r\n    var _a, _b;\r\n    return (_b = (_a = file.value) == null ? void 0 : _a.size) != null ? _b : 0;\r\n  });\r\n  const fileLastModified = computed(() => {\r\n    var _a, _b;\r\n    return (_b = (_a = file.value) == null ? void 0 : _a.lastModified) != null ? _b : 0;\r\n  });\r\n  async function open(_options = {}) {\r\n    if (!isSupported.value)\r\n      return;\r\n    const [handle] = await window.showOpenFilePicker(__spreadValues$c(__spreadValues$c({}, toValue(options)), _options));\r\n    fileHandle.value = handle;\r\n    await updateFile();\r\n    await updateData();\r\n  }\r\n  async function create(_options = {}) {\r\n    if (!isSupported.value)\r\n      return;\r\n    fileHandle.value = await window.showSaveFilePicker(__spreadValues$c(__spreadValues$c({}, options), _options));\r\n    data.value = void 0;\r\n    await updateFile();\r\n    await updateData();\r\n  }\r\n  async function save(_options = {}) {\r\n    if (!isSupported.value)\r\n      return;\r\n    if (!fileHandle.value)\r\n      return saveAs(_options);\r\n    if (data.value) {\r\n      const writableStream = await fileHandle.value.createWritable();\r\n      await writableStream.write(data.value);\r\n      await writableStream.close();\r\n    }\r\n    await updateFile();\r\n  }\r\n  async function saveAs(_options = {}) {\r\n    if (!isSupported.value)\r\n      return;\r\n    fileHandle.value = await window.showSaveFilePicker(__spreadValues$c(__spreadValues$c({}, options), _options));\r\n    if (data.value) {\r\n      const writableStream = await fileHandle.value.createWritable();\r\n      await writableStream.write(data.value);\r\n      await writableStream.close();\r\n    }\r\n    await updateFile();\r\n  }\r\n  async function updateFile() {\r\n    var _a;\r\n    file.value = await ((_a = fileHandle.value) == null ? void 0 : _a.getFile());\r\n  }\r\n  async function updateData() {\r\n    var _a, _b;\r\n    const type = toValue(dataType);\r\n    if (type === \"Text\")\r\n      data.value = await ((_a = file.value) == null ? void 0 : _a.text());\r\n    else if (type === \"ArrayBuffer\")\r\n      data.value = await ((_b = file.value) == null ? void 0 : _b.arrayBuffer());\r\n    else if (type === \"Blob\")\r\n      data.value = file.value;\r\n  }\r\n  watch(() => toValue(dataType), updateData);\r\n  return {\r\n    isSupported,\r\n    data,\r\n    file,\r\n    fileName,\r\n    fileMIME,\r\n    fileSize,\r\n    fileLastModified,\r\n    open,\r\n    create,\r\n    save,\r\n    saveAs,\r\n    updateData\r\n  };\r\n}\r\n\r\nfunction useFocus(target, options = {}) {\r\n  const { initialValue = false } = options;\r\n  const innerFocused = ref(false);\r\n  const targetElement = computed(() => unrefElement(target));\r\n  useEventListener(targetElement, \"focus\", () => innerFocused.value = true);\r\n  useEventListener(targetElement, \"blur\", () => innerFocused.value = false);\r\n  const focused = computed({\r\n    get: () => innerFocused.value,\r\n    set(value) {\r\n      var _a, _b;\r\n      if (!value && innerFocused.value)\r\n        (_a = targetElement.value) == null ? void 0 : _a.blur();\r\n      else if (value && !innerFocused.value)\r\n        (_b = targetElement.value) == null ? void 0 : _b.focus();\r\n    }\r\n  });\r\n  watch(\r\n    targetElement,\r\n    () => {\r\n      focused.value = initialValue;\r\n    },\r\n    { immediate: true, flush: \"post\" }\r\n  );\r\n  return { focused };\r\n}\r\n\r\nfunction useFocusWithin(target, options = {}) {\r\n  const activeElement = useActiveElement(options);\r\n  const targetElement = computed(() => unrefElement(target));\r\n  const focused = computed(() => targetElement.value && activeElement.value ? targetElement.value.contains(activeElement.value) : false);\r\n  return { focused };\r\n}\r\n\r\nfunction useFps(options) {\r\n  var _a;\r\n  const fps = ref(0);\r\n  if (typeof performance === \"undefined\")\r\n    return fps;\r\n  const every = (_a = options == null ? void 0 : options.every) != null ? _a : 10;\r\n  let last = performance.now();\r\n  let ticks = 0;\r\n  useRafFn(() => {\r\n    ticks += 1;\r\n    if (ticks >= every) {\r\n      const now = performance.now();\r\n      const diff = now - last;\r\n      fps.value = Math.round(1e3 / (diff / ticks));\r\n      last = now;\r\n      ticks = 0;\r\n    }\r\n  });\r\n  return fps;\r\n}\r\n\r\nconst eventHandlers = [\r\n  \"fullscreenchange\",\r\n  \"webkitfullscreenchange\",\r\n  \"webkitendfullscreen\",\r\n  \"mozfullscreenchange\",\r\n  \"MSFullscreenChange\"\r\n];\r\nfunction useFullscreen(target, options = {}) {\r\n  const {\r\n    document = defaultDocument,\r\n    autoExit = false\r\n  } = options;\r\n  const targetRef = computed(() => {\r\n    var _a;\r\n    return (_a = unrefElement(target)) != null ? _a : document == null ? void 0 : document.querySelector(\"html\");\r\n  });\r\n  const isFullscreen = ref(false);\r\n  const requestMethod = computed(() => {\r\n    return [\r\n      \"requestFullscreen\",\r\n      \"webkitRequestFullscreen\",\r\n      \"webkitEnterFullscreen\",\r\n      \"webkitEnterFullScreen\",\r\n      \"webkitRequestFullScreen\",\r\n      \"mozRequestFullScreen\",\r\n      \"msRequestFullscreen\"\r\n    ].find((m) => document && m in document || targetRef.value && m in targetRef.value);\r\n  });\r\n  const exitMethod = computed(() => {\r\n    return [\r\n      \"exitFullscreen\",\r\n      \"webkitExitFullscreen\",\r\n      \"webkitExitFullScreen\",\r\n      \"webkitCancelFullScreen\",\r\n      \"mozCancelFullScreen\",\r\n      \"msExitFullscreen\"\r\n    ].find((m) => document && m in document || targetRef.value && m in targetRef.value);\r\n  });\r\n  const fullscreenEnabled = computed(() => {\r\n    return [\r\n      \"fullScreen\",\r\n      \"webkitIsFullScreen\",\r\n      \"webkitDisplayingFullscreen\",\r\n      \"mozFullScreen\",\r\n      \"msFullscreenElement\"\r\n    ].find((m) => document && m in document || targetRef.value && m in targetRef.value);\r\n  });\r\n  const fullscreenElementMethod = [\r\n    \"fullscreenElement\",\r\n    \"webkitFullscreenElement\",\r\n    \"mozFullScreenElement\",\r\n    \"msFullscreenElement\"\r\n  ].find((m) => document && m in document);\r\n  const isSupported = useSupported(\r\n    () => targetRef.value && document && requestMethod.value !== void 0 && exitMethod.value !== void 0 && fullscreenEnabled.value !== void 0\r\n  );\r\n  const isCurrentElementFullScreen = () => {\r\n    if (fullscreenElementMethod)\r\n      return (document == null ? void 0 : document[fullscreenElementMethod]) === targetRef.value;\r\n    return false;\r\n  };\r\n  const isElementFullScreen = () => {\r\n    if (fullscreenEnabled.value) {\r\n      if (document && document[fullscreenEnabled.value] != null) {\r\n        return document[fullscreenEnabled.value];\r\n      } else {\r\n        const target2 = targetRef.value;\r\n        if ((target2 == null ? void 0 : target2[fullscreenEnabled.value]) != null) {\r\n          return Boolean(target2[fullscreenEnabled.value]);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  async function exit() {\r\n    if (!isSupported.value || !isFullscreen.value)\r\n      return;\r\n    if (exitMethod.value) {\r\n      if ((document == null ? void 0 : document[exitMethod.value]) != null) {\r\n        await document[exitMethod.value]();\r\n      } else {\r\n        const target2 = targetRef.value;\r\n        if ((target2 == null ? void 0 : target2[exitMethod.value]) != null)\r\n          await target2[exitMethod.value]();\r\n      }\r\n    }\r\n    isFullscreen.value = false;\r\n  }\r\n  async function enter() {\r\n    if (!isSupported.value || isFullscreen.value)\r\n      return;\r\n    if (isElementFullScreen())\r\n      await exit();\r\n    const target2 = targetRef.value;\r\n    if (requestMethod.value && (target2 == null ? void 0 : target2[requestMethod.value]) != null) {\r\n      await target2[requestMethod.value]();\r\n      isFullscreen.value = true;\r\n    }\r\n  }\r\n  async function toggle() {\r\n    await (isFullscreen.value ? exit() : enter());\r\n  }\r\n  const handlerCallback = () => {\r\n    const isElementFullScreenValue = isElementFullScreen();\r\n    if (!isElementFullScreenValue || isElementFullScreenValue && isCurrentElementFullScreen())\r\n      isFullscreen.value = isElementFullScreenValue;\r\n  };\r\n  useEventListener(document, eventHandlers, handlerCallback, false);\r\n  useEventListener(() => unrefElement(targetRef), eventHandlers, handlerCallback, false);\r\n  if (autoExit)\r\n    tryOnScopeDispose(exit);\r\n  return {\r\n    isSupported,\r\n    isFullscreen,\r\n    enter,\r\n    exit,\r\n    toggle\r\n  };\r\n}\r\n\r\nvar __defProp$b = Object.defineProperty;\r\nvar __defProps$4 = Object.defineProperties;\r\nvar __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$c = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$c = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$c = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$b = (obj, key, value) => key in obj ? __defProp$b(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$b = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$c.call(b, prop))\r\n      __defNormalProp$b(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$c)\r\n    for (var prop of __getOwnPropSymbols$c(b)) {\r\n      if (__propIsEnum$c.call(b, prop))\r\n        __defNormalProp$b(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));\r\nfunction mapGamepadToXbox360Controller(gamepad) {\r\n  return computed(() => {\r\n    if (gamepad.value) {\r\n      return {\r\n        buttons: {\r\n          a: gamepad.value.buttons[0],\r\n          b: gamepad.value.buttons[1],\r\n          x: gamepad.value.buttons[2],\r\n          y: gamepad.value.buttons[3]\r\n        },\r\n        bumper: {\r\n          left: gamepad.value.buttons[4],\r\n          right: gamepad.value.buttons[5]\r\n        },\r\n        triggers: {\r\n          left: gamepad.value.buttons[6],\r\n          right: gamepad.value.buttons[7]\r\n        },\r\n        stick: {\r\n          left: {\r\n            horizontal: gamepad.value.axes[0],\r\n            vertical: gamepad.value.axes[1],\r\n            button: gamepad.value.buttons[10]\r\n          },\r\n          right: {\r\n            horizontal: gamepad.value.axes[2],\r\n            vertical: gamepad.value.axes[3],\r\n            button: gamepad.value.buttons[11]\r\n          }\r\n        },\r\n        dpad: {\r\n          up: gamepad.value.buttons[12],\r\n          down: gamepad.value.buttons[13],\r\n          left: gamepad.value.buttons[14],\r\n          right: gamepad.value.buttons[15]\r\n        },\r\n        back: gamepad.value.buttons[8],\r\n        start: gamepad.value.buttons[9]\r\n      };\r\n    }\r\n    return null;\r\n  });\r\n}\r\nfunction useGamepad(options = {}) {\r\n  const {\r\n    navigator = defaultNavigator\r\n  } = options;\r\n  const isSupported = useSupported(() => navigator && \"getGamepads\" in navigator);\r\n  const gamepads = ref([]);\r\n  const onConnectedHook = createEventHook();\r\n  const onDisconnectedHook = createEventHook();\r\n  const stateFromGamepad = (gamepad) => {\r\n    const hapticActuators = [];\r\n    const vibrationActuator = \"vibrationActuator\" in gamepad ? gamepad.vibrationActuator : null;\r\n    if (vibrationActuator)\r\n      hapticActuators.push(vibrationActuator);\r\n    if (gamepad.hapticActuators)\r\n      hapticActuators.push(...gamepad.hapticActuators);\r\n    return __spreadProps$4(__spreadValues$b({}, gamepad), {\r\n      id: gamepad.id,\r\n      hapticActuators,\r\n      axes: gamepad.axes.map((axes) => axes),\r\n      buttons: gamepad.buttons.map((button) => ({ pressed: button.pressed, touched: button.touched, value: button.value }))\r\n    });\r\n  };\r\n  const updateGamepadState = () => {\r\n    const _gamepads = (navigator == null ? void 0 : navigator.getGamepads()) || [];\r\n    for (let i = 0; i < _gamepads.length; ++i) {\r\n      const gamepad = _gamepads[i];\r\n      if (gamepad) {\r\n        const index = gamepads.value.findIndex(({ index: index2 }) => index2 === gamepad.index);\r\n        if (index > -1)\r\n          gamepads.value[index] = stateFromGamepad(gamepad);\r\n      }\r\n    }\r\n  };\r\n  const { isActive, pause, resume } = useRafFn(updateGamepadState);\r\n  const onGamepadConnected = (gamepad) => {\r\n    if (!gamepads.value.some(({ index }) => index === gamepad.index)) {\r\n      gamepads.value.push(stateFromGamepad(gamepad));\r\n      onConnectedHook.trigger(gamepad.index);\r\n    }\r\n    resume();\r\n  };\r\n  const onGamepadDisconnected = (gamepad) => {\r\n    gamepads.value = gamepads.value.filter((x) => x.index !== gamepad.index);\r\n    onDisconnectedHook.trigger(gamepad.index);\r\n  };\r\n  useEventListener(\"gamepadconnected\", (e) => onGamepadConnected(e.gamepad));\r\n  useEventListener(\"gamepaddisconnected\", (e) => onGamepadDisconnected(e.gamepad));\r\n  tryOnMounted(() => {\r\n    const _gamepads = (navigator == null ? void 0 : navigator.getGamepads()) || [];\r\n    if (_gamepads) {\r\n      for (let i = 0; i < _gamepads.length; ++i) {\r\n        const gamepad = _gamepads[i];\r\n        if (gamepad)\r\n          onGamepadConnected(gamepad);\r\n      }\r\n    }\r\n  });\r\n  pause();\r\n  return {\r\n    isSupported,\r\n    onConnected: onConnectedHook.on,\r\n    onDisconnected: onDisconnectedHook.on,\r\n    gamepads,\r\n    pause,\r\n    resume,\r\n    isActive\r\n  };\r\n}\r\n\r\nfunction useGeolocation(options = {}) {\r\n  const {\r\n    enableHighAccuracy = true,\r\n    maximumAge = 3e4,\r\n    timeout = 27e3,\r\n    navigator = defaultNavigator,\r\n    immediate = true\r\n  } = options;\r\n  const isSupported = useSupported(() => navigator && \"geolocation\" in navigator);\r\n  const locatedAt = ref(null);\r\n  const error = shallowRef(null);\r\n  const coords = ref({\r\n    accuracy: 0,\r\n    latitude: Infinity,\r\n    longitude: Infinity,\r\n    altitude: null,\r\n    altitudeAccuracy: null,\r\n    heading: null,\r\n    speed: null\r\n  });\r\n  function updatePosition(position) {\r\n    locatedAt.value = position.timestamp;\r\n    coords.value = position.coords;\r\n    error.value = null;\r\n  }\r\n  let watcher;\r\n  function resume() {\r\n    if (isSupported.value) {\r\n      watcher = navigator.geolocation.watchPosition(\r\n        updatePosition,\r\n        (err) => error.value = err,\r\n        {\r\n          enableHighAccuracy,\r\n          maximumAge,\r\n          timeout\r\n        }\r\n      );\r\n    }\r\n  }\r\n  if (immediate)\r\n    resume();\r\n  function pause() {\r\n    if (watcher && navigator)\r\n      navigator.geolocation.clearWatch(watcher);\r\n  }\r\n  tryOnScopeDispose(() => {\r\n    pause();\r\n  });\r\n  return {\r\n    isSupported,\r\n    coords,\r\n    locatedAt,\r\n    error,\r\n    resume,\r\n    pause\r\n  };\r\n}\r\n\r\nconst defaultEvents$1 = [\"mousemove\", \"mousedown\", \"resize\", \"keydown\", \"touchstart\", \"wheel\"];\r\nconst oneMinute = 6e4;\r\nfunction useIdle(timeout = oneMinute, options = {}) {\r\n  const {\r\n    initialState = false,\r\n    listenForVisibilityChange = true,\r\n    events = defaultEvents$1,\r\n    window = defaultWindow,\r\n    eventFilter = throttleFilter(50)\r\n  } = options;\r\n  const idle = ref(initialState);\r\n  const lastActive = ref(timestamp());\r\n  let timer;\r\n  const reset = () => {\r\n    idle.value = false;\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => idle.value = true, timeout);\r\n  };\r\n  const onEvent = createFilterWrapper(\r\n    eventFilter,\r\n    () => {\r\n      lastActive.value = timestamp();\r\n      reset();\r\n    }\r\n  );\r\n  if (window) {\r\n    const document = window.document;\r\n    for (const event of events)\r\n      useEventListener(window, event, onEvent, { passive: true });\r\n    if (listenForVisibilityChange) {\r\n      useEventListener(document, \"visibilitychange\", () => {\r\n        if (!document.hidden)\r\n          onEvent();\r\n      });\r\n    }\r\n    reset();\r\n  }\r\n  return {\r\n    idle,\r\n    lastActive,\r\n    reset\r\n  };\r\n}\r\n\r\nvar __defProp$a = Object.defineProperty;\r\nvar __getOwnPropSymbols$b = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$b = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$b = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$a = (obj, key, value) => key in obj ? __defProp$a(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$a = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$b.call(b, prop))\r\n      __defNormalProp$a(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$b)\r\n    for (var prop of __getOwnPropSymbols$b(b)) {\r\n      if (__propIsEnum$b.call(b, prop))\r\n        __defNormalProp$a(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nasync function loadImage(options) {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    const { src, srcset, sizes, class: clazz, loading, crossorigin, referrerPolicy } = options;\r\n    img.src = src;\r\n    if (srcset)\r\n      img.srcset = srcset;\r\n    if (sizes)\r\n      img.sizes = sizes;\r\n    if (clazz)\r\n      img.className = clazz;\r\n    if (loading)\r\n      img.loading = loading;\r\n    if (crossorigin)\r\n      img.crossOrigin = crossorigin;\r\n    if (referrerPolicy)\r\n      img.referrerPolicy = referrerPolicy;\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\nfunction useImage(options, asyncStateOptions = {}) {\r\n  const state = useAsyncState(\r\n    () => loadImage(toValue(options)),\r\n    void 0,\r\n    __spreadValues$a({\r\n      resetOnExecute: true\r\n    }, asyncStateOptions)\r\n  );\r\n  watch(\r\n    () => toValue(options),\r\n    () => state.execute(asyncStateOptions.delay),\r\n    { deep: true }\r\n  );\r\n  return state;\r\n}\r\n\r\nconst ARRIVED_STATE_THRESHOLD_PIXELS = 1;\r\nfunction useScroll(element, options = {}) {\r\n  const {\r\n    throttle = 0,\r\n    idle = 200,\r\n    onStop = noop,\r\n    onScroll = noop,\r\n    offset = {\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0\r\n    },\r\n    eventListenerOptions = {\r\n      capture: false,\r\n      passive: true\r\n    },\r\n    behavior = \"auto\"\r\n  } = options;\r\n  const internalX = ref(0);\r\n  const internalY = ref(0);\r\n  const x = computed({\r\n    get() {\r\n      return internalX.value;\r\n    },\r\n    set(x2) {\r\n      scrollTo(x2, void 0);\r\n    }\r\n  });\r\n  const y = computed({\r\n    get() {\r\n      return internalY.value;\r\n    },\r\n    set(y2) {\r\n      scrollTo(void 0, y2);\r\n    }\r\n  });\r\n  function scrollTo(_x, _y) {\r\n    var _a, _b, _c;\r\n    const _element = toValue(element);\r\n    if (!_element)\r\n      return;\r\n    (_c = _element instanceof Document ? document.body : _element) == null ? void 0 : _c.scrollTo({\r\n      top: (_a = toValue(_y)) != null ? _a : y.value,\r\n      left: (_b = toValue(_x)) != null ? _b : x.value,\r\n      behavior: toValue(behavior)\r\n    });\r\n  }\r\n  const isScrolling = ref(false);\r\n  const arrivedState = reactive({\r\n    left: true,\r\n    right: false,\r\n    top: true,\r\n    bottom: false\r\n  });\r\n  const directions = reactive({\r\n    left: false,\r\n    right: false,\r\n    top: false,\r\n    bottom: false\r\n  });\r\n  const onScrollEnd = (e) => {\r\n    if (!isScrolling.value)\r\n      return;\r\n    isScrolling.value = false;\r\n    directions.left = false;\r\n    directions.right = false;\r\n    directions.top = false;\r\n    directions.bottom = false;\r\n    onStop(e);\r\n  };\r\n  const onScrollEndDebounced = useDebounceFn(onScrollEnd, throttle + idle);\r\n  const setArrivedState = (target) => {\r\n    const el = target === window ? target.document.documentElement : target === document ? target.documentElement : target;\r\n    const { display, flexDirection } = getComputedStyle(el);\r\n    const scrollLeft = el.scrollLeft;\r\n    directions.left = scrollLeft < internalX.value;\r\n    directions.right = scrollLeft > internalX.value;\r\n    const left = Math.abs(scrollLeft) <= 0 + (offset.left || 0);\r\n    const right = Math.abs(scrollLeft) + el.clientWidth >= el.scrollWidth - (offset.right || 0) - ARRIVED_STATE_THRESHOLD_PIXELS;\r\n    if (display === \"flex\" && flexDirection === \"row-reverse\") {\r\n      arrivedState.left = right;\r\n      arrivedState.right = left;\r\n    } else {\r\n      arrivedState.left = left;\r\n      arrivedState.right = right;\r\n    }\r\n    internalX.value = scrollLeft;\r\n    let scrollTop = el.scrollTop;\r\n    if (target === document && !scrollTop)\r\n      scrollTop = document.body.scrollTop;\r\n    directions.top = scrollTop < internalY.value;\r\n    directions.bottom = scrollTop > internalY.value;\r\n    const top = Math.abs(scrollTop) <= 0 + (offset.top || 0);\r\n    const bottom = Math.abs(scrollTop) + el.clientHeight >= el.scrollHeight - (offset.bottom || 0) - ARRIVED_STATE_THRESHOLD_PIXELS;\r\n    if (display === \"flex\" && flexDirection === \"column-reverse\") {\r\n      arrivedState.top = bottom;\r\n      arrivedState.bottom = top;\r\n    } else {\r\n      arrivedState.top = top;\r\n      arrivedState.bottom = bottom;\r\n    }\r\n    internalY.value = scrollTop;\r\n  };\r\n  const onScrollHandler = (e) => {\r\n    const eventTarget = e.target === document ? e.target.documentElement : e.target;\r\n    setArrivedState(eventTarget);\r\n    isScrolling.value = true;\r\n    onScrollEndDebounced(e);\r\n    onScroll(e);\r\n  };\r\n  useEventListener(\r\n    element,\r\n    \"scroll\",\r\n    throttle ? useThrottleFn(onScrollHandler, throttle, true, false) : onScrollHandler,\r\n    eventListenerOptions\r\n  );\r\n  useEventListener(\r\n    element,\r\n    \"scrollend\",\r\n    onScrollEnd,\r\n    eventListenerOptions\r\n  );\r\n  return {\r\n    x,\r\n    y,\r\n    isScrolling,\r\n    arrivedState,\r\n    directions,\r\n    measure() {\r\n      const _element = toValue(element);\r\n      if (_element)\r\n        setArrivedState(_element);\r\n    }\r\n  };\r\n}\r\n\r\nvar __defProp$9 = Object.defineProperty;\r\nvar __defProps$3 = Object.defineProperties;\r\nvar __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$a = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$a = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$a = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$9 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$a.call(b, prop))\r\n      __defNormalProp$9(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$a)\r\n    for (var prop of __getOwnPropSymbols$a(b)) {\r\n      if (__propIsEnum$a.call(b, prop))\r\n        __defNormalProp$9(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));\r\nfunction useInfiniteScroll(element, onLoadMore, options = {}) {\r\n  var _a;\r\n  const {\r\n    direction = \"bottom\",\r\n    interval = 100\r\n  } = options;\r\n  const state = reactive(useScroll(\r\n    element,\r\n    __spreadProps$3(__spreadValues$9({}, options), {\r\n      offset: __spreadValues$9({\r\n        [direction]: (_a = options.distance) != null ? _a : 0\r\n      }, options.offset)\r\n    })\r\n  ));\r\n  const promise = ref();\r\n  const isLoading = computed(() => !!promise.value);\r\n  function checkAndLoad() {\r\n    state.measure();\r\n    const el = toValue(element);\r\n    if (!el || !el.offsetParent)\r\n      return;\r\n    const isNarrower = direction === \"bottom\" || direction === \"top\" ? el.scrollHeight <= el.clientHeight : el.scrollWidth <= el.clientWidth;\r\n    if (state.arrivedState[direction] || isNarrower) {\r\n      if (!promise.value) {\r\n        promise.value = Promise.all([\r\n          onLoadMore(state),\r\n          new Promise((resolve) => setTimeout(resolve, interval))\r\n        ]).finally(() => {\r\n          promise.value = null;\r\n          nextTick(() => checkAndLoad());\r\n        });\r\n      }\r\n    }\r\n  }\r\n  watch(\r\n    () => [state.arrivedState[direction], toValue(element)],\r\n    checkAndLoad,\r\n    { immediate: true }\r\n  );\r\n  return {\r\n    isLoading\r\n  };\r\n}\r\n\r\nconst defaultEvents = [\"mousedown\", \"mouseup\", \"keydown\", \"keyup\"];\r\nfunction useKeyModifier(modifier, options = {}) {\r\n  const {\r\n    events = defaultEvents,\r\n    document = defaultDocument,\r\n    initial = null\r\n  } = options;\r\n  const state = ref(initial);\r\n  if (document) {\r\n    events.forEach((listenerEvent) => {\r\n      useEventListener(document, listenerEvent, (evt) => {\r\n        if (typeof evt.getModifierState === \"function\")\r\n          state.value = evt.getModifierState(modifier);\r\n      });\r\n    });\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction useLocalStorage(key, initialValue, options = {}) {\r\n  const { window = defaultWindow } = options;\r\n  return useStorage(key, initialValue, window == null ? void 0 : window.localStorage, options);\r\n}\r\n\r\nconst DefaultMagicKeysAliasMap = {\r\n  ctrl: \"control\",\r\n  command: \"meta\",\r\n  cmd: \"meta\",\r\n  option: \"alt\",\r\n  up: \"arrowup\",\r\n  down: \"arrowdown\",\r\n  left: \"arrowleft\",\r\n  right: \"arrowright\"\r\n};\r\n\r\nfunction useMagicKeys(options = {}) {\r\n  const {\r\n    reactive: useReactive = false,\r\n    target = defaultWindow,\r\n    aliasMap = DefaultMagicKeysAliasMap,\r\n    passive = true,\r\n    onEventFired = noop\r\n  } = options;\r\n  const current = reactive(/* @__PURE__ */ new Set());\r\n  const obj = {\r\n    toJSON() {\r\n      return {};\r\n    },\r\n    current\r\n  };\r\n  const refs = useReactive ? reactive(obj) : obj;\r\n  const metaDeps = /* @__PURE__ */ new Set();\r\n  const usedKeys = /* @__PURE__ */ new Set();\r\n  function setRefs(key, value) {\r\n    if (key in refs) {\r\n      if (useReactive)\r\n        refs[key] = value;\r\n      else\r\n        refs[key].value = value;\r\n    }\r\n  }\r\n  function reset() {\r\n    current.clear();\r\n    for (const key of usedKeys)\r\n      setRefs(key, false);\r\n  }\r\n  function updateRefs(e, value) {\r\n    var _a, _b;\r\n    const key = (_a = e.key) == null ? void 0 : _a.toLowerCase();\r\n    const code = (_b = e.code) == null ? void 0 : _b.toLowerCase();\r\n    const values = [code, key].filter(Boolean);\r\n    if (key) {\r\n      if (value)\r\n        current.add(key);\r\n      else\r\n        current.delete(key);\r\n    }\r\n    for (const key2 of values) {\r\n      usedKeys.add(key2);\r\n      setRefs(key2, value);\r\n    }\r\n    if (key === \"meta\" && !value) {\r\n      metaDeps.forEach((key2) => {\r\n        current.delete(key2);\r\n        setRefs(key2, false);\r\n      });\r\n      metaDeps.clear();\r\n    } else if (typeof e.getModifierState === \"function\" && e.getModifierState(\"Meta\") && value) {\r\n      [...current, ...values].forEach((key2) => metaDeps.add(key2));\r\n    }\r\n  }\r\n  useEventListener(target, \"keydown\", (e) => {\r\n    updateRefs(e, true);\r\n    return onEventFired(e);\r\n  }, { passive });\r\n  useEventListener(target, \"keyup\", (e) => {\r\n    updateRefs(e, false);\r\n    return onEventFired(e);\r\n  }, { passive });\r\n  useEventListener(\"blur\", reset, { passive: true });\r\n  useEventListener(\"focus\", reset, { passive: true });\r\n  const proxy = new Proxy(\r\n    refs,\r\n    {\r\n      get(target2, prop, rec) {\r\n        if (typeof prop !== \"string\")\r\n          return Reflect.get(target2, prop, rec);\r\n        prop = prop.toLowerCase();\r\n        if (prop in aliasMap)\r\n          prop = aliasMap[prop];\r\n        if (!(prop in refs)) {\r\n          if (/[+_-]/.test(prop)) {\r\n            const keys = prop.split(/[+_-]/g).map((i) => i.trim());\r\n            refs[prop] = computed(() => keys.every((key) => toValue(proxy[key])));\r\n          } else {\r\n            refs[prop] = ref(false);\r\n          }\r\n        }\r\n        const r = Reflect.get(target2, prop, rec);\r\n        return useReactive ? toValue(r) : r;\r\n      }\r\n    }\r\n  );\r\n  return proxy;\r\n}\r\n\r\nvar __defProp$8 = Object.defineProperty;\r\nvar __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$9 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$9 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$8 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$9.call(b, prop))\r\n      __defNormalProp$8(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$9)\r\n    for (var prop of __getOwnPropSymbols$9(b)) {\r\n      if (__propIsEnum$9.call(b, prop))\r\n        __defNormalProp$8(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction usingElRef(source, cb) {\r\n  if (toValue(source))\r\n    cb(toValue(source));\r\n}\r\nfunction timeRangeToArray(timeRanges) {\r\n  let ranges = [];\r\n  for (let i = 0; i < timeRanges.length; ++i)\r\n    ranges = [...ranges, [timeRanges.start(i), timeRanges.end(i)]];\r\n  return ranges;\r\n}\r\nfunction tracksToArray(tracks) {\r\n  return Array.from(tracks).map(({ label, kind, language, mode, activeCues, cues, inBandMetadataTrackDispatchType }, id) => ({ id, label, kind, language, mode, activeCues, cues, inBandMetadataTrackDispatchType }));\r\n}\r\nconst defaultOptions = {\r\n  src: \"\",\r\n  tracks: []\r\n};\r\nfunction useMediaControls(target, options = {}) {\r\n  options = __spreadValues$8(__spreadValues$8({}, defaultOptions), options);\r\n  const {\r\n    document = defaultDocument\r\n  } = options;\r\n  const currentTime = ref(0);\r\n  const duration = ref(0);\r\n  const seeking = ref(false);\r\n  const volume = ref(1);\r\n  const waiting = ref(false);\r\n  const ended = ref(false);\r\n  const playing = ref(false);\r\n  const rate = ref(1);\r\n  const stalled = ref(false);\r\n  const buffered = ref([]);\r\n  const tracks = ref([]);\r\n  const selectedTrack = ref(-1);\r\n  const isPictureInPicture = ref(false);\r\n  const muted = ref(false);\r\n  const supportsPictureInPicture = document && \"pictureInPictureEnabled\" in document;\r\n  const sourceErrorEvent = createEventHook();\r\n  const disableTrack = (track) => {\r\n    usingElRef(target, (el) => {\r\n      if (track) {\r\n        const id = typeof track === \"number\" ? track : track.id;\r\n        el.textTracks[id].mode = \"disabled\";\r\n      } else {\r\n        for (let i = 0; i < el.textTracks.length; ++i)\r\n          el.textTracks[i].mode = \"disabled\";\r\n      }\r\n      selectedTrack.value = -1;\r\n    });\r\n  };\r\n  const enableTrack = (track, disableTracks = true) => {\r\n    usingElRef(target, (el) => {\r\n      const id = typeof track === \"number\" ? track : track.id;\r\n      if (disableTracks)\r\n        disableTrack();\r\n      el.textTracks[id].mode = \"showing\";\r\n      selectedTrack.value = id;\r\n    });\r\n  };\r\n  const togglePictureInPicture = () => {\r\n    return new Promise((resolve, reject) => {\r\n      usingElRef(target, async (el) => {\r\n        if (supportsPictureInPicture) {\r\n          if (!isPictureInPicture.value) {\r\n            el.requestPictureInPicture().then(resolve).catch(reject);\r\n          } else {\r\n            document.exitPictureInPicture().then(resolve).catch(reject);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n  watchEffect(() => {\r\n    if (!document)\r\n      return;\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    const src = toValue(options.src);\r\n    let sources = [];\r\n    if (!src)\r\n      return;\r\n    if (typeof src === \"string\")\r\n      sources = [{ src }];\r\n    else if (Array.isArray(src))\r\n      sources = src;\r\n    else if (isObject(src))\r\n      sources = [src];\r\n    el.querySelectorAll(\"source\").forEach((e) => {\r\n      e.removeEventListener(\"error\", sourceErrorEvent.trigger);\r\n      e.remove();\r\n    });\r\n    sources.forEach(({ src: src2, type }) => {\r\n      const source = document.createElement(\"source\");\r\n      source.setAttribute(\"src\", src2);\r\n      source.setAttribute(\"type\", type || \"\");\r\n      source.addEventListener(\"error\", sourceErrorEvent.trigger);\r\n      el.appendChild(source);\r\n    });\r\n    el.load();\r\n  });\r\n  tryOnScopeDispose(() => {\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    el.querySelectorAll(\"source\").forEach((e) => e.removeEventListener(\"error\", sourceErrorEvent.trigger));\r\n  });\r\n  watch([target, volume], () => {\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    el.volume = volume.value;\r\n  });\r\n  watch([target, muted], () => {\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    el.muted = muted.value;\r\n  });\r\n  watch([target, rate], () => {\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    el.playbackRate = rate.value;\r\n  });\r\n  watchEffect(() => {\r\n    if (!document)\r\n      return;\r\n    const textTracks = toValue(options.tracks);\r\n    const el = toValue(target);\r\n    if (!textTracks || !textTracks.length || !el)\r\n      return;\r\n    el.querySelectorAll(\"track\").forEach((e) => e.remove());\r\n    textTracks.forEach(({ default: isDefault, kind, label, src, srcLang }, i) => {\r\n      const track = document.createElement(\"track\");\r\n      track.default = isDefault || false;\r\n      track.kind = kind;\r\n      track.label = label;\r\n      track.src = src;\r\n      track.srclang = srcLang;\r\n      if (track.default)\r\n        selectedTrack.value = i;\r\n      el.appendChild(track);\r\n    });\r\n  });\r\n  const { ignoreUpdates: ignoreCurrentTimeUpdates } = watchIgnorable(currentTime, (time) => {\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    el.currentTime = time;\r\n  });\r\n  const { ignoreUpdates: ignorePlayingUpdates } = watchIgnorable(playing, (isPlaying) => {\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    isPlaying ? el.play() : el.pause();\r\n  });\r\n  useEventListener(target, \"timeupdate\", () => ignoreCurrentTimeUpdates(() => currentTime.value = toValue(target).currentTime));\r\n  useEventListener(target, \"durationchange\", () => duration.value = toValue(target).duration);\r\n  useEventListener(target, \"progress\", () => buffered.value = timeRangeToArray(toValue(target).buffered));\r\n  useEventListener(target, \"seeking\", () => seeking.value = true);\r\n  useEventListener(target, \"seeked\", () => seeking.value = false);\r\n  useEventListener(target, [\"waiting\", \"loadstart\"], () => {\r\n    waiting.value = true;\r\n    ignorePlayingUpdates(() => playing.value = false);\r\n  });\r\n  useEventListener(target, \"loadeddata\", () => waiting.value = false);\r\n  useEventListener(target, \"playing\", () => {\r\n    waiting.value = false;\r\n    ended.value = false;\r\n    ignorePlayingUpdates(() => playing.value = true);\r\n  });\r\n  useEventListener(target, \"ratechange\", () => rate.value = toValue(target).playbackRate);\r\n  useEventListener(target, \"stalled\", () => stalled.value = true);\r\n  useEventListener(target, \"ended\", () => ended.value = true);\r\n  useEventListener(target, \"pause\", () => ignorePlayingUpdates(() => playing.value = false));\r\n  useEventListener(target, \"play\", () => ignorePlayingUpdates(() => playing.value = true));\r\n  useEventListener(target, \"enterpictureinpicture\", () => isPictureInPicture.value = true);\r\n  useEventListener(target, \"leavepictureinpicture\", () => isPictureInPicture.value = false);\r\n  useEventListener(target, \"volumechange\", () => {\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    volume.value = el.volume;\r\n    muted.value = el.muted;\r\n  });\r\n  const listeners = [];\r\n  const stop = watch([target], () => {\r\n    const el = toValue(target);\r\n    if (!el)\r\n      return;\r\n    stop();\r\n    listeners[0] = useEventListener(el.textTracks, \"addtrack\", () => tracks.value = tracksToArray(el.textTracks));\r\n    listeners[1] = useEventListener(el.textTracks, \"removetrack\", () => tracks.value = tracksToArray(el.textTracks));\r\n    listeners[2] = useEventListener(el.textTracks, \"change\", () => tracks.value = tracksToArray(el.textTracks));\r\n  });\r\n  tryOnScopeDispose(() => listeners.forEach((listener) => listener()));\r\n  return {\r\n    currentTime,\r\n    duration,\r\n    waiting,\r\n    seeking,\r\n    ended,\r\n    stalled,\r\n    buffered,\r\n    playing,\r\n    rate,\r\n    // Volume\r\n    volume,\r\n    muted,\r\n    // Tracks\r\n    tracks,\r\n    selectedTrack,\r\n    enableTrack,\r\n    disableTrack,\r\n    // Picture in Picture\r\n    supportsPictureInPicture,\r\n    togglePictureInPicture,\r\n    isPictureInPicture,\r\n    // Events\r\n    onSourceError: sourceErrorEvent.on\r\n  };\r\n}\r\n\r\nfunction getMapVue2Compat() {\r\n  const data = reactive({});\r\n  return {\r\n    get: (key) => data[key],\r\n    set: (key, value) => set(data, key, value),\r\n    has: (key) => hasOwn(data, key),\r\n    delete: (key) => del(data, key),\r\n    clear: () => {\r\n      Object.keys(data).forEach((key) => {\r\n        del(data, key);\r\n      });\r\n    }\r\n  };\r\n}\r\nfunction useMemoize(resolver, options) {\r\n  const initCache = () => {\r\n    if (options == null ? void 0 : options.cache)\r\n      return reactive(options.cache);\r\n    if (isVue2)\r\n      return getMapVue2Compat();\r\n    return reactive(/* @__PURE__ */ new Map());\r\n  };\r\n  const cache = initCache();\r\n  const generateKey = (...args) => (options == null ? void 0 : options.getKey) ? options.getKey(...args) : JSON.stringify(args);\r\n  const _loadData = (key, ...args) => {\r\n    cache.set(key, resolver(...args));\r\n    return cache.get(key);\r\n  };\r\n  const loadData = (...args) => _loadData(generateKey(...args), ...args);\r\n  const deleteData = (...args) => {\r\n    cache.delete(generateKey(...args));\r\n  };\r\n  const clearData = () => {\r\n    cache.clear();\r\n  };\r\n  const memoized = (...args) => {\r\n    const key = generateKey(...args);\r\n    if (cache.has(key))\r\n      return cache.get(key);\r\n    return _loadData(key, ...args);\r\n  };\r\n  memoized.load = loadData;\r\n  memoized.delete = deleteData;\r\n  memoized.clear = clearData;\r\n  memoized.generateKey = generateKey;\r\n  memoized.cache = cache;\r\n  return memoized;\r\n}\r\n\r\nfunction useMemory(options = {}) {\r\n  const memory = ref();\r\n  const isSupported = useSupported(() => typeof performance !== \"undefined\" && \"memory\" in performance);\r\n  if (isSupported.value) {\r\n    const { interval = 1e3 } = options;\r\n    useIntervalFn(() => {\r\n      memory.value = performance.memory;\r\n    }, interval, { immediate: options.immediate, immediateCallback: options.immediateCallback });\r\n  }\r\n  return { isSupported, memory };\r\n}\r\n\r\nconst BuiltinExtractors = {\r\n  page: (event) => [event.pageX, event.pageY],\r\n  client: (event) => [event.clientX, event.clientY],\r\n  screen: (event) => [event.screenX, event.screenY],\r\n  movement: (event) => event instanceof Touch ? null : [event.movementX, event.movementY]\r\n};\r\nfunction useMouse(options = {}) {\r\n  const {\r\n    type = \"page\",\r\n    touch = true,\r\n    resetOnTouchEnds = false,\r\n    initialValue = { x: 0, y: 0 },\r\n    window = defaultWindow,\r\n    target = window,\r\n    eventFilter\r\n  } = options;\r\n  const x = ref(initialValue.x);\r\n  const y = ref(initialValue.y);\r\n  const sourceType = ref(null);\r\n  const extractor = typeof type === \"function\" ? type : BuiltinExtractors[type];\r\n  const mouseHandler = (event) => {\r\n    const result = extractor(event);\r\n    if (result) {\r\n      [x.value, y.value] = result;\r\n      sourceType.value = \"mouse\";\r\n    }\r\n  };\r\n  const touchHandler = (event) => {\r\n    if (event.touches.length > 0) {\r\n      const result = extractor(event.touches[0]);\r\n      if (result) {\r\n        [x.value, y.value] = result;\r\n        sourceType.value = \"touch\";\r\n      }\r\n    }\r\n  };\r\n  const reset = () => {\r\n    x.value = initialValue.x;\r\n    y.value = initialValue.y;\r\n  };\r\n  const mouseHandlerWrapper = eventFilter ? (event) => eventFilter(() => mouseHandler(event), {}) : (event) => mouseHandler(event);\r\n  const touchHandlerWrapper = eventFilter ? (event) => eventFilter(() => touchHandler(event), {}) : (event) => touchHandler(event);\r\n  if (target) {\r\n    useEventListener(target, \"mousemove\", mouseHandlerWrapper, { passive: true });\r\n    useEventListener(target, \"dragover\", mouseHandlerWrapper, { passive: true });\r\n    if (touch && type !== \"movement\") {\r\n      useEventListener(target, \"touchstart\", touchHandlerWrapper, { passive: true });\r\n      useEventListener(target, \"touchmove\", touchHandlerWrapper, { passive: true });\r\n      if (resetOnTouchEnds)\r\n        useEventListener(target, \"touchend\", reset, { passive: true });\r\n    }\r\n  }\r\n  return {\r\n    x,\r\n    y,\r\n    sourceType\r\n  };\r\n}\r\n\r\nfunction useMouseInElement(target, options = {}) {\r\n  const {\r\n    handleOutside = true,\r\n    window = defaultWindow\r\n  } = options;\r\n  const { x, y, sourceType } = useMouse(options);\r\n  const targetRef = ref(target != null ? target : window == null ? void 0 : window.document.body);\r\n  const elementX = ref(0);\r\n  const elementY = ref(0);\r\n  const elementPositionX = ref(0);\r\n  const elementPositionY = ref(0);\r\n  const elementHeight = ref(0);\r\n  const elementWidth = ref(0);\r\n  const isOutside = ref(true);\r\n  let stop = () => {\r\n  };\r\n  if (window) {\r\n    stop = watch(\r\n      [targetRef, x, y],\r\n      () => {\r\n        const el = unrefElement(targetRef);\r\n        if (!el)\r\n          return;\r\n        const {\r\n          left,\r\n          top,\r\n          width,\r\n          height\r\n        } = el.getBoundingClientRect();\r\n        elementPositionX.value = left + window.pageXOffset;\r\n        elementPositionY.value = top + window.pageYOffset;\r\n        elementHeight.value = height;\r\n        elementWidth.value = width;\r\n        const elX = x.value - elementPositionX.value;\r\n        const elY = y.value - elementPositionY.value;\r\n        isOutside.value = width === 0 || height === 0 || elX < 0 || elY < 0 || elX > width || elY > height;\r\n        if (handleOutside || !isOutside.value) {\r\n          elementX.value = elX;\r\n          elementY.value = elY;\r\n        }\r\n      },\r\n      { immediate: true }\r\n    );\r\n    useEventListener(document, \"mouseleave\", () => {\r\n      isOutside.value = true;\r\n    });\r\n  }\r\n  return {\r\n    x,\r\n    y,\r\n    sourceType,\r\n    elementX,\r\n    elementY,\r\n    elementPositionX,\r\n    elementPositionY,\r\n    elementHeight,\r\n    elementWidth,\r\n    isOutside,\r\n    stop\r\n  };\r\n}\r\n\r\nfunction useMousePressed(options = {}) {\r\n  const {\r\n    touch = true,\r\n    drag = true,\r\n    initialValue = false,\r\n    window = defaultWindow\r\n  } = options;\r\n  const pressed = ref(initialValue);\r\n  const sourceType = ref(null);\r\n  if (!window) {\r\n    return {\r\n      pressed,\r\n      sourceType\r\n    };\r\n  }\r\n  const onPressed = (srcType) => () => {\r\n    pressed.value = true;\r\n    sourceType.value = srcType;\r\n  };\r\n  const onReleased = () => {\r\n    pressed.value = false;\r\n    sourceType.value = null;\r\n  };\r\n  const target = computed(() => unrefElement(options.target) || window);\r\n  useEventListener(target, \"mousedown\", onPressed(\"mouse\"), { passive: true });\r\n  useEventListener(window, \"mouseleave\", onReleased, { passive: true });\r\n  useEventListener(window, \"mouseup\", onReleased, { passive: true });\r\n  if (drag) {\r\n    useEventListener(target, \"dragstart\", onPressed(\"mouse\"), { passive: true });\r\n    useEventListener(window, \"drop\", onReleased, { passive: true });\r\n    useEventListener(window, \"dragend\", onReleased, { passive: true });\r\n  }\r\n  if (touch) {\r\n    useEventListener(target, \"touchstart\", onPressed(\"touch\"), { passive: true });\r\n    useEventListener(window, \"touchend\", onReleased, { passive: true });\r\n    useEventListener(window, \"touchcancel\", onReleased, { passive: true });\r\n  }\r\n  return {\r\n    pressed,\r\n    sourceType\r\n  };\r\n}\r\n\r\nfunction useNavigatorLanguage(options = {}) {\r\n  const { window = defaultWindow } = options;\r\n  const navigator = window == null ? void 0 : window.navigator;\r\n  const isSupported = useSupported(() => navigator && \"language\" in navigator);\r\n  const language = ref(navigator == null ? void 0 : navigator.language);\r\n  useEventListener(window, \"languagechange\", () => {\r\n    if (navigator)\r\n      language.value = navigator.language;\r\n  });\r\n  return {\r\n    isSupported,\r\n    language\r\n  };\r\n}\r\n\r\nfunction useNetwork(options = {}) {\r\n  const { window = defaultWindow } = options;\r\n  const navigator = window == null ? void 0 : window.navigator;\r\n  const isSupported = useSupported(() => navigator && \"connection\" in navigator);\r\n  const isOnline = ref(true);\r\n  const saveData = ref(false);\r\n  const offlineAt = ref(void 0);\r\n  const onlineAt = ref(void 0);\r\n  const downlink = ref(void 0);\r\n  const downlinkMax = ref(void 0);\r\n  const rtt = ref(void 0);\r\n  const effectiveType = ref(void 0);\r\n  const type = ref(\"unknown\");\r\n  const connection = isSupported.value && navigator.connection;\r\n  function updateNetworkInformation() {\r\n    if (!navigator)\r\n      return;\r\n    isOnline.value = navigator.onLine;\r\n    offlineAt.value = isOnline.value ? void 0 : Date.now();\r\n    onlineAt.value = isOnline.value ? Date.now() : void 0;\r\n    if (connection) {\r\n      downlink.value = connection.downlink;\r\n      downlinkMax.value = connection.downlinkMax;\r\n      effectiveType.value = connection.effectiveType;\r\n      rtt.value = connection.rtt;\r\n      saveData.value = connection.saveData;\r\n      type.value = connection.type;\r\n    }\r\n  }\r\n  if (window) {\r\n    useEventListener(window, \"offline\", () => {\r\n      isOnline.value = false;\r\n      offlineAt.value = Date.now();\r\n    });\r\n    useEventListener(window, \"online\", () => {\r\n      isOnline.value = true;\r\n      onlineAt.value = Date.now();\r\n    });\r\n  }\r\n  if (connection)\r\n    useEventListener(connection, \"change\", updateNetworkInformation, false);\r\n  updateNetworkInformation();\r\n  return {\r\n    isSupported,\r\n    isOnline,\r\n    saveData,\r\n    offlineAt,\r\n    onlineAt,\r\n    downlink,\r\n    downlinkMax,\r\n    effectiveType,\r\n    rtt,\r\n    type\r\n  };\r\n}\r\n\r\nvar __defProp$7 = Object.defineProperty;\r\nvar __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$8 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$8 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$7 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$8.call(b, prop))\r\n      __defNormalProp$7(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$8)\r\n    for (var prop of __getOwnPropSymbols$8(b)) {\r\n      if (__propIsEnum$8.call(b, prop))\r\n        __defNormalProp$7(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useNow(options = {}) {\r\n  const {\r\n    controls: exposeControls = false,\r\n    interval = \"requestAnimationFrame\"\r\n  } = options;\r\n  const now = ref(/* @__PURE__ */ new Date());\r\n  const update = () => now.value = /* @__PURE__ */ new Date();\r\n  const controls = interval === \"requestAnimationFrame\" ? useRafFn(update, { immediate: true }) : useIntervalFn(update, interval, { immediate: true });\r\n  if (exposeControls) {\r\n    return __spreadValues$7({\r\n      now\r\n    }, controls);\r\n  } else {\r\n    return now;\r\n  }\r\n}\r\n\r\nfunction useObjectUrl(object) {\r\n  const url = ref();\r\n  const release = () => {\r\n    if (url.value)\r\n      URL.revokeObjectURL(url.value);\r\n    url.value = void 0;\r\n  };\r\n  watch(\r\n    () => toValue(object),\r\n    (newObject) => {\r\n      release();\r\n      if (newObject)\r\n        url.value = URL.createObjectURL(newObject);\r\n    },\r\n    { immediate: true }\r\n  );\r\n  tryOnScopeDispose(release);\r\n  return readonly(url);\r\n}\r\n\r\nfunction useClamp(value, min, max) {\r\n  if (typeof value === \"function\" || isReadonly(value))\r\n    return computed(() => clamp(toValue(value), toValue(min), toValue(max)));\r\n  const _value = ref(value);\r\n  return computed({\r\n    get() {\r\n      return _value.value = clamp(_value.value, toValue(min), toValue(max));\r\n    },\r\n    set(value2) {\r\n      _value.value = clamp(value2, toValue(min), toValue(max));\r\n    }\r\n  });\r\n}\r\n\r\nfunction useOffsetPagination(options) {\r\n  const {\r\n    total = Infinity,\r\n    pageSize = 10,\r\n    page = 1,\r\n    onPageChange = noop,\r\n    onPageSizeChange = noop,\r\n    onPageCountChange = noop\r\n  } = options;\r\n  const currentPageSize = useClamp(pageSize, 1, Infinity);\r\n  const pageCount = computed(() => Math.max(\r\n    1,\r\n    Math.ceil(toValue(total) / toValue(currentPageSize))\r\n  ));\r\n  const currentPage = useClamp(page, 1, pageCount);\r\n  const isFirstPage = computed(() => currentPage.value === 1);\r\n  const isLastPage = computed(() => currentPage.value === pageCount.value);\r\n  if (isRef(page))\r\n    syncRef(page, currentPage);\r\n  if (isRef(pageSize))\r\n    syncRef(pageSize, currentPageSize);\r\n  function prev() {\r\n    currentPage.value--;\r\n  }\r\n  function next() {\r\n    currentPage.value++;\r\n  }\r\n  const returnValue = {\r\n    currentPage,\r\n    currentPageSize,\r\n    pageCount,\r\n    isFirstPage,\r\n    isLastPage,\r\n    prev,\r\n    next\r\n  };\r\n  watch(currentPage, () => {\r\n    onPageChange(reactive(returnValue));\r\n  });\r\n  watch(currentPageSize, () => {\r\n    onPageSizeChange(reactive(returnValue));\r\n  });\r\n  watch(pageCount, () => {\r\n    onPageCountChange(reactive(returnValue));\r\n  });\r\n  return returnValue;\r\n}\r\n\r\nfunction useOnline(options = {}) {\r\n  const { isOnline } = useNetwork(options);\r\n  return isOnline;\r\n}\r\n\r\nfunction usePageLeave(options = {}) {\r\n  const { window = defaultWindow } = options;\r\n  const isLeft = ref(false);\r\n  const handler = (event) => {\r\n    if (!window)\r\n      return;\r\n    event = event || window.event;\r\n    const from = event.relatedTarget || event.toElement;\r\n    isLeft.value = !from;\r\n  };\r\n  if (window) {\r\n    useEventListener(window, \"mouseout\", handler, { passive: true });\r\n    useEventListener(window.document, \"mouseleave\", handler, { passive: true });\r\n    useEventListener(window.document, \"mouseenter\", handler, { passive: true });\r\n  }\r\n  return isLeft;\r\n}\r\n\r\nfunction useParallax(target, options = {}) {\r\n  const {\r\n    deviceOrientationTiltAdjust = (i) => i,\r\n    deviceOrientationRollAdjust = (i) => i,\r\n    mouseTiltAdjust = (i) => i,\r\n    mouseRollAdjust = (i) => i,\r\n    window = defaultWindow\r\n  } = options;\r\n  const orientation = reactive(useDeviceOrientation({ window }));\r\n  const {\r\n    elementX: x,\r\n    elementY: y,\r\n    elementWidth: width,\r\n    elementHeight: height\r\n  } = useMouseInElement(target, { handleOutside: false, window });\r\n  const source = computed(() => {\r\n    if (orientation.isSupported && (orientation.alpha != null && orientation.alpha !== 0 || orientation.gamma != null && orientation.gamma !== 0))\r\n      return \"deviceOrientation\";\r\n    return \"mouse\";\r\n  });\r\n  const roll = computed(() => {\r\n    if (source.value === \"deviceOrientation\") {\r\n      const value = -orientation.beta / 90;\r\n      return deviceOrientationRollAdjust(value);\r\n    } else {\r\n      const value = -(y.value - height.value / 2) / height.value;\r\n      return mouseRollAdjust(value);\r\n    }\r\n  });\r\n  const tilt = computed(() => {\r\n    if (source.value === \"deviceOrientation\") {\r\n      const value = orientation.gamma / 90;\r\n      return deviceOrientationTiltAdjust(value);\r\n    } else {\r\n      const value = (x.value - width.value / 2) / width.value;\r\n      return mouseTiltAdjust(value);\r\n    }\r\n  });\r\n  return { roll, tilt, source };\r\n}\r\n\r\nfunction useParentElement(element = useCurrentElement()) {\r\n  const parentElement = shallowRef();\r\n  const update = () => {\r\n    const el = unrefElement(element);\r\n    if (el)\r\n      parentElement.value = el.parentElement;\r\n  };\r\n  tryOnMounted(update);\r\n  watch(() => toValue(element), update);\r\n  return parentElement;\r\n}\r\n\r\nvar __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$7 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$7 = Object.prototype.propertyIsEnumerable;\r\nvar __objRest$1 = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$7.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$7)\r\n    for (var prop of __getOwnPropSymbols$7(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$7.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nfunction usePerformanceObserver(options, callback) {\r\n  const _a = options, {\r\n    window = defaultWindow,\r\n    immediate = true\r\n  } = _a, performanceOptions = __objRest$1(_a, [\r\n    \"window\",\r\n    \"immediate\"\r\n  ]);\r\n  const isSupported = useSupported(() => window && \"PerformanceObserver\" in window);\r\n  let observer;\r\n  const stop = () => {\r\n    observer == null ? void 0 : observer.disconnect();\r\n  };\r\n  const start = () => {\r\n    if (isSupported.value) {\r\n      stop();\r\n      observer = new PerformanceObserver(callback);\r\n      observer.observe(performanceOptions);\r\n    }\r\n  };\r\n  tryOnScopeDispose(stop);\r\n  if (immediate)\r\n    start();\r\n  return {\r\n    isSupported,\r\n    start,\r\n    stop\r\n  };\r\n}\r\n\r\nvar __defProp$6 = Object.defineProperty;\r\nvar __defProps$2 = Object.defineProperties;\r\nvar __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$6 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$6 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$6 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$6.call(b, prop))\r\n      __defNormalProp$6(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$6)\r\n    for (var prop of __getOwnPropSymbols$6(b)) {\r\n      if (__propIsEnum$6.call(b, prop))\r\n        __defNormalProp$6(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));\r\nconst defaultState = {\r\n  x: 0,\r\n  y: 0,\r\n  pointerId: 0,\r\n  pressure: 0,\r\n  tiltX: 0,\r\n  tiltY: 0,\r\n  width: 0,\r\n  height: 0,\r\n  twist: 0,\r\n  pointerType: null\r\n};\r\nconst keys = /* @__PURE__ */ Object.keys(defaultState);\r\nfunction usePointer(options = {}) {\r\n  const {\r\n    target = defaultWindow\r\n  } = options;\r\n  const isInside = ref(false);\r\n  const state = ref(options.initialValue || {});\r\n  Object.assign(state.value, defaultState, state.value);\r\n  const handler = (event) => {\r\n    isInside.value = true;\r\n    if (options.pointerTypes && !options.pointerTypes.includes(event.pointerType))\r\n      return;\r\n    state.value = objectPick(event, keys, false);\r\n  };\r\n  if (target) {\r\n    useEventListener(target, \"pointerdown\", handler, { passive: true });\r\n    useEventListener(target, \"pointermove\", handler, { passive: true });\r\n    useEventListener(target, \"pointerleave\", () => isInside.value = false, { passive: true });\r\n  }\r\n  return __spreadProps$2(__spreadValues$6({}, toRefs(state)), {\r\n    isInside\r\n  });\r\n}\r\n\r\nfunction usePointerLock(target, options = {}) {\r\n  const { document = defaultDocument, pointerLockOptions } = options;\r\n  const isSupported = useSupported(() => document && \"pointerLockElement\" in document);\r\n  const element = ref();\r\n  const triggerElement = ref();\r\n  let targetElement;\r\n  if (isSupported.value) {\r\n    useEventListener(document, \"pointerlockchange\", () => {\r\n      var _a;\r\n      const currentElement = (_a = document.pointerLockElement) != null ? _a : element.value;\r\n      if (targetElement && currentElement === targetElement) {\r\n        element.value = document.pointerLockElement;\r\n        if (!element.value)\r\n          targetElement = triggerElement.value = null;\r\n      }\r\n    });\r\n    useEventListener(document, \"pointerlockerror\", () => {\r\n      var _a;\r\n      const currentElement = (_a = document.pointerLockElement) != null ? _a : element.value;\r\n      if (targetElement && currentElement === targetElement) {\r\n        const action = document.pointerLockElement ? \"release\" : \"acquire\";\r\n        throw new Error(`Failed to ${action} pointer lock.`);\r\n      }\r\n    });\r\n  }\r\n  async function lock(e, options2) {\r\n    var _a;\r\n    if (!isSupported.value)\r\n      throw new Error(\"Pointer Lock API is not supported by your browser.\");\r\n    triggerElement.value = e instanceof Event ? e.currentTarget : null;\r\n    targetElement = e instanceof Event ? (_a = unrefElement(target)) != null ? _a : triggerElement.value : unrefElement(e);\r\n    if (!targetElement)\r\n      throw new Error(\"Target element undefined.\");\r\n    targetElement.requestPointerLock(options2 != null ? options2 : pointerLockOptions);\r\n    return await until(element).toBe(targetElement);\r\n  }\r\n  async function unlock() {\r\n    if (!element.value)\r\n      return false;\r\n    document.exitPointerLock();\r\n    await until(element).toBeNull();\r\n    return true;\r\n  }\r\n  return {\r\n    isSupported,\r\n    element,\r\n    triggerElement,\r\n    lock,\r\n    unlock\r\n  };\r\n}\r\n\r\nfunction usePointerSwipe(target, options = {}) {\r\n  const targetRef = toRef(target);\r\n  const {\r\n    threshold = 50,\r\n    onSwipe,\r\n    onSwipeEnd,\r\n    onSwipeStart\r\n  } = options;\r\n  const posStart = reactive({ x: 0, y: 0 });\r\n  const updatePosStart = (x, y) => {\r\n    posStart.x = x;\r\n    posStart.y = y;\r\n  };\r\n  const posEnd = reactive({ x: 0, y: 0 });\r\n  const updatePosEnd = (x, y) => {\r\n    posEnd.x = x;\r\n    posEnd.y = y;\r\n  };\r\n  const distanceX = computed(() => posStart.x - posEnd.x);\r\n  const distanceY = computed(() => posStart.y - posEnd.y);\r\n  const { max, abs } = Math;\r\n  const isThresholdExceeded = computed(() => max(abs(distanceX.value), abs(distanceY.value)) >= threshold);\r\n  const isSwiping = ref(false);\r\n  const isPointerDown = ref(false);\r\n  const direction = computed(() => {\r\n    if (!isThresholdExceeded.value)\r\n      return \"none\";\r\n    if (abs(distanceX.value) > abs(distanceY.value)) {\r\n      return distanceX.value > 0 ? \"left\" : \"right\";\r\n    } else {\r\n      return distanceY.value > 0 ? \"up\" : \"down\";\r\n    }\r\n  });\r\n  const eventIsAllowed = (e) => {\r\n    var _a, _b, _c;\r\n    const isReleasingButton = e.buttons === 0;\r\n    const isPrimaryButton = e.buttons === 1;\r\n    return (_c = (_b = (_a = options.pointerTypes) == null ? void 0 : _a.includes(e.pointerType)) != null ? _b : isReleasingButton || isPrimaryButton) != null ? _c : true;\r\n  };\r\n  const stops = [\r\n    useEventListener(target, \"pointerdown\", (e) => {\r\n      var _a, _b;\r\n      if (!eventIsAllowed(e))\r\n        return;\r\n      isPointerDown.value = true;\r\n      (_b = (_a = targetRef.value) == null ? void 0 : _a.style) == null ? void 0 : _b.setProperty(\"touch-action\", \"none\");\r\n      const eventTarget = e.target;\r\n      eventTarget == null ? void 0 : eventTarget.setPointerCapture(e.pointerId);\r\n      const { clientX: x, clientY: y } = e;\r\n      updatePosStart(x, y);\r\n      updatePosEnd(x, y);\r\n      onSwipeStart == null ? void 0 : onSwipeStart(e);\r\n    }),\r\n    useEventListener(target, \"pointermove\", (e) => {\r\n      if (!eventIsAllowed(e))\r\n        return;\r\n      if (!isPointerDown.value)\r\n        return;\r\n      const { clientX: x, clientY: y } = e;\r\n      updatePosEnd(x, y);\r\n      if (!isSwiping.value && isThresholdExceeded.value)\r\n        isSwiping.value = true;\r\n      if (isSwiping.value)\r\n        onSwipe == null ? void 0 : onSwipe(e);\r\n    }),\r\n    useEventListener(target, \"pointerup\", (e) => {\r\n      var _a, _b;\r\n      if (!eventIsAllowed(e))\r\n        return;\r\n      if (isSwiping.value)\r\n        onSwipeEnd == null ? void 0 : onSwipeEnd(e, direction.value);\r\n      isPointerDown.value = false;\r\n      isSwiping.value = false;\r\n      (_b = (_a = targetRef.value) == null ? void 0 : _a.style) == null ? void 0 : _b.setProperty(\"touch-action\", \"initial\");\r\n    })\r\n  ];\r\n  const stop = () => stops.forEach((s) => s());\r\n  return {\r\n    isSwiping: readonly(isSwiping),\r\n    direction: readonly(direction),\r\n    posStart: readonly(posStart),\r\n    posEnd: readonly(posEnd),\r\n    distanceX,\r\n    distanceY,\r\n    stop\r\n  };\r\n}\r\n\r\nfunction usePreferredColorScheme(options) {\r\n  const isLight = useMediaQuery(\"(prefers-color-scheme: light)\", options);\r\n  const isDark = useMediaQuery(\"(prefers-color-scheme: dark)\", options);\r\n  return computed(() => {\r\n    if (isDark.value)\r\n      return \"dark\";\r\n    if (isLight.value)\r\n      return \"light\";\r\n    return \"no-preference\";\r\n  });\r\n}\r\n\r\nfunction usePreferredContrast(options) {\r\n  const isMore = useMediaQuery(\"(prefers-contrast: more)\", options);\r\n  const isLess = useMediaQuery(\"(prefers-contrast: less)\", options);\r\n  const isCustom = useMediaQuery(\"(prefers-contrast: custom)\", options);\r\n  return computed(() => {\r\n    if (isMore.value)\r\n      return \"more\";\r\n    if (isLess.value)\r\n      return \"less\";\r\n    if (isCustom.value)\r\n      return \"custom\";\r\n    return \"no-preference\";\r\n  });\r\n}\r\n\r\nfunction usePreferredLanguages(options = {}) {\r\n  const { window = defaultWindow } = options;\r\n  if (!window)\r\n    return ref([\"en\"]);\r\n  const navigator = window.navigator;\r\n  const value = ref(navigator.languages);\r\n  useEventListener(window, \"languagechange\", () => {\r\n    value.value = navigator.languages;\r\n  });\r\n  return value;\r\n}\r\n\r\nfunction usePreferredReducedMotion(options) {\r\n  const isReduced = useMediaQuery(\"(prefers-reduced-motion: reduce)\", options);\r\n  return computed(() => {\r\n    if (isReduced.value)\r\n      return \"reduce\";\r\n    return \"no-preference\";\r\n  });\r\n}\r\n\r\nfunction usePrevious(value, initialValue) {\r\n  const previous = shallowRef(initialValue);\r\n  watch(\r\n    toRef(value),\r\n    (_, oldValue) => {\r\n      previous.value = oldValue;\r\n    },\r\n    { flush: \"sync\" }\r\n  );\r\n  return readonly(previous);\r\n}\r\n\r\nfunction useScreenOrientation(options = {}) {\r\n  const {\r\n    window = defaultWindow\r\n  } = options;\r\n  const isSupported = useSupported(() => window && \"screen\" in window && \"orientation\" in window.screen);\r\n  const screenOrientation = isSupported.value ? window.screen.orientation : {};\r\n  const orientation = ref(screenOrientation.type);\r\n  const angle = ref(screenOrientation.angle || 0);\r\n  if (isSupported.value) {\r\n    useEventListener(window, \"orientationchange\", () => {\r\n      orientation.value = screenOrientation.type;\r\n      angle.value = screenOrientation.angle;\r\n    });\r\n  }\r\n  const lockOrientation = (type) => {\r\n    if (!isSupported.value)\r\n      return Promise.reject(new Error(\"Not supported\"));\r\n    return screenOrientation.lock(type);\r\n  };\r\n  const unlockOrientation = () => {\r\n    if (isSupported.value)\r\n      screenOrientation.unlock();\r\n  };\r\n  return {\r\n    isSupported,\r\n    orientation,\r\n    angle,\r\n    lockOrientation,\r\n    unlockOrientation\r\n  };\r\n}\r\n\r\nconst topVarName = \"--vueuse-safe-area-top\";\r\nconst rightVarName = \"--vueuse-safe-area-right\";\r\nconst bottomVarName = \"--vueuse-safe-area-bottom\";\r\nconst leftVarName = \"--vueuse-safe-area-left\";\r\nfunction useScreenSafeArea() {\r\n  const top = ref(\"\");\r\n  const right = ref(\"\");\r\n  const bottom = ref(\"\");\r\n  const left = ref(\"\");\r\n  if (isClient) {\r\n    const topCssVar = useCssVar(topVarName);\r\n    const rightCssVar = useCssVar(rightVarName);\r\n    const bottomCssVar = useCssVar(bottomVarName);\r\n    const leftCssVar = useCssVar(leftVarName);\r\n    topCssVar.value = \"env(safe-area-inset-top, 0px)\";\r\n    rightCssVar.value = \"env(safe-area-inset-right, 0px)\";\r\n    bottomCssVar.value = \"env(safe-area-inset-bottom, 0px)\";\r\n    leftCssVar.value = \"env(safe-area-inset-left, 0px)\";\r\n    update();\r\n    useEventListener(\"resize\", useDebounceFn(update));\r\n  }\r\n  function update() {\r\n    top.value = getValue(topVarName);\r\n    right.value = getValue(rightVarName);\r\n    bottom.value = getValue(bottomVarName);\r\n    left.value = getValue(leftVarName);\r\n  }\r\n  return {\r\n    top,\r\n    right,\r\n    bottom,\r\n    left,\r\n    update\r\n  };\r\n}\r\nfunction getValue(position) {\r\n  return getComputedStyle(document.documentElement).getPropertyValue(position);\r\n}\r\n\r\nfunction useScriptTag(src, onLoaded = noop, options = {}) {\r\n  const {\r\n    immediate = true,\r\n    manual = false,\r\n    type = \"text/javascript\",\r\n    async = true,\r\n    crossOrigin,\r\n    referrerPolicy,\r\n    noModule,\r\n    defer,\r\n    document = defaultDocument,\r\n    attrs = {}\r\n  } = options;\r\n  const scriptTag = ref(null);\r\n  let _promise = null;\r\n  const loadScript = (waitForScriptLoad) => new Promise((resolve, reject) => {\r\n    const resolveWithElement = (el2) => {\r\n      scriptTag.value = el2;\r\n      resolve(el2);\r\n      return el2;\r\n    };\r\n    if (!document) {\r\n      resolve(false);\r\n      return;\r\n    }\r\n    let shouldAppend = false;\r\n    let el = document.querySelector(`script[src=\"${toValue(src)}\"]`);\r\n    if (!el) {\r\n      el = document.createElement(\"script\");\r\n      el.type = type;\r\n      el.async = async;\r\n      el.src = toValue(src);\r\n      if (defer)\r\n        el.defer = defer;\r\n      if (crossOrigin)\r\n        el.crossOrigin = crossOrigin;\r\n      if (noModule)\r\n        el.noModule = noModule;\r\n      if (referrerPolicy)\r\n        el.referrerPolicy = referrerPolicy;\r\n      Object.entries(attrs).forEach(([name, value]) => el == null ? void 0 : el.setAttribute(name, value));\r\n      shouldAppend = true;\r\n    } else if (el.hasAttribute(\"data-loaded\")) {\r\n      resolveWithElement(el);\r\n    }\r\n    el.addEventListener(\"error\", (event) => reject(event));\r\n    el.addEventListener(\"abort\", (event) => reject(event));\r\n    el.addEventListener(\"load\", () => {\r\n      el.setAttribute(\"data-loaded\", \"true\");\r\n      onLoaded(el);\r\n      resolveWithElement(el);\r\n    });\r\n    if (shouldAppend)\r\n      el = document.head.appendChild(el);\r\n    if (!waitForScriptLoad)\r\n      resolveWithElement(el);\r\n  });\r\n  const load = (waitForScriptLoad = true) => {\r\n    if (!_promise)\r\n      _promise = loadScript(waitForScriptLoad);\r\n    return _promise;\r\n  };\r\n  const unload = () => {\r\n    if (!document)\r\n      return;\r\n    _promise = null;\r\n    if (scriptTag.value)\r\n      scriptTag.value = null;\r\n    const el = document.querySelector(`script[src=\"${toValue(src)}\"]`);\r\n    if (el)\r\n      document.head.removeChild(el);\r\n  };\r\n  if (immediate && !manual)\r\n    tryOnMounted(load);\r\n  if (!manual)\r\n    tryOnUnmounted(unload);\r\n  return { scriptTag, load, unload };\r\n}\r\n\r\nfunction checkOverflowScroll(ele) {\r\n  const style = window.getComputedStyle(ele);\r\n  if (style.overflowX === \"scroll\" || style.overflowY === \"scroll\" || style.overflowX === \"auto\" && ele.clientWidth < ele.scrollWidth || style.overflowY === \"auto\" && ele.clientHeight < ele.scrollHeight) {\r\n    return true;\r\n  } else {\r\n    const parent = ele.parentNode;\r\n    if (!parent || parent.tagName === \"BODY\")\r\n      return false;\r\n    return checkOverflowScroll(parent);\r\n  }\r\n}\r\nfunction preventDefault(rawEvent) {\r\n  const e = rawEvent || window.event;\r\n  const _target = e.target;\r\n  if (checkOverflowScroll(_target))\r\n    return false;\r\n  if (e.touches.length > 1)\r\n    return true;\r\n  if (e.preventDefault)\r\n    e.preventDefault();\r\n  return false;\r\n}\r\nfunction useScrollLock(element, initialState = false) {\r\n  const isLocked = ref(initialState);\r\n  let stopTouchMoveListener = null;\r\n  let initialOverflow;\r\n  watch(toRef(element), (el) => {\r\n    if (el) {\r\n      const ele = el;\r\n      initialOverflow = ele.style.overflow;\r\n      if (isLocked.value)\r\n        ele.style.overflow = \"hidden\";\r\n    }\r\n  }, {\r\n    immediate: true\r\n  });\r\n  const lock = () => {\r\n    const ele = toValue(element);\r\n    if (!ele || isLocked.value)\r\n      return;\r\n    if (isIOS) {\r\n      stopTouchMoveListener = useEventListener(\r\n        ele,\r\n        \"touchmove\",\r\n        (e) => {\r\n          preventDefault(e);\r\n        },\r\n        { passive: false }\r\n      );\r\n    }\r\n    ele.style.overflow = \"hidden\";\r\n    isLocked.value = true;\r\n  };\r\n  const unlock = () => {\r\n    const ele = toValue(element);\r\n    if (!ele || !isLocked.value)\r\n      return;\r\n    isIOS && (stopTouchMoveListener == null ? void 0 : stopTouchMoveListener());\r\n    ele.style.overflow = initialOverflow;\r\n    isLocked.value = false;\r\n  };\r\n  tryOnScopeDispose(unlock);\r\n  return computed({\r\n    get() {\r\n      return isLocked.value;\r\n    },\r\n    set(v) {\r\n      if (v)\r\n        lock();\r\n      else\r\n        unlock();\r\n    }\r\n  });\r\n}\r\n\r\nfunction useSessionStorage(key, initialValue, options = {}) {\r\n  const { window = defaultWindow } = options;\r\n  return useStorage(key, initialValue, window == null ? void 0 : window.sessionStorage, options);\r\n}\r\n\r\nvar __defProp$5 = Object.defineProperty;\r\nvar __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$5 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$5 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$5 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$5.call(b, prop))\r\n      __defNormalProp$5(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$5)\r\n    for (var prop of __getOwnPropSymbols$5(b)) {\r\n      if (__propIsEnum$5.call(b, prop))\r\n        __defNormalProp$5(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useShare(shareOptions = {}, options = {}) {\r\n  const { navigator = defaultNavigator } = options;\r\n  const _navigator = navigator;\r\n  const isSupported = useSupported(() => _navigator && \"canShare\" in _navigator);\r\n  const share = async (overrideOptions = {}) => {\r\n    if (isSupported.value) {\r\n      const data = __spreadValues$5(__spreadValues$5({}, toValue(shareOptions)), toValue(overrideOptions));\r\n      let granted = true;\r\n      if (data.files && _navigator.canShare)\r\n        granted = _navigator.canShare({ files: data.files });\r\n      if (granted)\r\n        return _navigator.share(data);\r\n    }\r\n  };\r\n  return {\r\n    isSupported,\r\n    share\r\n  };\r\n}\r\n\r\nconst defaultSortFn = (source, compareFn) => source.sort(compareFn);\r\nconst defaultCompare = (a, b) => a - b;\r\nfunction useSorted(...args) {\r\n  var _a, _b, _c, _d;\r\n  const [source] = args;\r\n  let compareFn = defaultCompare;\r\n  let options = {};\r\n  if (args.length === 2) {\r\n    if (typeof args[1] === \"object\") {\r\n      options = args[1];\r\n      compareFn = (_a = options.compareFn) != null ? _a : defaultCompare;\r\n    } else {\r\n      compareFn = (_b = args[1]) != null ? _b : defaultCompare;\r\n    }\r\n  } else if (args.length > 2) {\r\n    compareFn = (_c = args[1]) != null ? _c : defaultCompare;\r\n    options = (_d = args[2]) != null ? _d : {};\r\n  }\r\n  const {\r\n    dirty = false,\r\n    sortFn = defaultSortFn\r\n  } = options;\r\n  if (!dirty)\r\n    return computed(() => sortFn([...toValue(source)], compareFn));\r\n  watchEffect(() => {\r\n    const result = sortFn(toValue(source), compareFn);\r\n    if (isRef(source))\r\n      source.value = result;\r\n    else\r\n      source.splice(0, source.length, ...result);\r\n  });\r\n  return source;\r\n}\r\n\r\nfunction useSpeechRecognition(options = {}) {\r\n  const {\r\n    interimResults = true,\r\n    continuous = true,\r\n    window = defaultWindow\r\n  } = options;\r\n  const lang = toRef(options.lang || \"en-US\");\r\n  const isListening = ref(false);\r\n  const isFinal = ref(false);\r\n  const result = ref(\"\");\r\n  const error = shallowRef(void 0);\r\n  const toggle = (value = !isListening.value) => {\r\n    isListening.value = value;\r\n  };\r\n  const start = () => {\r\n    isListening.value = true;\r\n  };\r\n  const stop = () => {\r\n    isListening.value = false;\r\n  };\r\n  const SpeechRecognition = window && (window.SpeechRecognition || window.webkitSpeechRecognition);\r\n  const isSupported = useSupported(() => SpeechRecognition);\r\n  let recognition;\r\n  if (isSupported.value) {\r\n    recognition = new SpeechRecognition();\r\n    recognition.continuous = continuous;\r\n    recognition.interimResults = interimResults;\r\n    recognition.lang = toValue(lang);\r\n    recognition.onstart = () => {\r\n      isFinal.value = false;\r\n    };\r\n    watch(lang, (lang2) => {\r\n      if (recognition && !isListening.value)\r\n        recognition.lang = lang2;\r\n    });\r\n    recognition.onresult = (event) => {\r\n      const transcript = Array.from(event.results).map((result2) => {\r\n        isFinal.value = result2.isFinal;\r\n        return result2[0];\r\n      }).map((result2) => result2.transcript).join(\"\");\r\n      result.value = transcript;\r\n      error.value = void 0;\r\n    };\r\n    recognition.onerror = (event) => {\r\n      error.value = event;\r\n    };\r\n    recognition.onend = () => {\r\n      isListening.value = false;\r\n      recognition.lang = toValue(lang);\r\n    };\r\n    watch(isListening, () => {\r\n      if (isListening.value)\r\n        recognition.start();\r\n      else\r\n        recognition.stop();\r\n    });\r\n  }\r\n  tryOnScopeDispose(() => {\r\n    isListening.value = false;\r\n  });\r\n  return {\r\n    isSupported,\r\n    isListening,\r\n    isFinal,\r\n    recognition,\r\n    result,\r\n    error,\r\n    toggle,\r\n    start,\r\n    stop\r\n  };\r\n}\r\n\r\nfunction useSpeechSynthesis(text, options = {}) {\r\n  const {\r\n    pitch = 1,\r\n    rate = 1,\r\n    volume = 1,\r\n    window = defaultWindow\r\n  } = options;\r\n  const synth = window && window.speechSynthesis;\r\n  const isSupported = useSupported(() => synth);\r\n  const isPlaying = ref(false);\r\n  const status = ref(\"init\");\r\n  const spokenText = toRef(text || \"\");\r\n  const lang = toRef(options.lang || \"en-US\");\r\n  const error = shallowRef(void 0);\r\n  const toggle = (value = !isPlaying.value) => {\r\n    isPlaying.value = value;\r\n  };\r\n  const bindEventsForUtterance = (utterance2) => {\r\n    utterance2.lang = toValue(lang);\r\n    utterance2.voice = toValue(options.voice) || null;\r\n    utterance2.pitch = pitch;\r\n    utterance2.rate = rate;\r\n    utterance2.volume = volume;\r\n    utterance2.onstart = () => {\r\n      isPlaying.value = true;\r\n      status.value = \"play\";\r\n    };\r\n    utterance2.onpause = () => {\r\n      isPlaying.value = false;\r\n      status.value = \"pause\";\r\n    };\r\n    utterance2.onresume = () => {\r\n      isPlaying.value = true;\r\n      status.value = \"play\";\r\n    };\r\n    utterance2.onend = () => {\r\n      isPlaying.value = false;\r\n      status.value = \"end\";\r\n    };\r\n    utterance2.onerror = (event) => {\r\n      error.value = event;\r\n    };\r\n  };\r\n  const utterance = computed(() => {\r\n    isPlaying.value = false;\r\n    status.value = \"init\";\r\n    const newUtterance = new SpeechSynthesisUtterance(spokenText.value);\r\n    bindEventsForUtterance(newUtterance);\r\n    return newUtterance;\r\n  });\r\n  const speak = () => {\r\n    synth.cancel();\r\n    utterance && synth.speak(utterance.value);\r\n  };\r\n  const stop = () => {\r\n    synth.cancel();\r\n    isPlaying.value = false;\r\n  };\r\n  if (isSupported.value) {\r\n    bindEventsForUtterance(utterance.value);\r\n    watch(lang, (lang2) => {\r\n      if (utterance.value && !isPlaying.value)\r\n        utterance.value.lang = lang2;\r\n    });\r\n    if (options.voice) {\r\n      watch(options.voice, () => {\r\n        synth.cancel();\r\n      });\r\n    }\r\n    watch(isPlaying, () => {\r\n      if (isPlaying.value)\r\n        synth.resume();\r\n      else\r\n        synth.pause();\r\n    });\r\n  }\r\n  tryOnScopeDispose(() => {\r\n    isPlaying.value = false;\r\n  });\r\n  return {\r\n    isSupported,\r\n    isPlaying,\r\n    status,\r\n    utterance,\r\n    error,\r\n    stop,\r\n    toggle,\r\n    speak\r\n  };\r\n}\r\n\r\nfunction useStepper(steps, initialStep) {\r\n  const stepsRef = ref(steps);\r\n  const stepNames = computed(() => Array.isArray(stepsRef.value) ? stepsRef.value : Object.keys(stepsRef.value));\r\n  const index = ref(stepNames.value.indexOf(initialStep != null ? initialStep : stepNames.value[0]));\r\n  const current = computed(() => at(index.value));\r\n  const isFirst = computed(() => index.value === 0);\r\n  const isLast = computed(() => index.value === stepNames.value.length - 1);\r\n  const next = computed(() => stepNames.value[index.value + 1]);\r\n  const previous = computed(() => stepNames.value[index.value - 1]);\r\n  function at(index2) {\r\n    if (Array.isArray(stepsRef.value))\r\n      return stepsRef.value[index2];\r\n    return stepsRef.value[stepNames.value[index2]];\r\n  }\r\n  function get(step) {\r\n    if (!stepNames.value.includes(step))\r\n      return;\r\n    return at(stepNames.value.indexOf(step));\r\n  }\r\n  function goTo(step) {\r\n    if (stepNames.value.includes(step))\r\n      index.value = stepNames.value.indexOf(step);\r\n  }\r\n  function goToNext() {\r\n    if (isLast.value)\r\n      return;\r\n    index.value++;\r\n  }\r\n  function goToPrevious() {\r\n    if (isFirst.value)\r\n      return;\r\n    index.value--;\r\n  }\r\n  function goBackTo(step) {\r\n    if (isAfter(step))\r\n      goTo(step);\r\n  }\r\n  function isNext(step) {\r\n    return stepNames.value.indexOf(step) === index.value + 1;\r\n  }\r\n  function isPrevious(step) {\r\n    return stepNames.value.indexOf(step) === index.value - 1;\r\n  }\r\n  function isCurrent(step) {\r\n    return stepNames.value.indexOf(step) === index.value;\r\n  }\r\n  function isBefore(step) {\r\n    return index.value < stepNames.value.indexOf(step);\r\n  }\r\n  function isAfter(step) {\r\n    return index.value > stepNames.value.indexOf(step);\r\n  }\r\n  return {\r\n    steps: stepsRef,\r\n    stepNames,\r\n    index,\r\n    current,\r\n    next,\r\n    previous,\r\n    isFirst,\r\n    isLast,\r\n    at,\r\n    get,\r\n    goTo,\r\n    goToNext,\r\n    goToPrevious,\r\n    goBackTo,\r\n    isNext,\r\n    isPrevious,\r\n    isCurrent,\r\n    isBefore,\r\n    isAfter\r\n  };\r\n}\r\n\r\nvar __defProp$4 = Object.defineProperty;\r\nvar __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$4 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$4 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$4 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$4.call(b, prop))\r\n      __defNormalProp$4(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$4)\r\n    for (var prop of __getOwnPropSymbols$4(b)) {\r\n      if (__propIsEnum$4.call(b, prop))\r\n        __defNormalProp$4(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useStorageAsync(key, initialValue, storage, options = {}) {\r\n  var _a;\r\n  const {\r\n    flush = \"pre\",\r\n    deep = true,\r\n    listenToStorageChanges = true,\r\n    writeDefaults = true,\r\n    mergeDefaults = false,\r\n    shallow,\r\n    window = defaultWindow,\r\n    eventFilter,\r\n    onError = (e) => {\r\n      console.error(e);\r\n    }\r\n  } = options;\r\n  const rawInit = toValue(initialValue);\r\n  const type = guessSerializerType(rawInit);\r\n  const data = (shallow ? shallowRef : ref)(initialValue);\r\n  const serializer = (_a = options.serializer) != null ? _a : StorageSerializers[type];\r\n  if (!storage) {\r\n    try {\r\n      storage = getSSRHandler(\"getDefaultStorage\", () => {\r\n        var _a2;\r\n        return (_a2 = defaultWindow) == null ? void 0 : _a2.localStorage;\r\n      })();\r\n    } catch (e) {\r\n      onError(e);\r\n    }\r\n  }\r\n  async function read(event) {\r\n    if (!storage || event && event.key !== key)\r\n      return;\r\n    try {\r\n      const rawValue = event ? event.newValue : await storage.getItem(key);\r\n      if (rawValue == null) {\r\n        data.value = rawInit;\r\n        if (writeDefaults && rawInit !== null)\r\n          await storage.setItem(key, await serializer.write(rawInit));\r\n      } else if (mergeDefaults) {\r\n        const value = await serializer.read(rawValue);\r\n        if (typeof mergeDefaults === \"function\")\r\n          data.value = mergeDefaults(value, rawInit);\r\n        else if (type === \"object\" && !Array.isArray(value))\r\n          data.value = __spreadValues$4(__spreadValues$4({}, rawInit), value);\r\n        else\r\n          data.value = value;\r\n      } else {\r\n        data.value = await serializer.read(rawValue);\r\n      }\r\n    } catch (e) {\r\n      onError(e);\r\n    }\r\n  }\r\n  read();\r\n  if (window && listenToStorageChanges)\r\n    useEventListener(window, \"storage\", (e) => Promise.resolve().then(() => read(e)));\r\n  if (storage) {\r\n    watchWithFilter(\r\n      data,\r\n      async () => {\r\n        try {\r\n          if (data.value == null)\r\n            await storage.removeItem(key);\r\n          else\r\n            await storage.setItem(key, await serializer.write(data.value));\r\n        } catch (e) {\r\n          onError(e);\r\n        }\r\n      },\r\n      {\r\n        flush,\r\n        deep,\r\n        eventFilter\r\n      }\r\n    );\r\n  }\r\n  return data;\r\n}\r\n\r\nlet _id = 0;\r\nfunction useStyleTag(css, options = {}) {\r\n  const isLoaded = ref(false);\r\n  const {\r\n    document = defaultDocument,\r\n    immediate = true,\r\n    manual = false,\r\n    id = `vueuse_styletag_${++_id}`\r\n  } = options;\r\n  const cssRef = ref(css);\r\n  let stop = () => {\r\n  };\r\n  const load = () => {\r\n    if (!document)\r\n      return;\r\n    const el = document.getElementById(id) || document.createElement(\"style\");\r\n    if (!el.isConnected) {\r\n      el.type = \"text/css\";\r\n      el.id = id;\r\n      if (options.media)\r\n        el.media = options.media;\r\n      document.head.appendChild(el);\r\n    }\r\n    if (isLoaded.value)\r\n      return;\r\n    stop = watch(\r\n      cssRef,\r\n      (value) => {\r\n        el.textContent = value;\r\n      },\r\n      { immediate: true }\r\n    );\r\n    isLoaded.value = true;\r\n  };\r\n  const unload = () => {\r\n    if (!document || !isLoaded.value)\r\n      return;\r\n    stop();\r\n    document.head.removeChild(document.getElementById(id));\r\n    isLoaded.value = false;\r\n  };\r\n  if (immediate && !manual)\r\n    tryOnMounted(load);\r\n  if (!manual)\r\n    tryOnScopeDispose(unload);\r\n  return {\r\n    id,\r\n    css: cssRef,\r\n    unload,\r\n    load,\r\n    isLoaded: readonly(isLoaded)\r\n  };\r\n}\r\n\r\nfunction useSwipe(target, options = {}) {\r\n  const {\r\n    threshold = 50,\r\n    onSwipe,\r\n    onSwipeEnd,\r\n    onSwipeStart,\r\n    passive = true,\r\n    window = defaultWindow\r\n  } = options;\r\n  const coordsStart = reactive({ x: 0, y: 0 });\r\n  const coordsEnd = reactive({ x: 0, y: 0 });\r\n  const diffX = computed(() => coordsStart.x - coordsEnd.x);\r\n  const diffY = computed(() => coordsStart.y - coordsEnd.y);\r\n  const { max, abs } = Math;\r\n  const isThresholdExceeded = computed(() => max(abs(diffX.value), abs(diffY.value)) >= threshold);\r\n  const isSwiping = ref(false);\r\n  const direction = computed(() => {\r\n    if (!isThresholdExceeded.value)\r\n      return \"none\";\r\n    if (abs(diffX.value) > abs(diffY.value)) {\r\n      return diffX.value > 0 ? \"left\" : \"right\";\r\n    } else {\r\n      return diffY.value > 0 ? \"up\" : \"down\";\r\n    }\r\n  });\r\n  const getTouchEventCoords = (e) => [e.touches[0].clientX, e.touches[0].clientY];\r\n  const updateCoordsStart = (x, y) => {\r\n    coordsStart.x = x;\r\n    coordsStart.y = y;\r\n  };\r\n  const updateCoordsEnd = (x, y) => {\r\n    coordsEnd.x = x;\r\n    coordsEnd.y = y;\r\n  };\r\n  let listenerOptions;\r\n  const isPassiveEventSupported = checkPassiveEventSupport(window == null ? void 0 : window.document);\r\n  if (!passive)\r\n    listenerOptions = isPassiveEventSupported ? { passive: false, capture: true } : { capture: true };\r\n  else\r\n    listenerOptions = isPassiveEventSupported ? { passive: true } : { capture: false };\r\n  const onTouchEnd = (e) => {\r\n    if (isSwiping.value)\r\n      onSwipeEnd == null ? void 0 : onSwipeEnd(e, direction.value);\r\n    isSwiping.value = false;\r\n  };\r\n  const stops = [\r\n    useEventListener(target, \"touchstart\", (e) => {\r\n      if (e.touches.length !== 1)\r\n        return;\r\n      if (listenerOptions.capture && !listenerOptions.passive)\r\n        e.preventDefault();\r\n      const [x, y] = getTouchEventCoords(e);\r\n      updateCoordsStart(x, y);\r\n      updateCoordsEnd(x, y);\r\n      onSwipeStart == null ? void 0 : onSwipeStart(e);\r\n    }, listenerOptions),\r\n    useEventListener(target, \"touchmove\", (e) => {\r\n      if (e.touches.length !== 1)\r\n        return;\r\n      const [x, y] = getTouchEventCoords(e);\r\n      updateCoordsEnd(x, y);\r\n      if (!isSwiping.value && isThresholdExceeded.value)\r\n        isSwiping.value = true;\r\n      if (isSwiping.value)\r\n        onSwipe == null ? void 0 : onSwipe(e);\r\n    }, listenerOptions),\r\n    useEventListener(target, \"touchend\", onTouchEnd, listenerOptions),\r\n    useEventListener(target, \"touchcancel\", onTouchEnd, listenerOptions)\r\n  ];\r\n  const stop = () => stops.forEach((s) => s());\r\n  return {\r\n    isPassiveEventSupported,\r\n    isSwiping,\r\n    direction,\r\n    coordsStart,\r\n    coordsEnd,\r\n    lengthX: diffX,\r\n    lengthY: diffY,\r\n    stop\r\n  };\r\n}\r\nfunction checkPassiveEventSupport(document) {\r\n  if (!document)\r\n    return false;\r\n  let supportsPassive = false;\r\n  const optionsBlock = {\r\n    get passive() {\r\n      supportsPassive = true;\r\n      return false;\r\n    }\r\n  };\r\n  document.addEventListener(\"x\", noop, optionsBlock);\r\n  document.removeEventListener(\"x\", noop);\r\n  return supportsPassive;\r\n}\r\n\r\nfunction useTemplateRefsList() {\r\n  const refs = ref([]);\r\n  refs.value.set = (el) => {\r\n    if (el)\r\n      refs.value.push(el);\r\n  };\r\n  onBeforeUpdate(() => {\r\n    refs.value.length = 0;\r\n  });\r\n  return refs;\r\n}\r\n\r\nfunction useTextDirection(options = {}) {\r\n  const {\r\n    document = defaultDocument,\r\n    selector = \"html\",\r\n    observe = false,\r\n    initialValue = \"ltr\"\r\n  } = options;\r\n  function getValue() {\r\n    var _a, _b;\r\n    return (_b = (_a = document == null ? void 0 : document.querySelector(selector)) == null ? void 0 : _a.getAttribute(\"dir\")) != null ? _b : initialValue;\r\n  }\r\n  const dir = ref(getValue());\r\n  tryOnMounted(() => dir.value = getValue());\r\n  if (observe && document) {\r\n    useMutationObserver(\r\n      document.querySelector(selector),\r\n      () => dir.value = getValue(),\r\n      { attributes: true }\r\n    );\r\n  }\r\n  return computed({\r\n    get() {\r\n      return dir.value;\r\n    },\r\n    set(v) {\r\n      var _a, _b;\r\n      dir.value = v;\r\n      if (!document)\r\n        return;\r\n      if (dir.value)\r\n        (_a = document.querySelector(selector)) == null ? void 0 : _a.setAttribute(\"dir\", dir.value);\r\n      else\r\n        (_b = document.querySelector(selector)) == null ? void 0 : _b.removeAttribute(\"dir\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction getRangesFromSelection(selection) {\r\n  var _a;\r\n  const rangeCount = (_a = selection.rangeCount) != null ? _a : 0;\r\n  const ranges = new Array(rangeCount);\r\n  for (let i = 0; i < rangeCount; i++) {\r\n    const range = selection.getRangeAt(i);\r\n    ranges[i] = range;\r\n  }\r\n  return ranges;\r\n}\r\nfunction useTextSelection(options = {}) {\r\n  const {\r\n    window = defaultWindow\r\n  } = options;\r\n  const selection = ref(null);\r\n  const text = computed(() => {\r\n    var _a, _b;\r\n    return (_b = (_a = selection.value) == null ? void 0 : _a.toString()) != null ? _b : \"\";\r\n  });\r\n  const ranges = computed(() => selection.value ? getRangesFromSelection(selection.value) : []);\r\n  const rects = computed(() => ranges.value.map((range) => range.getBoundingClientRect()));\r\n  function onSelectionChange() {\r\n    selection.value = null;\r\n    if (window)\r\n      selection.value = window.getSelection();\r\n  }\r\n  if (window)\r\n    useEventListener(window.document, \"selectionchange\", onSelectionChange);\r\n  return {\r\n    text,\r\n    rects,\r\n    ranges,\r\n    selection\r\n  };\r\n}\r\n\r\nfunction useTextareaAutosize(options) {\r\n  const textarea = ref(options == null ? void 0 : options.element);\r\n  const input = ref(options == null ? void 0 : options.input);\r\n  const textareaScrollHeight = ref(1);\r\n  function triggerResize() {\r\n    var _a, _b;\r\n    if (!textarea.value)\r\n      return;\r\n    let height = \"\";\r\n    textarea.value.style.height = \"1px\";\r\n    textareaScrollHeight.value = (_a = textarea.value) == null ? void 0 : _a.scrollHeight;\r\n    if (options == null ? void 0 : options.styleTarget)\r\n      toValue(options.styleTarget).style.height = `${textareaScrollHeight.value}px`;\r\n    else\r\n      height = `${textareaScrollHeight.value}px`;\r\n    textarea.value.style.height = height;\r\n    (_b = options == null ? void 0 : options.onResize) == null ? void 0 : _b.call(options);\r\n  }\r\n  watch([input, textarea], () => nextTick(triggerResize), { immediate: true });\r\n  useResizeObserver(textarea, () => triggerResize());\r\n  if (options == null ? void 0 : options.watch)\r\n    watch(options.watch, triggerResize, { immediate: true, deep: true });\r\n  return {\r\n    textarea,\r\n    input,\r\n    triggerResize\r\n  };\r\n}\r\n\r\nvar __defProp$3 = Object.defineProperty;\r\nvar __defProps$1 = Object.defineProperties;\r\nvar __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$3 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$3 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$3 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$3.call(b, prop))\r\n      __defNormalProp$3(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$3)\r\n    for (var prop of __getOwnPropSymbols$3(b)) {\r\n      if (__propIsEnum$3.call(b, prop))\r\n        __defNormalProp$3(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));\r\nfunction useThrottledRefHistory(source, options = {}) {\r\n  const { throttle = 200, trailing = true } = options;\r\n  const filter = throttleFilter(throttle, trailing);\r\n  const history = useRefHistory(source, __spreadProps$1(__spreadValues$3({}, options), { eventFilter: filter }));\r\n  return __spreadValues$3({}, history);\r\n}\r\n\r\nvar __defProp$2 = Object.defineProperty;\r\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$2 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$2.call(b, prop))\r\n      __defNormalProp$2(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$2)\r\n    for (var prop of __getOwnPropSymbols$2(b)) {\r\n      if (__propIsEnum$2.call(b, prop))\r\n        __defNormalProp$2(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __objRest = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp$2.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols$2)\r\n    for (var prop of __getOwnPropSymbols$2(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$2.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nconst DEFAULT_UNITS = [\r\n  { max: 6e4, value: 1e3, name: \"second\" },\r\n  { max: 276e4, value: 6e4, name: \"minute\" },\r\n  { max: 72e6, value: 36e5, name: \"hour\" },\r\n  { max: 5184e5, value: 864e5, name: \"day\" },\r\n  { max: 24192e5, value: 6048e5, name: \"week\" },\r\n  { max: 28512e6, value: 2592e6, name: \"month\" },\r\n  { max: Infinity, value: 31536e6, name: \"year\" }\r\n];\r\nconst DEFAULT_MESSAGES = {\r\n  justNow: \"just now\",\r\n  past: (n) => n.match(/\\d/) ? `${n} ago` : n,\r\n  future: (n) => n.match(/\\d/) ? `in ${n}` : n,\r\n  month: (n, past) => n === 1 ? past ? \"last month\" : \"next month\" : `${n} month${n > 1 ? \"s\" : \"\"}`,\r\n  year: (n, past) => n === 1 ? past ? \"last year\" : \"next year\" : `${n} year${n > 1 ? \"s\" : \"\"}`,\r\n  day: (n, past) => n === 1 ? past ? \"yesterday\" : \"tomorrow\" : `${n} day${n > 1 ? \"s\" : \"\"}`,\r\n  week: (n, past) => n === 1 ? past ? \"last week\" : \"next week\" : `${n} week${n > 1 ? \"s\" : \"\"}`,\r\n  hour: (n) => `${n} hour${n > 1 ? \"s\" : \"\"}`,\r\n  minute: (n) => `${n} minute${n > 1 ? \"s\" : \"\"}`,\r\n  second: (n) => `${n} second${n > 1 ? \"s\" : \"\"}`,\r\n  invalid: \"\"\r\n};\r\nfunction DEFAULT_FORMATTER(date) {\r\n  return date.toISOString().slice(0, 10);\r\n}\r\nfunction useTimeAgo(time, options = {}) {\r\n  const {\r\n    controls: exposeControls = false,\r\n    updateInterval = 3e4\r\n  } = options;\r\n  const _a = useNow({ interval: updateInterval, controls: true }), { now } = _a, controls = __objRest(_a, [\"now\"]);\r\n  const timeAgo = computed(() => formatTimeAgo(new Date(toValue(time)), options, toValue(now)));\r\n  if (exposeControls) {\r\n    return __spreadValues$2({\r\n      timeAgo\r\n    }, controls);\r\n  } else {\r\n    return timeAgo;\r\n  }\r\n}\r\nfunction formatTimeAgo(from, options = {}, now = Date.now()) {\r\n  var _a;\r\n  const {\r\n    max,\r\n    messages = DEFAULT_MESSAGES,\r\n    fullDateFormatter = DEFAULT_FORMATTER,\r\n    units = DEFAULT_UNITS,\r\n    showSecond = false,\r\n    rounding = \"round\"\r\n  } = options;\r\n  const roundFn = typeof rounding === \"number\" ? (n) => +n.toFixed(rounding) : Math[rounding];\r\n  const diff = +now - +from;\r\n  const absDiff = Math.abs(diff);\r\n  function getValue(diff2, unit) {\r\n    return roundFn(Math.abs(diff2) / unit.value);\r\n  }\r\n  function format(diff2, unit) {\r\n    const val = getValue(diff2, unit);\r\n    const past = diff2 > 0;\r\n    const str = applyFormat(unit.name, val, past);\r\n    return applyFormat(past ? \"past\" : \"future\", str, past);\r\n  }\r\n  function applyFormat(name, val, isPast) {\r\n    const formatter = messages[name];\r\n    if (typeof formatter === \"function\")\r\n      return formatter(val, isPast);\r\n    return formatter.replace(\"{0}\", val.toString());\r\n  }\r\n  if (absDiff < 6e4 && !showSecond)\r\n    return messages.justNow;\r\n  if (typeof max === \"number\" && absDiff > max)\r\n    return fullDateFormatter(new Date(from));\r\n  if (typeof max === \"string\") {\r\n    const unitMax = (_a = units.find((i) => i.name === max)) == null ? void 0 : _a.max;\r\n    if (unitMax && absDiff > unitMax)\r\n      return fullDateFormatter(new Date(from));\r\n  }\r\n  for (const [idx, unit] of units.entries()) {\r\n    const val = getValue(diff, unit);\r\n    if (val <= 0 && units[idx - 1])\r\n      return format(diff, units[idx - 1]);\r\n    if (absDiff < unit.max)\r\n      return format(diff, unit);\r\n  }\r\n  return messages.invalid;\r\n}\r\n\r\nfunction useTimeoutPoll(fn, interval, timeoutPollOptions) {\r\n  const { start } = useTimeoutFn(loop, interval, { immediate: false });\r\n  const isActive = ref(false);\r\n  async function loop() {\r\n    if (!isActive.value)\r\n      return;\r\n    await fn();\r\n    start();\r\n  }\r\n  function resume() {\r\n    if (!isActive.value) {\r\n      isActive.value = true;\r\n      loop();\r\n    }\r\n  }\r\n  function pause() {\r\n    isActive.value = false;\r\n  }\r\n  if (timeoutPollOptions == null ? void 0 : timeoutPollOptions.immediate)\r\n    resume();\r\n  tryOnScopeDispose(pause);\r\n  return {\r\n    isActive,\r\n    pause,\r\n    resume\r\n  };\r\n}\r\n\r\nvar __defProp$1 = Object.defineProperty;\r\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues$1 = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp$1.call(b, prop))\r\n      __defNormalProp$1(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols$1)\r\n    for (var prop of __getOwnPropSymbols$1(b)) {\r\n      if (__propIsEnum$1.call(b, prop))\r\n        __defNormalProp$1(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nfunction useTimestamp(options = {}) {\r\n  const {\r\n    controls: exposeControls = false,\r\n    offset = 0,\r\n    immediate = true,\r\n    interval = \"requestAnimationFrame\",\r\n    callback\r\n  } = options;\r\n  const ts = ref(timestamp() + offset);\r\n  const update = () => ts.value = timestamp() + offset;\r\n  const cb = callback ? () => {\r\n    update();\r\n    callback(ts.value);\r\n  } : update;\r\n  const controls = interval === \"requestAnimationFrame\" ? useRafFn(cb, { immediate }) : useIntervalFn(cb, interval, { immediate });\r\n  if (exposeControls) {\r\n    return __spreadValues$1({\r\n      timestamp: ts\r\n    }, controls);\r\n  } else {\r\n    return ts;\r\n  }\r\n}\r\n\r\nfunction useTitle(newTitle = null, options = {}) {\r\n  var _a, _b;\r\n  const {\r\n    document = defaultDocument\r\n  } = options;\r\n  const title = toRef((_a = newTitle != null ? newTitle : document == null ? void 0 : document.title) != null ? _a : null);\r\n  const isReadonly = newTitle && typeof newTitle === \"function\";\r\n  function format(t) {\r\n    if (!(\"titleTemplate\" in options))\r\n      return t;\r\n    const template = options.titleTemplate || \"%s\";\r\n    return typeof template === \"function\" ? template(t) : toValue(template).replace(/%s/g, t);\r\n  }\r\n  watch(\r\n    title,\r\n    (t, o) => {\r\n      if (t !== o && document)\r\n        document.title = format(typeof t === \"string\" ? t : \"\");\r\n    },\r\n    { immediate: true }\r\n  );\r\n  if (options.observe && !options.titleTemplate && document && !isReadonly) {\r\n    useMutationObserver(\r\n      (_b = document.head) == null ? void 0 : _b.querySelector(\"title\"),\r\n      () => {\r\n        if (document && document.title !== title.value)\r\n          title.value = format(document.title);\r\n      },\r\n      { childList: true }\r\n    );\r\n  }\r\n  return title;\r\n}\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp.call(b, prop))\r\n      __defNormalProp(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols)\r\n    for (var prop of __getOwnPropSymbols(b)) {\r\n      if (__propIsEnum.call(b, prop))\r\n        __defNormalProp(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\r\nconst _TransitionPresets = {\r\n  easeInSine: [0.12, 0, 0.39, 0],\r\n  easeOutSine: [0.61, 1, 0.88, 1],\r\n  easeInOutSine: [0.37, 0, 0.63, 1],\r\n  easeInQuad: [0.11, 0, 0.5, 0],\r\n  easeOutQuad: [0.5, 1, 0.89, 1],\r\n  easeInOutQuad: [0.45, 0, 0.55, 1],\r\n  easeInCubic: [0.32, 0, 0.67, 0],\r\n  easeOutCubic: [0.33, 1, 0.68, 1],\r\n  easeInOutCubic: [0.65, 0, 0.35, 1],\r\n  easeInQuart: [0.5, 0, 0.75, 0],\r\n  easeOutQuart: [0.25, 1, 0.5, 1],\r\n  easeInOutQuart: [0.76, 0, 0.24, 1],\r\n  easeInQuint: [0.64, 0, 0.78, 0],\r\n  easeOutQuint: [0.22, 1, 0.36, 1],\r\n  easeInOutQuint: [0.83, 0, 0.17, 1],\r\n  easeInExpo: [0.7, 0, 0.84, 0],\r\n  easeOutExpo: [0.16, 1, 0.3, 1],\r\n  easeInOutExpo: [0.87, 0, 0.13, 1],\r\n  easeInCirc: [0.55, 0, 1, 0.45],\r\n  easeOutCirc: [0, 0.55, 0.45, 1],\r\n  easeInOutCirc: [0.85, 0, 0.15, 1],\r\n  easeInBack: [0.36, 0, 0.66, -0.56],\r\n  easeOutBack: [0.34, 1.56, 0.64, 1],\r\n  easeInOutBack: [0.68, -0.6, 0.32, 1.6]\r\n};\r\nconst TransitionPresets = /* @__PURE__ */ Object.assign({}, { linear: identity }, _TransitionPresets);\r\nfunction createEasingFunction([p0, p1, p2, p3]) {\r\n  const a = (a1, a2) => 1 - 3 * a2 + 3 * a1;\r\n  const b = (a1, a2) => 3 * a2 - 6 * a1;\r\n  const c = (a1) => 3 * a1;\r\n  const calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\r\n  const getSlope = (t, a1, a2) => 3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);\r\n  const getTforX = (x) => {\r\n    let aGuessT = x;\r\n    for (let i = 0; i < 4; ++i) {\r\n      const currentSlope = getSlope(aGuessT, p0, p2);\r\n      if (currentSlope === 0)\r\n        return aGuessT;\r\n      const currentX = calcBezier(aGuessT, p0, p2) - x;\r\n      aGuessT -= currentX / currentSlope;\r\n    }\r\n    return aGuessT;\r\n  };\r\n  return (x) => p0 === p1 && p2 === p3 ? x : calcBezier(getTforX(x), p1, p3);\r\n}\r\nfunction lerp(a, b, alpha) {\r\n  return a + alpha * (b - a);\r\n}\r\nfunction toVec(t) {\r\n  return (typeof t === \"number\" ? [t] : t) || [];\r\n}\r\nfunction executeTransition(source, from, to, options = {}) {\r\n  var _a, _b;\r\n  const fromVal = toValue(from);\r\n  const toVal = toValue(to);\r\n  const v1 = toVec(fromVal);\r\n  const v2 = toVec(toVal);\r\n  const duration = (_a = toValue(options.duration)) != null ? _a : 1e3;\r\n  const startedAt = Date.now();\r\n  const endAt = Date.now() + duration;\r\n  const trans = typeof options.transition === \"function\" ? options.transition : (_b = toValue(options.transition)) != null ? _b : identity;\r\n  const ease = typeof trans === \"function\" ? trans : createEasingFunction(trans);\r\n  return new Promise((resolve) => {\r\n    source.value = fromVal;\r\n    const tick = () => {\r\n      var _a2;\r\n      if ((_a2 = options.abort) == null ? void 0 : _a2.call(options)) {\r\n        resolve();\r\n        return;\r\n      }\r\n      const now = Date.now();\r\n      const alpha = ease((now - startedAt) / duration);\r\n      const arr = toVec(source.value).map((n, i) => lerp(v1[i], v2[i], alpha));\r\n      if (Array.isArray(source.value))\r\n        source.value = arr.map((n, i) => {\r\n          var _a3, _b2;\r\n          return lerp((_a3 = v1[i]) != null ? _a3 : 0, (_b2 = v2[i]) != null ? _b2 : 0, alpha);\r\n        });\r\n      else if (typeof source.value === \"number\")\r\n        source.value = arr[0];\r\n      if (now < endAt) {\r\n        requestAnimationFrame(tick);\r\n      } else {\r\n        source.value = toVal;\r\n        resolve();\r\n      }\r\n    };\r\n    tick();\r\n  });\r\n}\r\nfunction useTransition(source, options = {}) {\r\n  let currentId = 0;\r\n  const sourceVal = () => {\r\n    const v = toValue(source);\r\n    return typeof v === \"number\" ? v : v.map(toValue);\r\n  };\r\n  const outputRef = ref(sourceVal());\r\n  watch(sourceVal, async (to) => {\r\n    var _a, _b;\r\n    if (toValue(options.disabled))\r\n      return;\r\n    const id = ++currentId;\r\n    if (options.delay)\r\n      await promiseTimeout(toValue(options.delay));\r\n    if (id !== currentId)\r\n      return;\r\n    const toVal = Array.isArray(to) ? to.map(toValue) : toValue(to);\r\n    (_a = options.onStarted) == null ? void 0 : _a.call(options);\r\n    await executeTransition(outputRef, outputRef.value, toVal, __spreadProps(__spreadValues({}, options), {\r\n      abort: () => {\r\n        var _a2;\r\n        return id !== currentId || ((_a2 = options.abort) == null ? void 0 : _a2.call(options));\r\n      }\r\n    }));\r\n    (_b = options.onFinished) == null ? void 0 : _b.call(options);\r\n  }, { deep: true });\r\n  watch(() => toValue(options.disabled), (disabled) => {\r\n    if (disabled) {\r\n      currentId++;\r\n      outputRef.value = sourceVal();\r\n    }\r\n  });\r\n  tryOnScopeDispose(() => {\r\n    currentId++;\r\n  });\r\n  return computed(() => toValue(options.disabled) ? sourceVal() : outputRef.value);\r\n}\r\n\r\nfunction useUrlSearchParams(mode = \"history\", options = {}) {\r\n  const {\r\n    initialValue = {},\r\n    removeNullishValues = true,\r\n    removeFalsyValues = false,\r\n    write: enableWrite = true,\r\n    window = defaultWindow\r\n  } = options;\r\n  if (!window)\r\n    return reactive(initialValue);\r\n  const state = reactive({});\r\n  function getRawParams() {\r\n    if (mode === \"history\") {\r\n      return window.location.search || \"\";\r\n    } else if (mode === \"hash\") {\r\n      const hash = window.location.hash || \"\";\r\n      const index = hash.indexOf(\"?\");\r\n      return index > 0 ? hash.slice(index) : \"\";\r\n    } else {\r\n      return (window.location.hash || \"\").replace(/^#/, \"\");\r\n    }\r\n  }\r\n  function constructQuery(params) {\r\n    const stringified = params.toString();\r\n    if (mode === \"history\")\r\n      return `${stringified ? `?${stringified}` : \"\"}${window.location.hash || \"\"}`;\r\n    if (mode === \"hash-params\")\r\n      return `${window.location.search || \"\"}${stringified ? `#${stringified}` : \"\"}`;\r\n    const hash = window.location.hash || \"#\";\r\n    const index = hash.indexOf(\"?\");\r\n    if (index > 0)\r\n      return `${hash.slice(0, index)}${stringified ? `?${stringified}` : \"\"}`;\r\n    return `${hash}${stringified ? `?${stringified}` : \"\"}`;\r\n  }\r\n  function read() {\r\n    return new URLSearchParams(getRawParams());\r\n  }\r\n  function updateState(params) {\r\n    const unusedKeys = new Set(Object.keys(state));\r\n    for (const key of params.keys()) {\r\n      const paramsForKey = params.getAll(key);\r\n      state[key] = paramsForKey.length > 1 ? paramsForKey : params.get(key) || \"\";\r\n      unusedKeys.delete(key);\r\n    }\r\n    Array.from(unusedKeys).forEach((key) => delete state[key]);\r\n  }\r\n  const { pause, resume } = pausableWatch(\r\n    state,\r\n    () => {\r\n      const params = new URLSearchParams(\"\");\r\n      Object.keys(state).forEach((key) => {\r\n        const mapEntry = state[key];\r\n        if (Array.isArray(mapEntry))\r\n          mapEntry.forEach((value) => params.append(key, value));\r\n        else if (removeNullishValues && mapEntry == null)\r\n          params.delete(key);\r\n        else if (removeFalsyValues && !mapEntry)\r\n          params.delete(key);\r\n        else\r\n          params.set(key, mapEntry);\r\n      });\r\n      write(params);\r\n    },\r\n    { deep: true }\r\n  );\r\n  function write(params, shouldUpdate) {\r\n    pause();\r\n    if (shouldUpdate)\r\n      updateState(params);\r\n    window.history.replaceState(\r\n      window.history.state,\r\n      window.document.title,\r\n      window.location.pathname + constructQuery(params)\r\n    );\r\n    resume();\r\n  }\r\n  function onChanged() {\r\n    if (!enableWrite)\r\n      return;\r\n    write(read(), true);\r\n  }\r\n  useEventListener(window, \"popstate\", onChanged, false);\r\n  if (mode !== \"history\")\r\n    useEventListener(window, \"hashchange\", onChanged, false);\r\n  const initial = read();\r\n  if (initial.keys().next().value)\r\n    updateState(initial);\r\n  else\r\n    Object.assign(state, initialValue);\r\n  return state;\r\n}\r\n\r\nfunction useUserMedia(options = {}) {\r\n  var _a, _b;\r\n  const enabled = ref((_a = options.enabled) != null ? _a : false);\r\n  const autoSwitch = ref((_b = options.autoSwitch) != null ? _b : true);\r\n  const constraints = ref(options.constraints);\r\n  const { navigator = defaultNavigator } = options;\r\n  const isSupported = useSupported(() => {\r\n    var _a2;\r\n    return (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.getUserMedia;\r\n  });\r\n  const stream = shallowRef();\r\n  function getDeviceOptions(type) {\r\n    switch (type) {\r\n      case \"video\": {\r\n        if (constraints.value)\r\n          return constraints.value.video || false;\r\n        break;\r\n      }\r\n      case \"audio\": {\r\n        if (constraints.value)\r\n          return constraints.value.audio || false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  async function _start() {\r\n    if (!isSupported.value || stream.value)\r\n      return;\r\n    stream.value = await navigator.mediaDevices.getUserMedia({\r\n      video: getDeviceOptions(\"video\"),\r\n      audio: getDeviceOptions(\"audio\")\r\n    });\r\n    return stream.value;\r\n  }\r\n  function _stop() {\r\n    var _a2;\r\n    (_a2 = stream.value) == null ? void 0 : _a2.getTracks().forEach((t) => t.stop());\r\n    stream.value = void 0;\r\n  }\r\n  function stop() {\r\n    _stop();\r\n    enabled.value = false;\r\n  }\r\n  async function start() {\r\n    await _start();\r\n    if (stream.value)\r\n      enabled.value = true;\r\n    return stream.value;\r\n  }\r\n  async function restart() {\r\n    _stop();\r\n    return await start();\r\n  }\r\n  watch(\r\n    enabled,\r\n    (v) => {\r\n      if (v)\r\n        _start();\r\n      else\r\n        _stop();\r\n    },\r\n    { immediate: true }\r\n  );\r\n  watch(\r\n    constraints,\r\n    () => {\r\n      if (autoSwitch.value && stream.value)\r\n        restart();\r\n    },\r\n    { immediate: true }\r\n  );\r\n  return {\r\n    isSupported,\r\n    stream,\r\n    start,\r\n    stop,\r\n    restart,\r\n    constraints,\r\n    enabled,\r\n    autoSwitch\r\n  };\r\n}\r\n\r\nfunction useVModel(props, key, emit, options = {}) {\r\n  var _a, _b, _c, _d, _e;\r\n  const {\r\n    clone = false,\r\n    passive = false,\r\n    eventName,\r\n    deep = false,\r\n    defaultValue,\r\n    shouldEmit\r\n  } = options;\r\n  const vm = getCurrentInstance();\r\n  const _emit = emit || (vm == null ? void 0 : vm.emit) || ((_a = vm == null ? void 0 : vm.$emit) == null ? void 0 : _a.bind(vm)) || ((_c = (_b = vm == null ? void 0 : vm.proxy) == null ? void 0 : _b.$emit) == null ? void 0 : _c.bind(vm == null ? void 0 : vm.proxy));\r\n  let event = eventName;\r\n  if (!key) {\r\n    if (isVue2) {\r\n      const modelOptions = (_e = (_d = vm == null ? void 0 : vm.proxy) == null ? void 0 : _d.$options) == null ? void 0 : _e.model;\r\n      key = (modelOptions == null ? void 0 : modelOptions.value) || \"value\";\r\n      if (!eventName)\r\n        event = (modelOptions == null ? void 0 : modelOptions.event) || \"input\";\r\n    } else {\r\n      key = \"modelValue\";\r\n    }\r\n  }\r\n  event = event || `update:${key.toString()}`;\r\n  const cloneFn = (val) => !clone ? val : typeof clone === \"function\" ? clone(val) : cloneFnJSON(val);\r\n  const getValue = () => isDef(props[key]) ? cloneFn(props[key]) : defaultValue;\r\n  const triggerEmit = (value) => {\r\n    if (shouldEmit) {\r\n      if (shouldEmit(value))\r\n        _emit(event, value);\r\n    } else {\r\n      _emit(event, value);\r\n    }\r\n  };\r\n  if (passive) {\r\n    const initialValue = getValue();\r\n    const proxy = ref(initialValue);\r\n    watch(\r\n      () => props[key],\r\n      (v) => proxy.value = cloneFn(v)\r\n    );\r\n    watch(\r\n      proxy,\r\n      (v) => {\r\n        if (v !== props[key] || deep)\r\n          triggerEmit(v);\r\n      },\r\n      { deep }\r\n    );\r\n    return proxy;\r\n  } else {\r\n    return computed({\r\n      get() {\r\n        return getValue();\r\n      },\r\n      set(value) {\r\n        triggerEmit(value);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction useVModels(props, emit, options = {}) {\r\n  const ret = {};\r\n  for (const key in props)\r\n    ret[key] = useVModel(props, key, emit, options);\r\n  return ret;\r\n}\r\n\r\nfunction useVibrate(options) {\r\n  const {\r\n    pattern = [],\r\n    interval = 0,\r\n    navigator = defaultNavigator\r\n  } = options || {};\r\n  const isSupported = useSupported(() => typeof navigator !== \"undefined\" && \"vibrate\" in navigator);\r\n  const patternRef = toRef(pattern);\r\n  let intervalControls;\r\n  const vibrate = (pattern2 = patternRef.value) => {\r\n    if (isSupported.value)\r\n      navigator.vibrate(pattern2);\r\n  };\r\n  const stop = () => {\r\n    if (isSupported.value)\r\n      navigator.vibrate(0);\r\n    intervalControls == null ? void 0 : intervalControls.pause();\r\n  };\r\n  if (interval > 0) {\r\n    intervalControls = useIntervalFn(\r\n      vibrate,\r\n      interval,\r\n      {\r\n        immediate: false,\r\n        immediateCallback: false\r\n      }\r\n    );\r\n  }\r\n  return {\r\n    isSupported,\r\n    pattern,\r\n    intervalControls,\r\n    vibrate,\r\n    stop\r\n  };\r\n}\r\n\r\nfunction useVirtualList(list, options) {\r\n  const { containerStyle, wrapperProps, scrollTo, calculateRange, currentList, containerRef } = \"itemHeight\" in options ? useVerticalVirtualList(options, list) : useHorizontalVirtualList(options, list);\r\n  return {\r\n    list: currentList,\r\n    scrollTo,\r\n    containerProps: {\r\n      ref: containerRef,\r\n      onScroll: () => {\r\n        calculateRange();\r\n      },\r\n      style: containerStyle\r\n    },\r\n    wrapperProps\r\n  };\r\n}\r\nfunction useVirtualListResources(list) {\r\n  const containerRef = ref(null);\r\n  const size = useElementSize(containerRef);\r\n  const currentList = ref([]);\r\n  const source = shallowRef(list);\r\n  const state = ref({ start: 0, end: 10 });\r\n  return { state, source, currentList, size, containerRef };\r\n}\r\nfunction createGetViewCapacity(state, source, itemSize) {\r\n  return (containerSize) => {\r\n    if (typeof itemSize === \"number\")\r\n      return Math.ceil(containerSize / itemSize);\r\n    const { start = 0 } = state.value;\r\n    let sum = 0;\r\n    let capacity = 0;\r\n    for (let i = start; i < source.value.length; i++) {\r\n      const size = itemSize(i);\r\n      sum += size;\r\n      capacity = i;\r\n      if (sum > containerSize)\r\n        break;\r\n    }\r\n    return capacity - start;\r\n  };\r\n}\r\nfunction createGetOffset(source, itemSize) {\r\n  return (scrollDirection) => {\r\n    if (typeof itemSize === \"number\")\r\n      return Math.floor(scrollDirection / itemSize) + 1;\r\n    let sum = 0;\r\n    let offset = 0;\r\n    for (let i = 0; i < source.value.length; i++) {\r\n      const size = itemSize(i);\r\n      sum += size;\r\n      if (sum >= scrollDirection) {\r\n        offset = i;\r\n        break;\r\n      }\r\n    }\r\n    return offset + 1;\r\n  };\r\n}\r\nfunction createCalculateRange(type, overscan, getOffset, getViewCapacity, { containerRef, state, currentList, source }) {\r\n  return () => {\r\n    const element = containerRef.value;\r\n    if (element) {\r\n      const offset = getOffset(type === \"vertical\" ? element.scrollTop : element.scrollLeft);\r\n      const viewCapacity = getViewCapacity(type === \"vertical\" ? element.clientHeight : element.clientWidth);\r\n      const from = offset - overscan;\r\n      const to = offset + viewCapacity + overscan;\r\n      state.value = {\r\n        start: from < 0 ? 0 : from,\r\n        end: to > source.value.length ? source.value.length : to\r\n      };\r\n      currentList.value = source.value.slice(state.value.start, state.value.end).map((ele, index) => ({\r\n        data: ele,\r\n        index: index + state.value.start\r\n      }));\r\n    }\r\n  };\r\n}\r\nfunction createGetDistance(itemSize, source) {\r\n  return (index) => {\r\n    if (typeof itemSize === \"number\") {\r\n      const size2 = index * itemSize;\r\n      return size2;\r\n    }\r\n    const size = source.value.slice(0, index).reduce((sum, _, i) => sum + itemSize(i), 0);\r\n    return size;\r\n  };\r\n}\r\nfunction useWatchForSizes(size, list, calculateRange) {\r\n  watch([size.width, size.height, list], () => {\r\n    calculateRange();\r\n  });\r\n}\r\nfunction createComputedTotalSize(itemSize, source) {\r\n  return computed(() => {\r\n    if (typeof itemSize === \"number\")\r\n      return source.value.length * itemSize;\r\n    return source.value.reduce((sum, _, index) => sum + itemSize(index), 0);\r\n  });\r\n}\r\nconst scrollToDictionaryForElementScrollKey = {\r\n  horizontal: \"scrollLeft\",\r\n  vertical: \"scrollTop\"\r\n};\r\nfunction createScrollTo(type, calculateRange, getDistance, containerRef) {\r\n  return (index) => {\r\n    if (containerRef.value) {\r\n      containerRef.value[scrollToDictionaryForElementScrollKey[type]] = getDistance(index);\r\n      calculateRange();\r\n    }\r\n  };\r\n}\r\nfunction useHorizontalVirtualList(options, list) {\r\n  const resources = useVirtualListResources(list);\r\n  const { state, source, currentList, size, containerRef } = resources;\r\n  const containerStyle = { overflowX: \"auto\" };\r\n  const { itemWidth, overscan = 5 } = options;\r\n  const getViewCapacity = createGetViewCapacity(state, source, itemWidth);\r\n  const getOffset = createGetOffset(source, itemWidth);\r\n  const calculateRange = createCalculateRange(\"horizontal\", overscan, getOffset, getViewCapacity, resources);\r\n  const getDistanceLeft = createGetDistance(itemWidth, source);\r\n  const offsetLeft = computed(() => getDistanceLeft(state.value.start));\r\n  const totalWidth = createComputedTotalSize(itemWidth, source);\r\n  useWatchForSizes(size, list, calculateRange);\r\n  const scrollTo = createScrollTo(\"horizontal\", calculateRange, getDistanceLeft, containerRef);\r\n  const wrapperProps = computed(() => {\r\n    return {\r\n      style: {\r\n        height: \"100%\",\r\n        width: `${totalWidth.value - offsetLeft.value}px`,\r\n        marginLeft: `${offsetLeft.value}px`,\r\n        display: \"flex\"\r\n      }\r\n    };\r\n  });\r\n  return {\r\n    scrollTo,\r\n    calculateRange,\r\n    wrapperProps,\r\n    containerStyle,\r\n    currentList,\r\n    containerRef\r\n  };\r\n}\r\nfunction useVerticalVirtualList(options, list) {\r\n  const resources = useVirtualListResources(list);\r\n  const { state, source, currentList, size, containerRef } = resources;\r\n  const containerStyle = { overflowY: \"auto\" };\r\n  const { itemHeight, overscan = 5 } = options;\r\n  const getViewCapacity = createGetViewCapacity(state, source, itemHeight);\r\n  const getOffset = createGetOffset(source, itemHeight);\r\n  const calculateRange = createCalculateRange(\"vertical\", overscan, getOffset, getViewCapacity, resources);\r\n  const getDistanceTop = createGetDistance(itemHeight, source);\r\n  const offsetTop = computed(() => getDistanceTop(state.value.start));\r\n  const totalHeight = createComputedTotalSize(itemHeight, source);\r\n  useWatchForSizes(size, list, calculateRange);\r\n  const scrollTo = createScrollTo(\"vertical\", calculateRange, getDistanceTop, containerRef);\r\n  const wrapperProps = computed(() => {\r\n    return {\r\n      style: {\r\n        width: \"100%\",\r\n        height: `${totalHeight.value - offsetTop.value}px`,\r\n        marginTop: `${offsetTop.value}px`\r\n      }\r\n    };\r\n  });\r\n  return {\r\n    calculateRange,\r\n    scrollTo,\r\n    containerStyle,\r\n    wrapperProps,\r\n    currentList,\r\n    containerRef\r\n  };\r\n}\r\n\r\nfunction useWakeLock(options = {}) {\r\n  const {\r\n    navigator = defaultNavigator,\r\n    document = defaultDocument\r\n  } = options;\r\n  let wakeLock;\r\n  const isSupported = useSupported(() => navigator && \"wakeLock\" in navigator);\r\n  const isActive = ref(false);\r\n  async function onVisibilityChange() {\r\n    if (!isSupported.value || !wakeLock)\r\n      return;\r\n    if (document && document.visibilityState === \"visible\")\r\n      wakeLock = await navigator.wakeLock.request(\"screen\");\r\n    isActive.value = !wakeLock.released;\r\n  }\r\n  if (document)\r\n    useEventListener(document, \"visibilitychange\", onVisibilityChange, { passive: true });\r\n  async function request(type) {\r\n    if (!isSupported.value)\r\n      return;\r\n    wakeLock = await navigator.wakeLock.request(type);\r\n    isActive.value = !wakeLock.released;\r\n  }\r\n  async function release() {\r\n    if (!isSupported.value || !wakeLock)\r\n      return;\r\n    await wakeLock.release();\r\n    isActive.value = !wakeLock.released;\r\n    wakeLock = null;\r\n  }\r\n  return {\r\n    isSupported,\r\n    isActive,\r\n    request,\r\n    release\r\n  };\r\n}\r\n\r\nfunction useWebNotification(defaultOptions = {}) {\r\n  const {\r\n    window = defaultWindow\r\n  } = defaultOptions;\r\n  const isSupported = useSupported(() => !!window && \"Notification\" in window);\r\n  const notification = ref(null);\r\n  const requestPermission = async () => {\r\n    if (!isSupported.value)\r\n      return;\r\n    if (\"permission\" in Notification && Notification.permission !== \"denied\")\r\n      await Notification.requestPermission();\r\n  };\r\n  const { on: onClick, trigger: clickTrigger } = createEventHook();\r\n  const { on: onShow, trigger: showTrigger } = createEventHook();\r\n  const { on: onError, trigger: errorTrigger } = createEventHook();\r\n  const { on: onClose, trigger: closeTrigger } = createEventHook();\r\n  const show = async (overrides) => {\r\n    if (!isSupported.value)\r\n      return;\r\n    await requestPermission();\r\n    const options = Object.assign({}, defaultOptions, overrides);\r\n    notification.value = new Notification(options.title || \"\", options);\r\n    notification.value.onclick = clickTrigger;\r\n    notification.value.onshow = showTrigger;\r\n    notification.value.onerror = errorTrigger;\r\n    notification.value.onclose = closeTrigger;\r\n    return notification.value;\r\n  };\r\n  const close = () => {\r\n    if (notification.value)\r\n      notification.value.close();\r\n    notification.value = null;\r\n  };\r\n  tryOnMounted(async () => {\r\n    if (isSupported.value)\r\n      await requestPermission();\r\n  });\r\n  tryOnScopeDispose(close);\r\n  if (isSupported.value && window) {\r\n    const document = window.document;\r\n    useEventListener(document, \"visibilitychange\", (e) => {\r\n      e.preventDefault();\r\n      if (document.visibilityState === \"visible\") {\r\n        close();\r\n      }\r\n    });\r\n  }\r\n  return {\r\n    isSupported,\r\n    notification,\r\n    show,\r\n    close,\r\n    onClick,\r\n    onShow,\r\n    onError,\r\n    onClose\r\n  };\r\n}\r\n\r\nconst DEFAULT_PING_MESSAGE = \"ping\";\r\nfunction resolveNestedOptions(options) {\r\n  if (options === true)\r\n    return {};\r\n  return options;\r\n}\r\nfunction useWebSocket(url, options = {}) {\r\n  const {\r\n    onConnected,\r\n    onDisconnected,\r\n    onError,\r\n    onMessage,\r\n    immediate = true,\r\n    autoClose = true,\r\n    protocols = []\r\n  } = options;\r\n  const data = ref(null);\r\n  const status = ref(\"CLOSED\");\r\n  const wsRef = ref();\r\n  const urlRef = toRef(url);\r\n  let heartbeatPause;\r\n  let heartbeatResume;\r\n  let explicitlyClosed = false;\r\n  let retried = 0;\r\n  let bufferedData = [];\r\n  let pongTimeoutWait;\r\n  const close = (code = 1e3, reason) => {\r\n    if (!wsRef.value)\r\n      return;\r\n    explicitlyClosed = true;\r\n    heartbeatPause == null ? void 0 : heartbeatPause();\r\n    wsRef.value.close(code, reason);\r\n  };\r\n  const _sendBuffer = () => {\r\n    if (bufferedData.length && wsRef.value && status.value === \"OPEN\") {\r\n      for (const buffer of bufferedData)\r\n        wsRef.value.send(buffer);\r\n      bufferedData = [];\r\n    }\r\n  };\r\n  const resetHeartbeat = () => {\r\n    clearTimeout(pongTimeoutWait);\r\n    pongTimeoutWait = void 0;\r\n  };\r\n  const send = (data2, useBuffer = true) => {\r\n    if (!wsRef.value || status.value !== \"OPEN\") {\r\n      if (useBuffer)\r\n        bufferedData.push(data2);\r\n      return false;\r\n    }\r\n    _sendBuffer();\r\n    wsRef.value.send(data2);\r\n    return true;\r\n  };\r\n  const _init = () => {\r\n    if (explicitlyClosed || typeof urlRef.value === \"undefined\")\r\n      return;\r\n    const ws = new WebSocket(urlRef.value, protocols);\r\n    wsRef.value = ws;\r\n    status.value = \"CONNECTING\";\r\n    ws.onopen = () => {\r\n      status.value = \"OPEN\";\r\n      onConnected == null ? void 0 : onConnected(ws);\r\n      heartbeatResume == null ? void 0 : heartbeatResume();\r\n      _sendBuffer();\r\n    };\r\n    ws.onclose = (ev) => {\r\n      status.value = \"CLOSED\";\r\n      wsRef.value = void 0;\r\n      onDisconnected == null ? void 0 : onDisconnected(ws, ev);\r\n      if (!explicitlyClosed && options.autoReconnect) {\r\n        const {\r\n          retries = -1,\r\n          delay = 1e3,\r\n          onFailed\r\n        } = resolveNestedOptions(options.autoReconnect);\r\n        retried += 1;\r\n        if (typeof retries === \"number\" && (retries < 0 || retried < retries))\r\n          setTimeout(_init, delay);\r\n        else if (typeof retries === \"function\" && retries())\r\n          setTimeout(_init, delay);\r\n        else\r\n          onFailed == null ? void 0 : onFailed();\r\n      }\r\n    };\r\n    ws.onerror = (e) => {\r\n      onError == null ? void 0 : onError(ws, e);\r\n    };\r\n    ws.onmessage = (e) => {\r\n      if (options.heartbeat) {\r\n        resetHeartbeat();\r\n        const {\r\n          message = DEFAULT_PING_MESSAGE\r\n        } = resolveNestedOptions(options.heartbeat);\r\n        if (e.data === message)\r\n          return;\r\n      }\r\n      data.value = e.data;\r\n      onMessage == null ? void 0 : onMessage(ws, e);\r\n    };\r\n  };\r\n  if (options.heartbeat) {\r\n    const {\r\n      message = DEFAULT_PING_MESSAGE,\r\n      interval = 1e3,\r\n      pongTimeout = 1e3\r\n    } = resolveNestedOptions(options.heartbeat);\r\n    const { pause, resume } = useIntervalFn(\r\n      () => {\r\n        send(message, false);\r\n        if (pongTimeoutWait != null)\r\n          return;\r\n        pongTimeoutWait = setTimeout(() => {\r\n          close();\r\n        }, pongTimeout);\r\n      },\r\n      interval,\r\n      { immediate: false }\r\n    );\r\n    heartbeatPause = pause;\r\n    heartbeatResume = resume;\r\n  }\r\n  if (autoClose) {\r\n    useEventListener(window, \"beforeunload\", () => close());\r\n    tryOnScopeDispose(close);\r\n  }\r\n  const open = () => {\r\n    close();\r\n    explicitlyClosed = false;\r\n    retried = 0;\r\n    _init();\r\n  };\r\n  if (immediate)\r\n    watch(urlRef, open, { immediate: true });\r\n  return {\r\n    data,\r\n    status,\r\n    close,\r\n    send,\r\n    open,\r\n    ws: wsRef\r\n  };\r\n}\r\n\r\nfunction useWebWorker(arg0, workerOptions, options) {\r\n  const {\r\n    window = defaultWindow\r\n  } = options != null ? options : {};\r\n  const data = ref(null);\r\n  const worker = shallowRef();\r\n  const post = (...args) => {\r\n    if (!worker.value)\r\n      return;\r\n    worker.value.postMessage(...args);\r\n  };\r\n  const terminate = function terminate2() {\r\n    if (!worker.value)\r\n      return;\r\n    worker.value.terminate();\r\n  };\r\n  if (window) {\r\n    if (typeof arg0 === \"string\")\r\n      worker.value = new Worker(arg0, workerOptions);\r\n    else if (typeof arg0 === \"function\")\r\n      worker.value = arg0();\r\n    else\r\n      worker.value = arg0;\r\n    worker.value.onmessage = (e) => {\r\n      data.value = e.data;\r\n    };\r\n    tryOnScopeDispose(() => {\r\n      if (worker.value)\r\n        worker.value.terminate();\r\n    });\r\n  }\r\n  return {\r\n    data,\r\n    post,\r\n    terminate,\r\n    worker\r\n  };\r\n}\r\n\r\nfunction jobRunner(userFunc) {\r\n  return (e) => {\r\n    const userFuncArgs = e.data[0];\r\n    return Promise.resolve(userFunc.apply(void 0, userFuncArgs)).then((result) => {\r\n      postMessage([\"SUCCESS\", result]);\r\n    }).catch((error) => {\r\n      postMessage([\"ERROR\", error]);\r\n    });\r\n  };\r\n}\r\n\r\nfunction depsParser(deps) {\r\n  if (deps.length === 0)\r\n    return \"\";\r\n  const depsString = deps.map((dep) => `'${dep}'`).toString();\r\n  return `importScripts(${depsString})`;\r\n}\r\n\r\nfunction createWorkerBlobUrl(fn, deps) {\r\n  const blobCode = `${depsParser(deps)}; onmessage=(${jobRunner})(${fn})`;\r\n  const blob = new Blob([blobCode], { type: \"text/javascript\" });\r\n  const url = URL.createObjectURL(blob);\r\n  return url;\r\n}\r\n\r\nfunction useWebWorkerFn(fn, options = {}) {\r\n  const {\r\n    dependencies = [],\r\n    timeout,\r\n    window = defaultWindow\r\n  } = options;\r\n  const worker = ref();\r\n  const workerStatus = ref(\"PENDING\");\r\n  const promise = ref({});\r\n  const timeoutId = ref();\r\n  const workerTerminate = (status = \"PENDING\") => {\r\n    if (worker.value && worker.value._url && window) {\r\n      worker.value.terminate();\r\n      URL.revokeObjectURL(worker.value._url);\r\n      promise.value = {};\r\n      worker.value = void 0;\r\n      window.clearTimeout(timeoutId.value);\r\n      workerStatus.value = status;\r\n    }\r\n  };\r\n  workerTerminate();\r\n  tryOnScopeDispose(workerTerminate);\r\n  const generateWorker = () => {\r\n    const blobUrl = createWorkerBlobUrl(fn, dependencies);\r\n    const newWorker = new Worker(blobUrl);\r\n    newWorker._url = blobUrl;\r\n    newWorker.onmessage = (e) => {\r\n      const { resolve = () => {\r\n      }, reject = () => {\r\n      } } = promise.value;\r\n      const [status, result] = e.data;\r\n      switch (status) {\r\n        case \"SUCCESS\":\r\n          resolve(result);\r\n          workerTerminate(status);\r\n          break;\r\n        default:\r\n          reject(result);\r\n          workerTerminate(\"ERROR\");\r\n          break;\r\n      }\r\n    };\r\n    newWorker.onerror = (e) => {\r\n      const { reject = () => {\r\n      } } = promise.value;\r\n      reject(e);\r\n      workerTerminate(\"ERROR\");\r\n    };\r\n    if (timeout) {\r\n      timeoutId.value = setTimeout(\r\n        () => workerTerminate(\"TIMEOUT_EXPIRED\"),\r\n        timeout\r\n      );\r\n    }\r\n    return newWorker;\r\n  };\r\n  const callWorker = (...fnArgs) => new Promise((resolve, reject) => {\r\n    promise.value = {\r\n      resolve,\r\n      reject\r\n    };\r\n    worker.value && worker.value.postMessage([[...fnArgs]]);\r\n    workerStatus.value = \"RUNNING\";\r\n  });\r\n  const workerFn = (...fnArgs) => {\r\n    if (workerStatus.value === \"RUNNING\") {\r\n      console.error(\r\n        \"[useWebWorkerFn] You can only run one instance of the worker at a time.\"\r\n      );\r\n      return Promise.reject();\r\n    }\r\n    worker.value = generateWorker();\r\n    return callWorker(...fnArgs);\r\n  };\r\n  return {\r\n    workerFn,\r\n    workerStatus,\r\n    workerTerminate\r\n  };\r\n}\r\n\r\nfunction useWindowFocus({ window = defaultWindow } = {}) {\r\n  if (!window)\r\n    return ref(false);\r\n  const focused = ref(window.document.hasFocus());\r\n  useEventListener(window, \"blur\", () => {\r\n    focused.value = false;\r\n  });\r\n  useEventListener(window, \"focus\", () => {\r\n    focused.value = true;\r\n  });\r\n  return focused;\r\n}\r\n\r\nfunction useWindowScroll({ window = defaultWindow } = {}) {\r\n  if (!window) {\r\n    return {\r\n      x: ref(0),\r\n      y: ref(0)\r\n    };\r\n  }\r\n  const x = ref(window.scrollX);\r\n  const y = ref(window.scrollY);\r\n  useEventListener(\r\n    window,\r\n    \"scroll\",\r\n    () => {\r\n      x.value = window.scrollX;\r\n      y.value = window.scrollY;\r\n    },\r\n    {\r\n      capture: false,\r\n      passive: true\r\n    }\r\n  );\r\n  return { x, y };\r\n}\r\n\r\nfunction useWindowSize(options = {}) {\r\n  const {\r\n    window = defaultWindow,\r\n    initialWidth = Infinity,\r\n    initialHeight = Infinity,\r\n    listenOrientation = true,\r\n    includeScrollbar = true\r\n  } = options;\r\n  const width = ref(initialWidth);\r\n  const height = ref(initialHeight);\r\n  const update = () => {\r\n    if (window) {\r\n      if (includeScrollbar) {\r\n        width.value = window.innerWidth;\r\n        height.value = window.innerHeight;\r\n      } else {\r\n        width.value = window.document.documentElement.clientWidth;\r\n        height.value = window.document.documentElement.clientHeight;\r\n      }\r\n    }\r\n  };\r\n  update();\r\n  tryOnMounted(update);\r\n  useEventListener(\"resize\", update, { passive: true });\r\n  if (listenOrientation) {\r\n    const matches = useMediaQuery(\"(orientation: portrait)\");\r\n    watch(matches, () => update());\r\n  }\r\n  return { width, height };\r\n}\r\n\r\nexport { DefaultMagicKeysAliasMap, StorageSerializers, TransitionPresets, computedAsync as asyncComputed, breakpointsAntDesign, breakpointsBootstrapV5, breakpointsMasterCss, breakpointsQuasar, breakpointsSematic, breakpointsTailwind, breakpointsVuetify, cloneFnJSON, computedAsync, computedInject, createFetch, createReusableTemplate, createTemplatePromise, createUnrefFn, customStorageEventName, defaultDocument, defaultLocation, defaultNavigator, defaultWindow, executeTransition, formatTimeAgo, getSSRHandler, mapGamepadToXbox360Controller, onClickOutside, onKeyDown, onKeyPressed, onKeyStroke, onKeyUp, onLongPress, onStartTyping, setSSRHandler, templateRef, unrefElement, useActiveElement, useAnimate, useAsyncQueue, useAsyncState, useBase64, useBattery, useBluetooth, useBreakpoints, useBroadcastChannel, useBrowserLocation, useCached, useClipboard, useCloned, useColorMode, useConfirmDialog, useCssVar, useCurrentElement, useCycleList, useDark, useDebouncedRefHistory, useDeviceMotion, useDeviceOrientation, useDevicePixelRatio, useDevicesList, useDisplayMedia, useDocumentVisibility, useDraggable, useDropZone, useElementBounding, useElementByPoint, useElementHover, useElementSize, useElementVisibility, useEventBus, useEventListener, useEventSource, useEyeDropper, useFavicon, useFetch, useFileDialog, useFileSystemAccess, useFocus, useFocusWithin, useFps, useFullscreen, useGamepad, useGeolocation, useIdle, useImage, useInfiniteScroll, useIntersectionObserver, useKeyModifier, useLocalStorage, useMagicKeys, useManualRefHistory, useMediaControls, useMediaQuery, useMemoize, useMemory, useMounted, useMouse, useMouseInElement, useMousePressed, useMutationObserver, useNavigatorLanguage, useNetwork, useNow, useObjectUrl, useOffsetPagination, useOnline, usePageLeave, useParallax, useParentElement, usePerformanceObserver, usePermission, usePointer, usePointerLock, usePointerSwipe, usePreferredColorScheme, usePreferredContrast, usePreferredDark, usePreferredLanguages, usePreferredReducedMotion, usePrevious, useRafFn, useRefHistory, useResizeObserver, useScreenOrientation, useScreenSafeArea, useScriptTag, useScroll, useScrollLock, useSessionStorage, useShare, useSorted, useSpeechRecognition, useSpeechSynthesis, useStepper, useStorage, useStorageAsync, useStyleTag, useSupported, useSwipe, useTemplateRefsList, useTextDirection, useTextSelection, useTextareaAutosize, useThrottledRefHistory, useTimeAgo, useTimeoutPoll, useTimestamp, useTitle, useTransition, useUrlSearchParams, useUserMedia, useVModel, useVModels, useVibrate, useVirtualList, useWakeLock, useWebNotification, useWebSocket, useWebWorker, useWebWorkerFn, useWindowFocus, useWindowScroll, useWindowSize };\r\n", "import { computed, onMounted, onUnmounted, ref, watchEffect } from 'vue';\r\nimport { useMediaQuery } from '@vueuse/core';\r\nimport { useRoute } from 'vitepress';\r\nimport { isActive } from '../../shared';\r\nimport { hasActiveLink as containsActiveLink, getSidebar, getSidebarGroups } from '../support/sidebar';\r\nimport { useData } from './data';\r\nexport function useSidebar() {\r\n    const route = useRoute();\r\n    const { theme, frontmatter } = useData();\r\n    const is960 = useMediaQuery('(min-width: 960px)');\r\n    const isOpen = ref(false);\r\n    const sidebar = computed(() => {\r\n        const sidebarConfig = theme.value.sidebar;\r\n        const relativePath = route.data.relativePath;\r\n        return sidebarConfig ? getSidebar(sidebarConfig, relativePath) : [];\r\n    });\r\n    const hasSidebar = computed(() => {\r\n        return (frontmatter.value.sidebar !== false &&\r\n            sidebar.value.length > 0 &&\r\n            frontmatter.value.layout !== 'home');\r\n    });\r\n    const leftAside = computed(() => {\r\n        if (hasAside)\r\n            return frontmatter.value.aside == null\r\n                ? theme.value.aside === 'left'\r\n                : frontmatter.value.aside === 'left';\r\n        return false;\r\n    });\r\n    const hasAside = computed(() => {\r\n        if (frontmatter.value.layout === 'home')\r\n            return false;\r\n        if (frontmatter.value.aside != null)\r\n            return !!frontmatter.value.aside;\r\n        return theme.value.aside !== false;\r\n    });\r\n    const isSidebarEnabled = computed(() => hasSidebar.value && is960.value);\r\n    const sidebarGroups = computed(() => {\r\n        return hasSidebar.value ? getSidebarGroups(sidebar.value) : [];\r\n    });\r\n    function open() {\r\n        isOpen.value = true;\r\n    }\r\n    function close() {\r\n        isOpen.value = false;\r\n    }\r\n    function toggle() {\r\n        isOpen.value ? close() : open();\r\n    }\r\n    return {\r\n        isOpen,\r\n        sidebar,\r\n        sidebarGroups,\r\n        hasSidebar,\r\n        hasAside,\r\n        leftAside,\r\n        isSidebarEnabled,\r\n        open,\r\n        close,\r\n        toggle\r\n    };\r\n}\r\n/**\r\n * a11y: cache the element that opened the Sidebar (the menu button) then\r\n * focus that button again when Menu is closed with Escape key.\r\n */\r\nexport function useCloseSidebarOnEscape(isOpen, close) {\r\n    let triggerElement;\r\n    watchEffect(() => {\r\n        triggerElement = isOpen.value\r\n            ? document.activeElement\r\n            : undefined;\r\n    });\r\n    onMounted(() => {\r\n        window.addEventListener('keyup', onEscape);\r\n    });\r\n    onUnmounted(() => {\r\n        window.removeEventListener('keyup', onEscape);\r\n    });\r\n    function onEscape(e) {\r\n        if (e.key === 'Escape' && isOpen.value) {\r\n            close();\r\n            triggerElement?.focus();\r\n        }\r\n    }\r\n}\r\nexport function useSidebarControl(item) {\r\n    const { page } = useData();\r\n    const collapsed = ref(false);\r\n    const collapsible = computed(() => {\r\n        return item.value.collapsed != null;\r\n    });\r\n    const isLink = computed(() => {\r\n        return !!item.value.link;\r\n    });\r\n    const isActiveLink = computed(() => {\r\n        return isActive(page.value.relativePath, item.value.link);\r\n    });\r\n    const hasActiveLink = computed(() => {\r\n        if (isActiveLink.value) {\r\n            return true;\r\n        }\r\n        return item.value.items\r\n            ? containsActiveLink(page.value.relativePath, item.value.items)\r\n            : false;\r\n    });\r\n    const hasChildren = computed(() => {\r\n        return !!(item.value.items && item.value.items.length);\r\n    });\r\n    watchEffect(() => {\r\n        collapsed.value = !!(collapsible.value && item.value.collapsed);\r\n    });\r\n    watchEffect(() => {\r\n        ;\r\n        (isActiveLink.value || hasActiveLink.value) && (collapsed.value = false);\r\n    });\r\n    function toggle() {\r\n        if (collapsible.value) {\r\n            collapsed.value = !collapsed.value;\r\n        }\r\n    }\r\n    return {\r\n        collapsed,\r\n        collapsible,\r\n        isLink,\r\n        isActiveLink,\r\n        hasActiveLink,\r\n        hasChildren,\r\n        toggle\r\n    };\r\n}\r\n", "import { withBase } from 'vitepress';\r\nimport { useData } from '../composables/data';\r\nimport { isExternal, PATHNAME_PROTOCOL_RE } from '../../shared';\r\nexport function throttleAndDebounce(fn, delay) {\r\n    let timeoutId;\r\n    let called = false;\r\n    return () => {\r\n        if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n        }\r\n        if (!called) {\r\n            fn();\r\n            called = true;\r\n            setTimeout(() => {\r\n                called = false;\r\n            }, delay);\r\n        }\r\n        else {\r\n            timeoutId = setTimeout(fn, delay);\r\n        }\r\n    };\r\n}\r\nexport function ensureStartingSlash(path) {\r\n    return /^\\//.test(path) ? path : `/${path}`;\r\n}\r\nexport function normalizeLink(url) {\r\n    if (isExternal(url)) {\r\n        return url.replace(PATHNAME_PROTOCOL_RE, '');\r\n    }\r\n    const { site } = useData();\r\n    const { pathname, search, hash } = new URL(url, 'http://a.com');\r\n    const normalizedPath = pathname.endsWith('/') || pathname.endsWith('.html')\r\n        ? url\r\n        : url.replace(/(?:(^\\.+)\\/)?.*$/, `$1${pathname.replace(/(\\.md)?$/, site.value.cleanUrls ? '' : '.html')}${search}${hash}`);\r\n    return withBase(normalizedPath);\r\n}\r\n", "import { useData as useData$ } from 'vitepress';\r\nexport const useData = useData$;\r\n", "import { ensureStartingSlash } from './utils';\r\nimport { isActive } from '../../shared';\r\n/**\r\n * Get the `Sidebar` from sidebar option. This method will ensure to get correct\r\n * sidebar config from `MultiSideBarConfig` with various path combinations such\r\n * as matching `guide/` and `/guide/`. If no matching config was found, it will\r\n * return empty array.\r\n */\r\nexport function getSidebar(sidebar, path) {\r\n    if (Array.isArray(sidebar)) {\r\n        return sidebar;\r\n    }\r\n    if (sidebar == null) {\r\n        return [];\r\n    }\r\n    path = ensureStartingSlash(path);\r\n    const dir = Object.keys(sidebar)\r\n        .sort((a, b) => {\r\n        return b.split('/').length - a.split('/').length;\r\n    })\r\n        .find((dir) => {\r\n        // make sure the multi sidebar key starts with slash too\r\n        return path.startsWith(ensureStartingSlash(dir));\r\n    });\r\n    return dir ? sidebar[dir] : [];\r\n}\r\n/**\r\n * Get or generate sidebar group from the given sidebar items.\r\n */\r\nexport function getSidebarGroups(sidebar) {\r\n    const groups = [];\r\n    let lastGroupIndex = 0;\r\n    for (const index in sidebar) {\r\n        const item = sidebar[index];\r\n        if (item.items) {\r\n            lastGroupIndex = groups.push(item);\r\n            continue;\r\n        }\r\n        if (!groups[lastGroupIndex]) {\r\n            groups.push({ items: [] });\r\n        }\r\n        groups[lastGroupIndex].items.push(item);\r\n    }\r\n    return groups;\r\n}\r\nexport function getFlatSideBarLinks(sidebar) {\r\n    const links = [];\r\n    function recursivelyExtractLinks(items) {\r\n        for (const item of items) {\r\n            if (item.text && item.link) {\r\n                links.push({ text: item.text, link: item.link });\r\n            }\r\n            if (item.items) {\r\n                recursivelyExtractLinks(item.items);\r\n            }\r\n        }\r\n    }\r\n    recursivelyExtractLinks(sidebar);\r\n    return links;\r\n}\r\n/**\r\n * Check if the given sidebar item contains any active link.\r\n */\r\nexport function hasActiveLink(path, items) {\r\n    if (Array.isArray(items)) {\r\n        return items.some((item) => hasActiveLink(path, item));\r\n    }\r\n    return isActive(path, items.link)\r\n        ? true\r\n        : items.items\r\n            ? hasActiveLink(path, items.items)\r\n            : false;\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA,OAAO;;;ACAP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO;AACP,OAAO,aAAa;AACpB,OAAO,YAAY;AAInB,SAAoB,WAAXA,gBAA6B;AACtC,SAAoB,WAAXA,gBAAiC;AAC1C,SAAoB,WAAXA,gBAAiC;AAC1C,SAAoB,WAAXA,gBAAqC;AAC9C,SAAoB,WAAXA,gBAA6B;AACtC,SAAoB,WAAXA,gBAAkC;AAC3C,SAAoB,WAAXA,gBAAoC;AAC7C,SAAoB,WAAXA,gBAAgC;;;AC8CzC,SAAS,kBAAkB,IAAI;AAC7B,MAAI,gBAAgB,GAAG;AACrB,mBAAe,EAAE;AACjB,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAiOA,IAAM,WAAW,OAAO,WAAW;AAYnC,IAAM,OAAO,MAAM;AACnB;AAOA,IAAM,QAAwB,SAAS;AACvC,SAAS,WAAW;AAClB,MAAI;AACJ,SAAO,cAAc,KAAK,UAAU,OAAO,SAAS,OAAO,cAAc,OAAO,SAAS,GAAG,cAA8B,iBAAiB,KAAK,OAAO,UAAU,SAAS;AAC5K;AAiIA,SAAS,SAAS,KAAK;AACrB,SAAO;AACT;AAmDA,SAASC,UAAS,MAAM;AACtB,MAAI,KAAK,WAAW;AAClB,WAAO,MAAQ,GAAG,IAAI;AACxB,QAAM,IAAI,KAAK,CAAC;AAChB,SAAO,OAAO,MAAM,aAAa,SAAS,UAAU,OAAO,EAAE,KAAK,GAAG,KAAK,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC;AAC7F;;;AC3TA,IAAM,gBAAgB,WAAW,SAAS;AAC1C,IAAM,kBAAkB,WAAW,OAAO,WAAW;AACrD,IAAM,mBAAmB,WAAW,OAAO,YAAY;AACvD,IAAM,kBAAkB,WAAW,OAAO,WAAW;AAgSrD,SAAS,aAAa;AACpB,QAAM,YAAY,IAAI,KAAK;AAC3B,MAAI,mBAAmB,GAAG;AACxB,cAAU,MAAM;AACd,gBAAU,QAAQ;AAAA,IACpB,CAAC;AAAA,EACH;AACA,SAAO;AACT;AAEA,SAAS,aAAa,UAAU;AAC9B,QAAM,YAAY,WAAW;AAC7B,SAAO,SAAS,MAAM;AACpB,cAAU;AACV,WAAO,QAAQ,SAAS,CAAC;AAAA,EAC3B,CAAC;AACH;AAklBA,SAAS,cAAc,OAAO,UAAU,CAAC,GAAG;AAC1C,QAAM,EAAE,QAAAC,UAAS,cAAc,IAAI;AACnC,QAAM,cAAc,aAAa,MAAMA,WAAU,gBAAgBA,WAAU,OAAOA,QAAO,eAAe,UAAU;AAClH,MAAI;AACJ,QAAM,UAAU,IAAI,KAAK;AACzB,QAAM,UAAU,MAAM;AACpB,QAAI,CAAC;AACH;AACF,QAAI,yBAAyB;AAC3B,iBAAW,oBAAoB,UAAU,MAAM;AAAA;AAE/C,iBAAW,eAAe,MAAM;AAAA,EACpC;AACA,QAAM,SAAS,MAAM;AACnB,QAAI,CAAC,YAAY;AACf;AACF,YAAQ;AACR,iBAAaA,QAAO,WAAWC,OAAM,KAAK,EAAE,KAAK;AACjD,YAAQ,QAAQ,CAAC,EAAE,cAAc,OAAO,SAAS,WAAW;AAC5D,QAAI,CAAC;AACH;AACF,QAAI,sBAAsB;AACxB,iBAAW,iBAAiB,UAAU,MAAM;AAAA;AAE5C,iBAAW,YAAY,MAAM;AAAA,EACjC;AACA,cAAY,MAAM;AAClB,oBAAkB,MAAM,QAAQ,CAAC;AACjC,SAAO;AACT;AAoVA,IAAM,UAAU,OAAO,eAAe,cAAc,aAAa,OAAO,WAAW,cAAc,SAAS,OAAO,WAAW,cAAc,SAAS,OAAO,SAAS,cAAc,OAAO,CAAC;AACzL,IAAM,YAAY;AAClB,IAAM,WAA2B,YAAY;AAC7C,SAAS,cAAc;AACrB,MAAI,EAAE,aAAa;AACjB,YAAQ,SAAS,IAAI,QAAQ,SAAS,KAAK,CAAC;AAC9C,SAAO,QAAQ,SAAS;AAC1B;AAw+GA,IAAM,eAAe;AAAA,EACnB,GAAG;AAAA,EACH,GAAG;AAAA,EACH,WAAW;AAAA,EACX,UAAU;AAAA,EACV,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,aAAa;AACf;AACA,IAAM,OAAuB,OAAO,KAAK,YAAY;AAw2CrD,IAAM,qBAAqB;AAAA,EACzB,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAC7B,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAC9B,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAChC,YAAY,CAAC,MAAM,GAAG,KAAK,CAAC;AAAA,EAC5B,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC;AAAA,EAC7B,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAChC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAC9B,cAAc,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAC/B,gBAAgB,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EACjC,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC;AAAA,EAC7B,cAAc,CAAC,MAAM,GAAG,KAAK,CAAC;AAAA,EAC9B,gBAAgB,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EACjC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAC9B,cAAc,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAC/B,gBAAgB,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EACjC,YAAY,CAAC,KAAK,GAAG,MAAM,CAAC;AAAA,EAC5B,aAAa,CAAC,MAAM,GAAG,KAAK,CAAC;AAAA,EAC7B,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAChC,YAAY,CAAC,MAAM,GAAG,GAAG,IAAI;AAAA,EAC7B,aAAa,CAAC,GAAG,MAAM,MAAM,CAAC;AAAA,EAC9B,eAAe,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAChC,YAAY,CAAC,MAAM,GAAG,MAAM,KAAK;AAAA,EACjC,aAAa,CAAC,MAAM,MAAM,MAAM,CAAC;AAAA,EACjC,eAAe,CAAC,MAAM,MAAM,MAAM,GAAG;AACvC;AACA,IAAM,oBAAoC,OAAO,OAAO,CAAC,GAAG,EAAE,QAAQ,SAAS,GAAG,kBAAkB;;;AClzMpG,SAAS,gBAAgB;;;ACFzB,SAAS,gBAAgB;;;ACAzB,SAAS,WAAW,gBAAgB;AAC7B,IAAM,UAAU;;;ADqBhB,SAAS,oBAAoB,MAAM;AACtC,SAAO,MAAM,KAAK,IAAI,IAAI,OAAO,IAAI,IAAI;AAC7C;;;AEhBO,SAAS,WAAW,SAAS,MAAM;AACtC,MAAI,MAAM,QAAQ,OAAO,GAAG;AACxB,WAAO;AAAA,EACX;AACA,MAAI,WAAW,MAAM;AACjB,WAAO,CAAC;AAAA,EACZ;AACA,SAAO,oBAAoB,IAAI;AAC/B,QAAM,MAAM,OAAO,KAAK,OAAO,EAC1B,KAAK,CAAC,GAAG,MAAM;AAChB,WAAO,EAAE,MAAM,GAAG,EAAE,SAAS,EAAE,MAAM,GAAG,EAAE;AAAA,EAC9C,CAAC,EACI,KAAK,CAACC,SAAQ;AAEf,WAAO,KAAK,WAAW,oBAAoBA,IAAG,CAAC;AAAA,EACnD,CAAC;AACD,SAAO,MAAM,QAAQ,GAAG,IAAI,CAAC;AACjC;AAIO,SAAS,iBAAiB,SAAS;AACtC,QAAM,SAAS,CAAC;AAChB,MAAI,iBAAiB;AACrB,aAAW,SAAS,SAAS;AACzB,UAAM,OAAO,QAAQ,KAAK;AAC1B,QAAI,KAAK,OAAO;AACZ,uBAAiB,OAAO,KAAK,IAAI;AACjC;AAAA,IACJ;AACA,QAAI,CAAC,OAAO,cAAc,GAAG;AACzB,aAAO,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC;AAAA,IAC7B;AACA,WAAO,cAAc,EAAE,MAAM,KAAK,IAAI;AAAA,EAC1C;AACA,SAAO;AACX;;;AHtCO,SAAS,aAAa;AACzB,QAAM,QAAQ,SAAS;AACvB,QAAM,EAAE,OAAAC,QAAO,YAAY,IAAI,QAAQ;AACvC,QAAM,QAAQ,cAAc,oBAAoB;AAChD,QAAM,SAAS,IAAI,KAAK;AACxB,QAAM,UAAU,SAAS,MAAM;AAC3B,UAAM,gBAAgBA,OAAM,MAAM;AAClC,UAAM,eAAe,MAAM,KAAK;AAChC,WAAO,gBAAgB,WAAW,eAAe,YAAY,IAAI,CAAC;AAAA,EACtE,CAAC;AACD,QAAM,aAAa,SAAS,MAAM;AAC9B,WAAQ,YAAY,MAAM,YAAY,SAClC,QAAQ,MAAM,SAAS,KACvB,YAAY,MAAM,WAAW;AAAA,EACrC,CAAC;AACD,QAAM,YAAY,SAAS,MAAM;AAC7B,QAAI;AACA,aAAO,YAAY,MAAM,SAAS,OAC5BA,OAAM,MAAM,UAAU,SACtB,YAAY,MAAM,UAAU;AACtC,WAAO;AAAA,EACX,CAAC;AACD,QAAM,WAAW,SAAS,MAAM;AAC5B,QAAI,YAAY,MAAM,WAAW;AAC7B,aAAO;AACX,QAAI,YAAY,MAAM,SAAS;AAC3B,aAAO,CAAC,CAAC,YAAY,MAAM;AAC/B,WAAOA,OAAM,MAAM,UAAU;AAAA,EACjC,CAAC;AACD,QAAM,mBAAmB,SAAS,MAAM,WAAW,SAAS,MAAM,KAAK;AACvE,QAAM,gBAAgB,SAAS,MAAM;AACjC,WAAO,WAAW,QAAQ,iBAAiB,QAAQ,KAAK,IAAI,CAAC;AAAA,EACjE,CAAC;AACD,WAAS,OAAO;AACZ,WAAO,QAAQ;AAAA,EACnB;AACA,WAAS,QAAQ;AACb,WAAO,QAAQ;AAAA,EACnB;AACA,WAAS,SAAS;AACd,WAAO,QAAQ,MAAM,IAAI,KAAK;AAAA,EAClC;AACA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;;;AHtCA,IAAM,QAAQ;AAAA,EACV;AAAA,EACA,YAAY,CAAC,EAAE,IAAI,MAAM;AACrB,QAAI,UAAU,SAAS,OAAO;AAAA,EAClC;AACJ;AACA,IAAO,wBAAQ;",
  "names": ["default", "toRef", "window", "toRef", "dir", "theme"]
}
